

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Fri Apr 08 15:27:07 2022

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=3
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    77                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    78                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    79                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    80  0000                     
    81                           ; Version 2.20
    82                           ; Generated 09/04/2020 GMT
    83                           ; 
    84                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC18F4620 Definitions
   113                           ; 
   114                           ; SFR Addresses
   115  0000                     
   116                           	psect	idataCOMRAM
   117  002AFA                     __pidataCOMRAM:
   118                           	callstack 0
   119                           
   120                           ;initializer for _HS
   121  002AFA  00                 	db	0
   122  002AFB  80                 	db	128
   123  002AFC  3F                 	db	63
   124                           
   125                           ;initializer for _clkMode
   126  002AFD  0001               	dw	1
   127                           
   128                           ;initializer for _hours
   129  002AFF  0001               	dw	1
   130                           
   131                           ;initializer for _seconds
   132  002B01  0014               	dw	20
   133                           
   134                           	psect	idataBANK0
   135  002B03                     __pidataBANK0:
   136                           	callstack 0
   137                           
   138                           ;initializer for _LCD_INIT_STRING
   139  002B03  28                 	db	40
   140  002B04  0C                 	db	12
   141  002B05  01                 	db	1
   142  002B06  06                 	db	6
   143                           
   144                           ;initializer for _count
   145  002B07  0004               	dw	4
   146                           
   147                           	psect	mediumconst
   148  00FED8                     __pmediumconst:
   149                           	callstack 0
   150  00FED8  00                 	db	0
   151  00FED9                     __powers_:
   152                           	callstack 0
   153  00FED9  00                 	db	0
   154  00FEDA  80                 	db	128
   155  00FEDB  3F                 	db	63
   156  00FEDC  00                 	db	0
   157  00FEDD  20                 	db	32
   158  00FEDE  41                 	db	65
   159  00FEDF  00                 	db	0
   160  00FEE0  C8                 	db	200
   161  00FEE1  42                 	db	66
   162  00FEE2  00                 	db	0
   163  00FEE3  7A                 	db	122
   164  00FEE4  44                 	db	68
   165  00FEE5  40                 	db	64
   166  00FEE6  1C                 	db	28
   167  00FEE7  46                 	db	70
   168  00FEE8  50                 	db	80
   169  00FEE9  C3                 	db	195
   170  00FEEA  47                 	db	71
   171  00FEEB  24                 	db	36
   172  00FEEC  74                 	db	116
   173  00FEED  49                 	db	73
   174  00FEEE  97                 	db	151
   175  00FEEF  18                 	db	24
   176  00FEF0  4B                 	db	75
   177  00FEF1  BC                 	db	188
   178  00FEF2  BE                 	db	190
   179  00FEF3  4C                 	db	76
   180  00FEF4  6B                 	db	107
   181  00FEF5  6E                 	db	110
   182  00FEF6  4E                 	db	78
   183  00FEF7  03                 	db	3
   184  00FEF8  15                 	db	21
   185  00FEF9  50                 	db	80
   186  00FEFA  79                 	db	121
   187  00FEFB  AD                 	db	173
   188  00FEFC  60                 	db	96
   189  00FEFD  F3                 	db	243
   190  00FEFE  49                 	db	73
   191  00FEFF  71                 	db	113
   192  00FF00                     __end_of__powers_:
   193                           	callstack 0
   194  00FF00                     __npowers_:
   195                           	callstack 0
   196  00FF00  00                 	db	0
   197  00FF01  80                 	db	128
   198  00FF02  3F                 	db	63
   199  00FF03  CD                 	db	205
   200  00FF04  CC                 	db	204
   201  00FF05  3D                 	db	61
   202  00FF06  D7                 	db	215
   203  00FF07  23                 	db	35
   204  00FF08  3C                 	db	60
   205  00FF09  12                 	db	18
   206  00FF0A  83                 	db	131
   207  00FF0B  3A                 	db	58
   208  00FF0C  B7                 	db	183
   209  00FF0D  D1                 	db	209
   210  00FF0E  38                 	db	56
   211  00FF0F  C6                 	db	198
   212  00FF10  27                 	db	39
   213  00FF11  37                 	db	55
   214  00FF12  38                 	db	56
   215  00FF13  86                 	db	134
   216  00FF14  35                 	db	53
   217  00FF15  C0                 	db	192
   218  00FF16  D6                 	db	214
   219  00FF17  33                 	db	51
   220  00FF18  CC                 	db	204
   221  00FF19  2B                 	db	43
   222  00FF1A  32                 	db	50
   223  00FF1B  70                 	db	112
   224  00FF1C  89                 	db	137
   225  00FF1D  30                 	db	48
   226  00FF1E  E7                 	db	231
   227  00FF1F  DB                 	db	219
   228  00FF20  2E                 	db	46
   229  00FF21  E5                 	db	229
   230  00FF22  3C                 	db	60
   231  00FF23  1E                 	db	30
   232  00FF24  42                 	db	66
   233  00FF25  A2                 	db	162
   234  00FF26  0D                 	db	13
   235  00FF27                     __end_of__npowers_:
   236                           	callstack 0
   237  00FF27                     _dpowers:
   238                           	callstack 0
   239  00FF27  0001               	dw	1
   240  00FF29  0000               	dw	0
   241  00FF2B  000A               	dw	10
   242  00FF2D  0000               	dw	0
   243  00FF2F  0064               	dw	100
   244  00FF31  0000               	dw	0
   245  00FF33  03E8               	dw	1000
   246  00FF35  0000               	dw	0
   247  00FF37  2710               	dw	10000
   248  00FF39  0000               	dw	0
   249  00FF3B  86A0               	dw	34464
   250  00FF3D  0001               	dw	1
   251  00FF3F  4240               	dw	16960
   252  00FF41  000F               	dw	15
   253  00FF43  9680               	dw	38528
   254  00FF45  0098               	dw	152
   255  00FF47  E100               	dw	57600
   256  00FF49  05F5               	dw	1525
   257  00FF4B  CA00               	dw	51712
   258  00FF4D  3B9A               	dw	15258
   259  00FF4F                     __end_of_dpowers:
   260                           	callstack 0
   261  0000                     _PORTBbits	set	3969
   262  0000                     _IPR2	set	4002
   263  0000                     _PIR2	set	4001
   264  0000                     _PIE2	set	4000
   265  0000                     _IPR1	set	3999
   266  0000                     _PIR1	set	3998
   267  0000                     _PIE1	set	3997
   268  0000                     _T0CON	set	4053
   269  0000                     _INTCON2bits	set	4081
   270  0000                     _INTCON3	set	4080
   271  0000                     _INTCON2	set	4081
   272  0000                     _INTCON	set	4082
   273  0000                     _T0CONbits	set	4053
   274  0000                     _RCONbits	set	4048
   275  0000                     _TRISCbits	set	3988
   276  0000                     _TRISE	set	3990
   277  0000                     _TRISD	set	3989
   278  0000                     _TRISA	set	3986
   279  0000                     _PORTC	set	3970
   280  0000                     _TRISC	set	3988
   281  0000                     _TRISB	set	3987
   282  0000                     _ADCON1	set	4033
   283  0000                     _PORTCbits	set	3970
   284  0000                     _INTCON3bits	set	4080
   285  0000                     _INTCONbits	set	4082
   286  0000                     _TMR3L	set	4018
   287  0000                     _TMR3H	set	4019
   288  0000                     _ADRESL	set	4035
   289  0000                     _ADRESH	set	4036
   290  0000                     _ADCON2	set	4032
   291  0000                     _ADCON0bits	set	4034
   292  0000                     _ADCON0	set	4034
   293  0000                     _PORTEbits	set	3972
   294  00FF4F                     STR_14:
   295                           
   296                           ; BSR set to: 1
   297  00FF4F  54                 	db	84	;'T'
   298  00FF50  69                 	db	105	;'i'
   299  00FF51  6D                 	db	109	;'m'
   300  00FF52  65                 	db	101	;'e'
   301  00FF53  20                 	db	32
   302  00FF54  3A                 	db	58	;':'
   303  00FF55  20                 	db	32
   304  00FF56  25                 	db	37
   305  00FF57  30                 	db	48	;'0'
   306  00FF58  32                 	db	50	;'2'
   307  00FF59  64                 	db	100	;'d'
   308  00FF5A  3A                 	db	58	;':'
   309  00FF5B  25                 	db	37
   310  00FF5C  30                 	db	48	;'0'
   311  00FF5D  32                 	db	50	;'2'
   312  00FF5E  64                 	db	100	;'d'
   313  00FF5F  3A                 	db	58	;':'
   314  00FF60  25                 	db	37
   315  00FF61  30                 	db	48	;'0'
   316  00FF62  32                 	db	50	;'2'
   317  00FF63  64                 	db	100	;'d'
   318  00FF64  00                 	db	0
   319  00FF65                     STR_10:
   320                           
   321                           ; BSR set to: 1
   322  00FF65  20                 	db	32
   323  00FF66  20                 	db	32
   324  00FF67  31                 	db	49	;'1'
   325  00FF68  30                 	db	48	;'0'
   326  00FF69  20                 	db	32
   327  00FF6A  53                 	db	83	;'S'
   328  00FF6B  45                 	db	69	;'E'
   329  00FF6C  43                 	db	67	;'C'
   330  00FF6D  20                 	db	32
   331  00FF6E  20                 	db	32
   332  00FF6F  20                 	db	32
   333  00FF70  20                 	db	32
   334  00FF71  20                 	db	32
   335  00FF72  20                 	db	32
   336  00FF73  20                 	db	32
   337  00FF74  20                 	db	32
   338  00FF75  20                 	db	32
   339  00FF76  20                 	db	32
   340  00FF77  00                 	db	0
   341  00FF78                     STR_9:
   342                           
   343                           ; BSR set to: 1
   344  00FF78  20                 	db	32
   345  00FF79  20                 	db	32
   346  00FF7A  53                 	db	83	;'S'
   347  00FF7B  45                 	db	69	;'E'
   348  00FF7C  43                 	db	67	;'C'
   349  00FF7D  20                 	db	32
   350  00FF7E  20                 	db	32
   351  00FF7F  20                 	db	32
   352  00FF80  20                 	db	32
   353  00FF81  20                 	db	32
   354  00FF82  20                 	db	32
   355  00FF83  20                 	db	32
   356  00FF84  20                 	db	32
   357  00FF85  20                 	db	32
   358  00FF86  20                 	db	32
   359  00FF87  20                 	db	32
   360  00FF88  00                 	db	0
   361  00FF89                     STR_11:
   362                           
   363                           ; BSR set to: 1
   364  00FF89  20                 	db	32
   365  00FF8A  20                 	db	32
   366  00FF8B  4D                 	db	77	;'M'
   367  00FF8C  49                 	db	73	;'I'
   368  00FF8D  4E                 	db	78	;'N'
   369  00FF8E  20                 	db	32
   370  00FF8F  20                 	db	32
   371  00FF90  20                 	db	32
   372  00FF91  20                 	db	32
   373  00FF92  20                 	db	32
   374  00FF93  20                 	db	32
   375  00FF94  20                 	db	32
   376  00FF95  20                 	db	32
   377  00FF96  20                 	db	32
   378  00FF97  20                 	db	32
   379  00FF98  00                 	db	0
   380  00FF99                     STR_12:
   381                           
   382                           ; BSR set to: 1
   383  00FF99  20                 	db	32
   384  00FF9A  20                 	db	32
   385  00FF9B  31                 	db	49	;'1'
   386  00FF9C  30                 	db	48	;'0'
   387  00FF9D  20                 	db	32
   388  00FF9E  4D                 	db	77	;'M'
   389  00FF9F  49                 	db	73	;'I'
   390  00FFA0  4E                 	db	78	;'N'
   391  00FFA1  20                 	db	32
   392  00FFA2  20                 	db	32
   393  00FFA3  20                 	db	32
   394  00FFA4  20                 	db	32
   395  00FFA5  20                 	db	32
   396  00FFA6  20                 	db	32
   397  00FFA7  00                 	db	0
   398  00FFA8                     STR_15:
   399                           
   400                           ; BSR set to: 1
   401  00FFA8  54                 	db	84	;'T'
   402  00FFA9  4D                 	db	77	;'M'
   403  00FFAA  50                 	db	80	;'P'
   404  00FFAB  3A                 	db	58	;':'
   405  00FFAC  25                 	db	37
   406  00FFAD  33                 	db	51	;'3'
   407  00FFAE  2E                 	db	46
   408  00FFAF  31                 	db	49	;'1'
   409  00FFB0  66                 	db	102	;'f'
   410  00FFB1  43                 	db	67	;'C'
   411  00FFB2  20                 	db	32
   412  00FFB3  20                 	db	32
   413  00FFB4  20                 	db	32
   414  00FFB5  00                 	db	0
   415  00FFB6                     STR_13:
   416                           
   417                           ; BSR set to: 1
   418  00FFB6  20                 	db	32
   419  00FFB7  20                 	db	32
   420  00FFB8  48                 	db	72	;'H'
   421  00FFB9  4F                 	db	79	;'O'
   422  00FFBA  55                 	db	85	;'U'
   423  00FFBB  52                 	db	82	;'R'
   424  00FFBC  20                 	db	32
   425  00FFBD  20                 	db	32
   426  00FFBE  20                 	db	32
   427  00FFBF  20                 	db	32
   428  00FFC0  20                 	db	32
   429  00FFC1  00                 	db	0
   430  00FFC2                     STR_16:
   431                           
   432                           ; BSR set to: 1
   433  00FFC2  53                 	db	83	;'S'
   434  00FFC3  50                 	db	80	;'P'
   435  00FFC4  20                 	db	32
   436  00FFC5  3A                 	db	58	;':'
   437  00FFC6  25                 	db	37
   438  00FFC7  33                 	db	51	;'3'
   439  00FFC8  2E                 	db	46
   440  00FFC9  31                 	db	49	;'1'
   441  00FFCA  66                 	db	102	;'f'
   442  00FFCB  43                 	db	67	;'C'
   443  00FFCC  00                 	db	0
   444  00FFCD                     STR_17:
   445                           
   446                           ; BSR set to: 1
   447  00FFCD  4D                 	db	77	;'M'
   448  00FFCE  44                 	db	68	;'D'
   449  00FFCF  20                 	db	32
   450  00FFD0  3A                 	db	58	;':'
   451  00FFD1  20                 	db	32
   452  00FFD2  20                 	db	32
   453  00FFD3  20                 	db	32
   454  00FFD4  20                 	db	32
   455  00FFD5  20                 	db	32
   456  00FFD6  00                 	db	0
   457  00FFD7                     STR_18:
   458                           
   459                           ; BSR set to: 1
   460  00FFD7  28                 	db	40
   461  00FFD8  6E                 	db	110	;'n'
   462  00FFD9  75                 	db	117	;'u'
   463  00FFDA  6C                 	db	108	;'l'
   464  00FFDB  6C                 	db	108	;'l'
   465  00FFDC  29                 	db	41
   466  00FFDD  00                 	db	0
   467  00FFDE                     STR_4:
   468                           
   469                           ; BSR set to: 1
   470  00FFDE  4F                 	db	79	;'O'
   471  00FFDF  46                 	db	70	;'F'
   472  00FFE0  46                 	db	70	;'F'
   473  00FFE1  20                 	db	32
   474  00FFE2  20                 	db	32
   475  00FFE3  20                 	db	32
   476  00FFE4  00                 	db	0
   477  00FFE5                     STR_5:
   478                           
   479                           ; BSR set to: 1
   480  00FFE5  20                 	db	32
   481  00FFE6  43                 	db	67	;'C'
   482  00FFE7  4B                 	db	75	;'K'
   483  00FFE8  3A                 	db	58	;':'
   484  00FFE9  25                 	db	37
   485  00FFEA  73                 	db	115	;'s'
   486  00FFEB  00                 	db	0
   487  00FFEC                     STR_1:
   488                           
   489                           ; BSR set to: 1
   490  00FFEC  20                 	db	32
   491  00FFED  48                 	db	72	;'H'
   492  00FFEE  54                 	db	84	;'T'
   493  00FFEF  3A                 	db	58	;':'
   494  00FFF0  25                 	db	37
   495  00FFF1  73                 	db	115	;'s'
   496  00FFF2  00                 	db	0
   497  00FFF3                     STR_2:
   498                           
   499                           ; BSR set to: 1
   500  00FFF3  4F                 	db	79	;'O'
   501  00FFF4  4E                 	db	78	;'N'
   502  00FFF5  20                 	db	32
   503  00FFF6  20                 	db	32
   504  00FFF7  20                 	db	32
   505  00FFF8  00                 	db	0
   506  00FFF9                     STR_8:
   507                           
   508                           ; BSR set to: 1
   509  00FFF9  4F                 	db	79	;'O'
   510  00FFFA  46                 	db	70	;'F'
   511  00FFFB  46                 	db	70	;'F'
   512  00FFFC  20                 	db	32
   513  00FFFD  20                 	db	32
   514  00FFFE  00                 	db	0
   515  00FFFF  00                 	db	0	; dummy byte at the end
   516  0000                     
   517                           ; #config settings
   518                           
   519                           	psect	cinit
   520  002262                     __pcinit:
   521                           	callstack 0
   522  002262                     start_initialization:
   523                           	callstack 0
   524  002262                     __initialization:
   525                           	callstack 0
   526                           
   527                           ; Initialize objects allocated to BANK0 (6 bytes)
   528                           ; load TBLPTR registers with __pidataBANK0
   529  002262  0E03               	movlw	low __pidataBANK0
   530  002264  6EF6               	movwf	tblptrl,c
   531  002266  0E2B               	movlw	high __pidataBANK0
   532  002268  6EF7               	movwf	tblptrh,c
   533  00226A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   534  00226C  6EF8               	movwf	tblptru,c
   535  00226E  EE00  F0F5         	lfsr	0,__pdataBANK0
   536  002272  EE10 F006          	lfsr	1,6
   537  002276                     copy_data0:
   538  002276  0009               	tblrd		*+
   539  002278  CFF5 FFEE          	movff	tablat,postinc0
   540  00227C  50E5               	movf	postdec1,w,c
   541  00227E  50E1               	movf	fsr1l,w,c
   542  002280  E1FA               	bnz	copy_data0
   543                           
   544                           ; Initialize objects allocated to COMRAM (9 bytes)
   545                           ; load TBLPTR registers with __pidataCOMRAM
   546  002282  0EFA               	movlw	low __pidataCOMRAM
   547  002284  6EF6               	movwf	tblptrl,c
   548  002286  0E2A               	movlw	high __pidataCOMRAM
   549  002288  6EF7               	movwf	tblptrh,c
   550  00228A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   551  00228C  6EF8               	movwf	tblptru,c
   552  00228E  EE00  F053         	lfsr	0,__pdataCOMRAM
   553  002292  EE10 F009          	lfsr	1,9
   554  002296                     copy_data1:
   555  002296  0009               	tblrd		*+
   556  002298  CFF5 FFEE          	movff	tablat,postinc0
   557  00229C  50E5               	movf	postdec1,w,c
   558  00229E  50E1               	movf	fsr1l,w,c
   559  0022A0  E1FA               	bnz	copy_data1
   560                           
   561                           ; Clear objects allocated to BANK1 (2 bytes)
   562  0022A2  0101               	movlb	1
   563  0022A4  6BE1               	clrf	(__pbssBANK1+1)& (0+255),b
   564  0022A6  6BE0               	clrf	__pbssBANK1& (0+255),b
   565                           
   566                           ; Clear objects allocated to BANK0 (32 bytes)
   567  0022A8  EE00  F0D5         	lfsr	0,__pbssBANK0
   568  0022AC  0E20               	movlw	32
   569  0022AE                     clear_0:
   570  0022AE  6AEE               	clrf	postinc0,c
   571  0022B0  06E8               	decf	wreg,f,c
   572  0022B2  E1FD               	bnz	clear_0
   573                           
   574                           ; Clear objects allocated to COMRAM (26 bytes)
   575  0022B4  EE00  F039         	lfsr	0,__pbssCOMRAM
   576  0022B8  0E1A               	movlw	26
   577  0022BA                     clear_1:
   578  0022BA  6AEE               	clrf	postinc0,c
   579  0022BC  06E8               	decf	wreg,f,c
   580  0022BE  E1FD               	bnz	clear_1
   581  0022C0                     end_of_initialization:
   582                           	callstack 0
   583  0022C0                     __end_of__initialization:
   584                           	callstack 0
   585  0022C0  905C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   586  0022C2  925C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   587  0022C4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   588  0022C6  6EF8               	movwf	tblptru,c
   589  0022C8  0100               	movlb	0
   590  0022CA  EF67  F007         	goto	_main	;jump to C main() function
   591                           
   592                           	psect	bssCOMRAM
   593  000039                     __pbssCOMRAM:
   594                           	callstack 0
   595  000039                     _spf:
   596                           	callstack 0
   597  000039                     	ds	3
   598  00003C                     _tempf:
   599                           	callstack 0
   600  00003C                     	ds	3
   601  00003F                     _sp:
   602                           	callstack 0
   603  00003F                     	ds	3
   604  000042                     _temp:
   605                           	callstack 0
   606  000042                     	ds	3
   607  000045                     _initial:
   608                           	callstack 0
   609  000045                     	ds	2
   610  000047                     _stpMode:
   611                           	callstack 0
   612  000047                     	ds	2
   613  000049                     _minutes:
   614                           	callstack 0
   615  000049                     	ds	2
   616  00004B                     _flageBuzz:
   617                           	callstack 0
   618  00004B                     	ds	2
   619  00004D                     _ft:
   620                           	callstack 0
   621  00004D                     	ds	2
   622  00004F                     _RPS:
   623                           	callstack 0
   624  00004F                     	ds	2
   625  000051                     _RPS_count:
   626                           	callstack 0
   627  000051                     	ds	2
   628                           
   629                           	psect	dataCOMRAM
   630  000053                     __pdataCOMRAM:
   631                           	callstack 0
   632  000053                     _HS:
   633                           	callstack 0
   634  000053                     	ds	3
   635  000056                     _clkMode:
   636                           	callstack 0
   637  000056                     	ds	2
   638  000058                     _hours:
   639                           	callstack 0
   640  000058                     	ds	2
   641  00005A                     _seconds:
   642                           	callstack 0
   643  00005A                     	ds	2
   644                           
   645                           	psect	bssBANK0
   646  0000D5                     __pbssBANK0:
   647                           	callstack 0
   648  0000D5                     _Buffer:
   649                           	callstack 0
   650  0000D5                     	ds	32
   651                           
   652                           	psect	dataBANK0
   653  0000F5                     __pdataBANK0:
   654                           	callstack 0
   655  0000F5                     _LCD_INIT_STRING:
   656                           	callstack 0
   657  0000F5                     	ds	4
   658  0000F9                     _count:
   659                           	callstack 0
   660  0000F9                     	ds	2
   661                           
   662                           	psect	bssBANK1
   663  0001E0                     __pbssBANK1:
   664                           	callstack 0
   665  0001E0                     _mode:
   666                           	callstack 0
   667  0001E0                     	ds	2
   668                           
   669                           	psect	cstackBANK1
   670  000100                     __pcstackBANK1:
   671                           	callstack 0
   672  000100                     display@LCD:
   673                           	callstack 0
   674                           
   675                           ; 64 bytes @ 0x0
   676  000100                     	ds	64
   677  000140                     display@LCDP:
   678                           	callstack 0
   679                           
   680                           ; 64 bytes @ 0x40
   681  000140                     	ds	64
   682  000180                     display@Buffer:
   683                           	callstack 0
   684                           
   685                           ; 32 bytes @ 0x80
   686  000180                     	ds	32
   687  0001A0                     display@Buffer1:
   688                           	callstack 0
   689                           
   690                           ; 32 bytes @ 0xA0
   691  0001A0                     	ds	32
   692  0001C0                     display@Buffer2:
   693                           	callstack 0
   694                           
   695                           ; 32 bytes @ 0xC0
   696  0001C0                     	ds	32
   697                           
   698                           	psect	cstackBANK0
   699  000080                     __pcstackBANK0:
   700                           	callstack 0
   701  000080                     ??___ftmul:
   702  000080                     ___ftdiv@cntr:
   703                           	callstack 0
   704  000080                     ___llmod@counter:
   705                           	callstack 0
   706                           
   707                           ; 1 bytes @ 0x0
   708  000080                     	ds	1
   709  000081                     ___ftdiv@f3:
   710                           	callstack 0
   711                           
   712                           ; 3 bytes @ 0x1
   713  000081                     	ds	2
   714  000083                     ___ftmul@exp:
   715                           	callstack 0
   716                           
   717                           ; 1 bytes @ 0x3
   718  000083                     	ds	1
   719  000084                     ___ftdiv@exp:
   720                           	callstack 0
   721  000084                     ___ftmul@f3_as_product:
   722                           	callstack 0
   723                           
   724                           ; 3 bytes @ 0x4
   725  000084                     	ds	1
   726  000085                     ___ftdiv@sign:
   727                           	callstack 0
   728                           
   729                           ; 1 bytes @ 0x5
   730  000085                     	ds	1
   731  000086                     ?_read_adc_voltage:
   732                           	callstack 0
   733                           
   734                           ; 3 bytes @ 0x6
   735  000086                     	ds	1
   736  000087                     ___ftmul@cntr:
   737                           	callstack 0
   738                           
   739                           ; 1 bytes @ 0x7
   740  000087                     	ds	1
   741  000088                     ___ftmul@sign:
   742                           	callstack 0
   743                           
   744                           ; 1 bytes @ 0x8
   745  000088                     	ds	1
   746  000089                     ?_fround:
   747                           	callstack 0
   748  000089                     ?_scale:
   749                           	callstack 0
   750  000089                     read_adc_voltage@voltage:
   751                           	callstack 0
   752                           
   753                           ; 3 bytes @ 0x9
   754  000089                     	ds	3
   755  00008C                     read_adc_voltage@channel:
   756                           	callstack 0
   757  00008C                     _fround$1843:
   758                           	callstack 0
   759  00008C                     _scale$1844:
   760                           	callstack 0
   761                           
   762                           ; 3 bytes @ 0xC
   763  00008C                     	ds	1
   764  00008D                     read_adc_voltage@raw_value:
   765                           	callstack 0
   766                           
   767                           ; 2 bytes @ 0xD
   768  00008D                     	ds	2
   769  00008F                     scale@scl:
   770                           	callstack 0
   771  00008F                     _fround$1842:
   772                           	callstack 0
   773                           
   774                           ; 3 bytes @ 0xF
   775  00008F                     	ds	1
   776  000090                     ?___fttol:
   777                           	callstack 0
   778  000090                     ___fttol@f1:
   779                           	callstack 0
   780                           
   781                           ; 3 bytes @ 0x10
   782  000090                     	ds	2
   783  000092                     fround@prec:
   784                           	callstack 0
   785                           
   786                           ; 1 bytes @ 0x12
   787  000092                     	ds	1
   788  000093                     ?___ftadd:
   789                           	callstack 0
   790  000093                     ___ftadd@f1:
   791                           	callstack 0
   792                           
   793                           ; 3 bytes @ 0x13
   794  000093                     	ds	1
   795  000094                     ??___fttol:
   796                           
   797                           ; 1 bytes @ 0x14
   798  000094                     	ds	2
   799  000096                     ___ftadd@f2:
   800                           	callstack 0
   801                           
   802                           ; 3 bytes @ 0x16
   803  000096                     	ds	3
   804  000099                     ??___ftadd:
   805  000099                     ___fttol@sign1:
   806                           	callstack 0
   807                           
   808                           ; 1 bytes @ 0x19
   809  000099                     	ds	1
   810  00009A                     ___fttol@lval:
   811                           	callstack 0
   812                           
   813                           ; 4 bytes @ 0x1A
   814  00009A                     	ds	2
   815  00009C                     ___ftadd@sign:
   816                           	callstack 0
   817                           
   818                           ; 1 bytes @ 0x1C
   819  00009C                     	ds	1
   820  00009D                     ___ftadd@exp2:
   821                           	callstack 0
   822                           
   823                           ; 1 bytes @ 0x1D
   824  00009D                     	ds	1
   825  00009E                     ___ftadd@exp1:
   826                           	callstack 0
   827  00009E                     ___fttol@exp1:
   828                           	callstack 0
   829                           
   830                           ; 1 bytes @ 0x1E
   831  00009E                     	ds	1
   832  00009F                     ?___ftsub:
   833                           	callstack 0
   834  00009F                     ___ftsub@f1:
   835                           	callstack 0
   836                           
   837                           ; 3 bytes @ 0x1F
   838  00009F                     	ds	3
   839  0000A2                     ___ftsub@f2:
   840                           	callstack 0
   841                           
   842                           ; 3 bytes @ 0x22
   843  0000A2                     	ds	3
   844  0000A5                     ?_sprintf:
   845                           	callstack 0
   846  0000A5                     sprintf@sp:
   847                           	callstack 0
   848                           
   849                           ; 2 bytes @ 0x25
   850  0000A5                     	ds	2
   851  0000A7                     sprintf@f:
   852                           	callstack 0
   853                           
   854                           ; 2 bytes @ 0x27
   855  0000A7                     	ds	8
   856  0000AF                     ??_sprintf:
   857                           
   858                           ; 1 bytes @ 0x2F
   859  0000AF                     	ds	6
   860  0000B5                     _sprintf$1845:
   861                           	callstack 0
   862                           
   863                           ; 3 bytes @ 0x35
   864  0000B5                     	ds	3
   865  0000B8                     sprintf@cp:
   866                           	callstack 0
   867                           
   868                           ; 2 bytes @ 0x38
   869  0000B8                     	ds	2
   870  0000BA                     sprintf@ap:
   871                           	callstack 0
   872                           
   873                           ; 1 bytes @ 0x3A
   874  0000BA                     	ds	1
   875  0000BB                     sprintf@len:
   876                           	callstack 0
   877                           
   878                           ; 2 bytes @ 0x3B
   879  0000BB                     	ds	2
   880  0000BD                     sprintf@tmpval:
   881                           	callstack 0
   882                           
   883                           ; 4 bytes @ 0x3D
   884  0000BD                     	ds	4
   885  0000C1                     sprintf@val:
   886                           	callstack 0
   887                           
   888                           ; 4 bytes @ 0x41
   889  0000C1                     	ds	4
   890  0000C5                     sprintf@eexp:
   891                           	callstack 0
   892                           
   893                           ; 2 bytes @ 0x45
   894  0000C5                     	ds	2
   895  0000C7                     sprintf@flag:
   896                           	callstack 0
   897                           
   898                           ; 2 bytes @ 0x47
   899  0000C7                     	ds	2
   900  0000C9                     sprintf@fval:
   901                           	callstack 0
   902                           
   903                           ; 3 bytes @ 0x49
   904  0000C9                     	ds	3
   905  0000CC                     sprintf@width:
   906                           	callstack 0
   907                           
   908                           ; 2 bytes @ 0x4C
   909  0000CC                     	ds	2
   910  0000CE                     sprintf@prec:
   911                           	callstack 0
   912                           
   913                           ; 2 bytes @ 0x4E
   914  0000CE                     	ds	2
   915  0000D0                     sprintf@c:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x50
   919  0000D0                     	ds	1
   920  0000D1                     ??_display:
   921                           
   922                           ; 1 bytes @ 0x51
   923  0000D1                     	ds	2
   924  0000D3                     main@count:
   925                           	callstack 0
   926                           
   927                           ; 2 bytes @ 0x53
   928  0000D3                     	ds	2
   929                           
   930                           	psect	cstackCOMRAM
   931  000001                     __pcstackCOMRAM:
   932                           	callstack 0
   933  000001                     ?i2___ftpack:
   934                           	callstack 0
   935  000001                     i2___ftpack@arg:
   936                           	callstack 0
   937                           
   938                           ; 3 bytes @ 0x0
   939  000001                     	ds	3
   940  000004                     i2___ftpack@exp:
   941                           	callstack 0
   942                           
   943                           ; 1 bytes @ 0x3
   944  000004                     	ds	1
   945  000005                     i2___ftpack@sign:
   946                           	callstack 0
   947                           
   948                           ; 1 bytes @ 0x4
   949  000005                     	ds	1
   950  000006                     ??i2___ftpack:
   951                           
   952                           ; 1 bytes @ 0x5
   953  000006                     	ds	3
   954  000009                     ?i2___ftadd:
   955                           	callstack 0
   956  000009                     i2___ftadd@f1:
   957                           	callstack 0
   958                           
   959                           ; 3 bytes @ 0x8
   960  000009                     	ds	3
   961  00000C                     i2___ftadd@f2:
   962                           	callstack 0
   963                           
   964                           ; 3 bytes @ 0xB
   965  00000C                     	ds	3
   966  00000F                     ??i2___ftadd:
   967                           
   968                           ; 1 bytes @ 0xE
   969  00000F                     	ds	3
   970  000012                     i2___ftadd@sign:
   971                           	callstack 0
   972                           
   973                           ; 1 bytes @ 0x11
   974  000012                     	ds	1
   975  000013                     i2___ftadd@exp2:
   976                           	callstack 0
   977                           
   978                           ; 1 bytes @ 0x12
   979  000013                     	ds	1
   980  000014                     i2___ftadd@exp1:
   981                           	callstack 0
   982                           
   983                           ; 1 bytes @ 0x13
   984  000014                     	ds	1
   985  000015                     ?i2___ftsub:
   986                           	callstack 0
   987  000015                     i2___ftsub@f1:
   988                           	callstack 0
   989                           
   990                           ; 3 bytes @ 0x14
   991  000015                     	ds	3
   992  000018                     i2___ftsub@f2:
   993                           	callstack 0
   994                           
   995                           ; 3 bytes @ 0x17
   996  000018                     	ds	3
   997  00001B                     i2___ftge@ff1:
   998                           	callstack 0
   999                           
  1000                           ; 3 bytes @ 0x1A
  1001  00001B                     	ds	3
  1002  00001E                     i2___ftge@ff2:
  1003                           	callstack 0
  1004                           
  1005                           ; 3 bytes @ 0x1D
  1006  00001E                     	ds	3
  1007  000021                     ??i2___ftge:
  1008                           
  1009                           ; 1 bytes @ 0x20
  1010  000021                     	ds	3
  1011  000024                     ??_isdigit:
  1012  000024                     ??_delay_cycles:
  1013  000024                     ?_read_adc_raw_no_lib:
  1014                           	callstack 0
  1015  000024                     ?___wmul:
  1016                           	callstack 0
  1017  000024                     ?___awmod:
  1018                           	callstack 0
  1019  000024                     ?___ftpack:
  1020                           	callstack 0
  1021  000024                     ?___ftneg:
  1022                           	callstack 0
  1023  000024                     ?__tdiv_to_l_:
  1024                           	callstack 0
  1025  000024                     ?__div_to_l_:
  1026                           	callstack 0
  1027  000024                     ?___lldiv:
  1028                           	callstack 0
  1029  000024                     ___lbmod@divisor:
  1030                           	callstack 0
  1031  000024                     delay_ms@n:
  1032                           	callstack 0
  1033  000024                     ___wmul@multiplier:
  1034                           	callstack 0
  1035  000024                     ___awmod@dividend:
  1036                           	callstack 0
  1037  000024                     __div_to_l_@f1:
  1038                           	callstack 0
  1039  000024                     ___ftpack@arg:
  1040                           	callstack 0
  1041  000024                     __tdiv_to_l_@f1:
  1042                           	callstack 0
  1043  000024                     ___ftge@ff1:
  1044                           	callstack 0
  1045  000024                     ___ftneg@f1:
  1046                           	callstack 0
  1047  000024                     ___lldiv@dividend:
  1048                           	callstack 0
  1049                           
  1050                           ; 4 bytes @ 0x23
  1051  000024                     	ds	1
  1052  000025                     ___lbmod@dividend:
  1053                           	callstack 0
  1054  000025                     _isdigit$1593:
  1055                           	callstack 0
  1056                           
  1057                           ; 1 bytes @ 0x24
  1058  000025                     	ds	1
  1059  000026                     ??_read_adc_raw_no_lib:
  1060  000026                     ___lbmod@counter:
  1061                           	callstack 0
  1062  000026                     isdigit@c:
  1063                           	callstack 0
  1064  000026                     delay_ms@i:
  1065                           	callstack 0
  1066  000026                     ___wmul@multiplicand:
  1067                           	callstack 0
  1068  000026                     ___awmod@divisor:
  1069                           	callstack 0
  1070                           
  1071                           ; 2 bytes @ 0x25
  1072  000026                     	ds	1
  1073  000027                     delay_cycles@n:
  1074                           	callstack 0
  1075  000027                     ___ftpack@exp:
  1076                           	callstack 0
  1077  000027                     ___lbmod@rem:
  1078                           	callstack 0
  1079  000027                     __div_to_l_@f2:
  1080                           	callstack 0
  1081  000027                     __tdiv_to_l_@f2:
  1082                           	callstack 0
  1083  000027                     ___ftge@ff2:
  1084                           	callstack 0
  1085                           
  1086                           ; 3 bytes @ 0x26
  1087  000027                     	ds	1
  1088  000028                     read_adc_raw_no_lib@channel:
  1089                           	callstack 0
  1090  000028                     ___awmod@counter:
  1091                           	callstack 0
  1092  000028                     ___ftpack@sign:
  1093                           	callstack 0
  1094  000028                     ___lbdiv@divisor:
  1095                           	callstack 0
  1096  000028                     delay_cycles@x:
  1097                           	callstack 0
  1098  000028                     ___wmul@product:
  1099                           	callstack 0
  1100  000028                     ___lldiv@divisor:
  1101                           	callstack 0
  1102                           
  1103                           ; 4 bytes @ 0x27
  1104  000028                     	ds	1
  1105  000029                     ??___ftpack:
  1106  000029                     ___awmod@sign:
  1107                           	callstack 0
  1108  000029                     ___lbdiv@dividend:
  1109                           	callstack 0
  1110  000029                     read_adc_raw_no_lib@raw_value:
  1111                           	callstack 0
  1112                           
  1113                           ; 2 bytes @ 0x28
  1114  000029                     	ds	1
  1115  00002A                     ??__tdiv_to_l_:
  1116  00002A                     ??_lcd_send_nibble:
  1117  00002A                     ??___ftge:
  1118  00002A                     ?___awdiv:
  1119                           	callstack 0
  1120  00002A                     ___lbdiv@counter:
  1121                           	callstack 0
  1122  00002A                     ___awdiv@dividend:
  1123                           	callstack 0
  1124  00002A                     __div_to_l_@quot:
  1125                           	callstack 0
  1126                           
  1127                           ; 4 bytes @ 0x29
  1128  00002A                     	ds	1
  1129  00002B                     lcd_send_nibble@n:
  1130                           	callstack 0
  1131  00002B                     ___lbdiv@quotient:
  1132                           	callstack 0
  1133                           
  1134                           ; 1 bytes @ 0x2A
  1135  00002B                     	ds	1
  1136  00002C                     ?___awtoft:
  1137                           	callstack 0
  1138  00002C                     ?___lltoft:
  1139                           	callstack 0
  1140  00002C                     lcd_send_byte@n:
  1141                           	callstack 0
  1142  00002C                     ___awdiv@divisor:
  1143                           	callstack 0
  1144  00002C                     ___awtoft@c:
  1145                           	callstack 0
  1146  00002C                     ___lldiv@quotient:
  1147                           	callstack 0
  1148  00002C                     ___lltoft@c:
  1149                           	callstack 0
  1150                           
  1151                           ; 4 bytes @ 0x2B
  1152  00002C                     	ds	1
  1153  00002D                     lcd_send_byte@cm_data:
  1154                           	callstack 0
  1155  00002D                     __tdiv_to_l_@quot:
  1156                           	callstack 0
  1157                           
  1158                           ; 4 bytes @ 0x2C
  1159  00002D                     	ds	1
  1160  00002E                     lcd_init@i:
  1161                           	callstack 0
  1162  00002E                     lcd_gotoxy@y:
  1163                           	callstack 0
  1164  00002E                     ___awdiv@counter:
  1165                           	callstack 0
  1166  00002E                     __div_to_l_@cntr:
  1167                           	callstack 0
  1168                           
  1169                           ; 1 bytes @ 0x2D
  1170  00002E                     	ds	1
  1171  00002F                     lcd_gotoxy@x:
  1172                           	callstack 0
  1173  00002F                     ___awdiv@sign:
  1174                           	callstack 0
  1175  00002F                     ___awtoft@sign:
  1176                           	callstack 0
  1177  00002F                     __div_to_l_@exp1:
  1178                           	callstack 0
  1179                           
  1180                           ; 1 bytes @ 0x2E
  1181  00002F                     	ds	1
  1182  000030                     ??___lltoft:
  1183  000030                     ?___ftdiv:
  1184                           	callstack 0
  1185  000030                     lcd_gotoxy@address:
  1186                           	callstack 0
  1187  000030                     ___lldiv@counter:
  1188                           	callstack 0
  1189  000030                     ___awdiv@quotient:
  1190                           	callstack 0
  1191  000030                     ___ftdiv@f1:
  1192                           	callstack 0
  1193                           
  1194                           ; 3 bytes @ 0x2F
  1195  000030                     	ds	1
  1196  000031                     ?___llmod:
  1197                           	callstack 0
  1198  000031                     lcd_putc@c:
  1199                           	callstack 0
  1200  000031                     __tdiv_to_l_@cntr:
  1201                           	callstack 0
  1202  000031                     ___llmod@dividend:
  1203                           	callstack 0
  1204                           
  1205                           ; 4 bytes @ 0x30
  1206  000031                     	ds	1
  1207  000032                     ?___ftmul:
  1208                           	callstack 0
  1209  000032                     __tdiv_to_l_@exp1:
  1210                           	callstack 0
  1211  000032                     lcd_puts@s:
  1212                           	callstack 0
  1213  000032                     ___ftmul@f1:
  1214                           	callstack 0
  1215                           
  1216                           ; 3 bytes @ 0x31
  1217  000032                     	ds	1
  1218  000033                     ___ftdiv@f2:
  1219                           	callstack 0
  1220                           
  1221                           ; 3 bytes @ 0x32
  1222  000033                     	ds	1
  1223  000034                     ___lltoft@exp:
  1224                           	callstack 0
  1225                           
  1226                           ; 1 bytes @ 0x33
  1227  000034                     	ds	1
  1228  000035                     ___ftmul@f2:
  1229                           	callstack 0
  1230  000035                     ___llmod@divisor:
  1231                           	callstack 0
  1232                           
  1233                           ; 4 bytes @ 0x34
  1234  000035                     	ds	1
  1235  000036                     ??___ftdiv:
  1236                           
  1237                           ; 1 bytes @ 0x35
  1238  000036                     	ds	2
  1239  000038                     ??_fround:
  1240  000038                     
  1241                           ; 1 bytes @ 0x37
  1242  000038                     	ds	1
  1243  000039                     
  1244                           ; 1 bytes @ 0x38
  1245 ;;
  1246 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1247 ;;
  1248 ;; *************** function _main *****************
  1249 ;; Defined at:
  1250 ;;		line 467 in file "HW2.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;		None
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;  count           2   83[BANK0 ] int 
  1255 ;; Return value:  Size  Location     Type
  1256 ;;                  1    wreg      void 
  1257 ;; Registers used:
  1258 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1259 ;; Tracked objects:
  1260 ;;		On entry : 0/0
  1261 ;;		On exit  : 0/0
  1262 ;;		Unchanged: 0/0
  1263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1265 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1267 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1268 ;;Total ram usage:        2 bytes
  1269 ;; Hardware stack levels required when called:   12
  1270 ;; This function calls:
  1271 ;;		___awtoft
  1272 ;;		___ftmul
  1273 ;;		_decrement10MinClock
  1274 ;;		_decrement10SClock
  1275 ;;		_decrementClock
  1276 ;;		_decrementHourClock
  1277 ;;		_decrementMinClock
  1278 ;;		_delay_ms
  1279 ;;		_display
  1280 ;;		_increment10MinClock
  1281 ;;		_increment10SClock
  1282 ;;		_incrementClock
  1283 ;;		_incrementHourClock
  1284 ;;		_incrementMinClock
  1285 ;;		_init_adc_no_lib
  1286 ;;		_lcd_init
  1287 ;;		_lcd_send_byte
  1288 ;;		_read_adc_voltage
  1289 ;;		_setupPorts
  1290 ;; This function is called by:
  1291 ;;		Startup code after reset
  1292 ;; This function uses a non-reentrant model
  1293 ;;
  1294                           
  1295                           	psect	text0
  1296  000ECE                     __ptext0:
  1297                           	callstack 0
  1298  000ECE                     _main:
  1299                           	callstack 19
  1300                           
  1301                           ;HW2.c: 468: seconds = 1;
  1302                           
  1303                           ;incstack = 0
  1304  000ECE  0E00               	movlw	0
  1305  000ED0  6E5B               	movwf	(_seconds+1)^0,c
  1306  000ED2  0E01               	movlw	1
  1307  000ED4  6E5A               	movwf	_seconds^0,c
  1308                           
  1309                           ;HW2.c: 469: minutes = 0;
  1310  000ED6  0E00               	movlw	0
  1311  000ED8  6E4A               	movwf	(_minutes+1)^0,c
  1312  000EDA  0E00               	movlw	0
  1313  000EDC  6E49               	movwf	_minutes^0,c
  1314                           
  1315                           ;HW2.c: 470: hours = 0;
  1316  000EDE  0E00               	movlw	0
  1317  000EE0  6E59               	movwf	(_hours+1)^0,c
  1318  000EE2  0E00               	movlw	0
  1319  000EE4  6E58               	movwf	_hours^0,c
  1320                           
  1321                           ;HW2.c: 471: setupPorts();
  1322  000EE6  EC84  F014         	call	_setupPorts	;wreg free
  1323                           
  1324                           ;HW2.c: 472: int count=0;
  1325  000EEA  0E00               	movlw	0
  1326  000EEC  0100               	movlb	0	; () banked
  1327  000EEE  6FD4               	movwf	(main@count+1)& (0+255),b
  1328  000EF0  0E00               	movlw	0
  1329  000EF2  6FD3               	movwf	main@count& (0+255),b
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;HW2.c: 473: flageBuzz =0 ;
  1333  000EF4  0E00               	movlw	0
  1334  000EF6  6E4C               	movwf	(_flageBuzz+1)^0,c
  1335  000EF8  0E00               	movlw	0
  1336  000EFA  6E4B               	movwf	_flageBuzz^0,c
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;HW2.c: 474: init_adc_no_lib();
  1340  000EFC  EC6D  F015         	call	_init_adc_no_lib	;wreg free
  1341                           
  1342                           ;HW2.c: 476: INTCON = 0;
  1343  000F00  0E00               	movlw	0
  1344  000F02  6EF2               	movwf	242,c	;volatile
  1345                           
  1346                           ;HW2.c: 478: INTCON = 0;
  1347  000F04  0E00               	movlw	0
  1348  000F06  6EF2               	movwf	242,c	;volatile
  1349                           
  1350                           ; BSR set to: 0
  1351                           ;HW2.c: 479: RCONbits.IPEN =0;
  1352  000F08  9ED0               	bcf	208,7,c	;volatile
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;HW2.c: 481: INTCONbits.INT0IE = 1;
  1356  000F0A  88F2               	bsf	242,4,c	;volatile
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;HW2.c: 482: INTCONbits.TMR0IE=1;
  1360  000F0C  8AF2               	bsf	242,5,c	;volatile
  1361                           
  1362                           ;HW2.c: 485: INTCON2 = 0;
  1363  000F0E  0E00               	movlw	0
  1364  000F10  6EF1               	movwf	241,c	;volatile
  1365                           
  1366                           ;HW2.c: 487: INTCON3 = 0;
  1367  000F12  0E00               	movlw	0
  1368  000F14  6EF0               	movwf	240,c	;volatile
  1369                           
  1370                           ; BSR set to: 0
  1371                           ;HW2.c: 488: INTCON3bits.INT1IE = 1;
  1372  000F16  86F0               	bsf	240,3,c	;volatile
  1373                           
  1374                           ; BSR set to: 0
  1375                           ;HW2.c: 490: INTCON2bits.INTEDG1 = 1;
  1376  000F18  8AF1               	bsf	241,5,c	;volatile
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;HW2.c: 491: INTCON2bits.INTEDG0= 1;
  1380  000F1A  8CF1               	bsf	241,6,c	;volatile
  1381                           
  1382                           ;HW2.c: 492: T0CON=0X80;
  1383  000F1C  0E80               	movlw	128
  1384  000F1E  6ED5               	movwf	213,c	;volatile
  1385                           
  1386                           ;HW2.c: 494: PIE1 = 0;
  1387  000F20  0E00               	movlw	0
  1388  000F22  6E9D               	movwf	157,c	;volatile
  1389                           
  1390                           ;HW2.c: 495: PIR1 = 0;
  1391  000F24  0E00               	movlw	0
  1392  000F26  6E9E               	movwf	158,c	;volatile
  1393                           
  1394                           ;HW2.c: 496: IPR1 = 0;
  1395  000F28  0E00               	movlw	0
  1396  000F2A  6E9F               	movwf	159,c	;volatile
  1397                           
  1398                           ;HW2.c: 497: PIE2 = 0;
  1399  000F2C  0E00               	movlw	0
  1400  000F2E  6EA0               	movwf	160,c	;volatile
  1401                           
  1402                           ;HW2.c: 498: PIE2 = 0;
  1403  000F30  0E00               	movlw	0
  1404  000F32  6EA0               	movwf	160,c	;volatile
  1405                           
  1406                           ;HW2.c: 499: PIR2 = 0;
  1407  000F34  0E00               	movlw	0
  1408  000F36  6EA1               	movwf	161,c	;volatile
  1409                           
  1410                           ;HW2.c: 500: IPR2 = 0;
  1411  000F38  0E00               	movlw	0
  1412  000F3A  6EA2               	movwf	162,c	;volatile
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;HW2.c: 502: INTCONbits.GIEH = 1;
  1416  000F3C  8EF2               	bsf	242,7,c	;volatile
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;HW2.c: 503: INTCONbits.GIEL = 1;
  1420  000F3E  8CF2               	bsf	242,6,c	;volatile
  1421                           
  1422                           ; BSR set to: 0
  1423                           ;HW2.c: 504: PORTCbits.RC1=0;
  1424  000F40  9282               	bcf	130,1,c	;volatile
  1425                           
  1426                           ; BSR set to: 0
  1427                           ;HW2.c: 505: lcd_init();
  1428  000F42  EC2D  F013         	call	_lcd_init	;wreg free
  1429                           
  1430                           ;HW2.c: 506: lcd_send_byte(0, 1);
  1431  000F46  0E01               	movlw	1
  1432  000F48  6E2C               	movwf	lcd_send_byte@n^0,c
  1433  000F4A  0E00               	movlw	0
  1434  000F4C  EC30  F014         	call	_lcd_send_byte
  1435  000F50                     l360:
  1436  000F50  0004               	clrwdt		;# 
  1437                           
  1438                           ;HW2.c: 521: if (PORTBbits.RB1 == 0){ initial = 0 ; clkMode = 0; PORTCbits.RC5 = 1;
  1439  000F52  B281               	btfsc	129,1,c	;volatile
  1440  000F54  D011               	goto	l6248
  1441  000F56  0E00               	movlw	0
  1442  000F58  6E46               	movwf	(_initial+1)^0,c
  1443  000F5A  0E00               	movlw	0
  1444  000F5C  6E45               	movwf	_initial^0,c
  1445  000F5E  0E00               	movlw	0
  1446  000F60  6E57               	movwf	(_clkMode+1)^0,c
  1447  000F62  0E00               	movlw	0
  1448  000F64  6E56               	movwf	_clkMode^0,c
  1449  000F66  8A82               	bsf	130,5,c	;volatile
  1450                           
  1451                           ;HW2.c: 522: if (flageBuzz==1)flageBuzz= 0;
  1452  000F68  044B               	decf	_flageBuzz^0,w,c
  1453  000F6A  104C               	iorwf	(_flageBuzz+1)^0,w,c
  1454  000F6C  A4D8               	btfss	status,2,c
  1455  000F6E  D004               	goto	l6248
  1456  000F70  0E00               	movlw	0
  1457  000F72  6E4C               	movwf	(_flageBuzz+1)^0,c
  1458  000F74  0E00               	movlw	0
  1459  000F76  6E4B               	movwf	_flageBuzz^0,c
  1460  000F78                     l6248:
  1461                           
  1462                           ;HW2.c: 531: };HW2.c: 532: if (PORTBbits.RB0 == 0){
  1463  000F78  B081               	btfsc	129,0,c	;volatile
  1464  000F7A  D00C               	goto	l6256
  1465                           
  1466                           ;HW2.c: 533: mode+=1;
  1467  000F7C  0101               	movlb	1	; () banked
  1468  000F7E  4BE0               	infsnz	_mode& (0+255),f,b
  1469  000F80  2BE1               	incf	(_mode+1)& (0+255),f,b
  1470                           
  1471                           ; BSR set to: 1
  1472                           ;HW2.c: 534: if (mode==5)mode=0;
  1473  000F82  0E05               	movlw	5
  1474  000F84  19E0               	xorwf	_mode& (0+255),w,b
  1475  000F86  11E1               	iorwf	(_mode+1)& (0+255),w,b
  1476  000F88  A4D8               	btfss	status,2,c
  1477  000F8A  D004               	goto	l6256
  1478                           
  1479                           ; BSR set to: 1
  1480  000F8C  0E00               	movlw	0
  1481  000F8E  6FE1               	movwf	(_mode+1)& (0+255),b
  1482  000F90  0E00               	movlw	0
  1483  000F92  6FE0               	movwf	_mode& (0+255),b
  1484  000F94                     l6256:
  1485                           
  1486                           ;HW2.c: 536: };HW2.c: 537: if (PORTBbits.RB5 == 0){ seconds=0 ; minutes =0 ;hours =0;cou
      +                          nt=0 ;mode=0 ;PORTCbits.RC5 = 0;}
  1487  000F94  BA81               	btfsc	129,5,c	;volatile
  1488  000F96  D017               	goto	l6262
  1489  000F98  0E00               	movlw	0
  1490  000F9A  6E5B               	movwf	(_seconds+1)^0,c
  1491  000F9C  0E00               	movlw	0
  1492  000F9E  6E5A               	movwf	_seconds^0,c
  1493  000FA0  0E00               	movlw	0
  1494  000FA2  6E4A               	movwf	(_minutes+1)^0,c
  1495  000FA4  0E00               	movlw	0
  1496  000FA6  6E49               	movwf	_minutes^0,c
  1497  000FA8  0E00               	movlw	0
  1498  000FAA  6E59               	movwf	(_hours+1)^0,c
  1499  000FAC  0E00               	movlw	0
  1500  000FAE  6E58               	movwf	_hours^0,c
  1501  000FB0  0E00               	movlw	0
  1502  000FB2  0100               	movlb	0	; () banked
  1503  000FB4  6FD4               	movwf	(main@count+1)& (0+255),b
  1504  000FB6  0E00               	movlw	0
  1505  000FB8  6FD3               	movwf	main@count& (0+255),b
  1506  000FBA  0E00               	movlw	0
  1507  000FBC  0101               	movlb	1	; () banked
  1508  000FBE  6FE1               	movwf	(_mode+1)& (0+255),b
  1509  000FC0  0E00               	movlw	0
  1510  000FC2  6FE0               	movwf	_mode& (0+255),b
  1511                           
  1512                           ; BSR set to: 1
  1513  000FC4  9A82               	bcf	130,5,c	;volatile
  1514  000FC6                     l6262:
  1515                           
  1516                           ;HW2.c: 538: if (PORTBbits.RB2 == 0){ PORTCbits.RC5 = 0; flageBuzz =1 ;}
  1517  000FC6  B481               	btfsc	129,2,c	;volatile
  1518  000FC8  D005               	goto	l6268
  1519  000FCA  9A82               	bcf	130,5,c	;volatile
  1520  000FCC  0E00               	movlw	0
  1521  000FCE  6E4C               	movwf	(_flageBuzz+1)^0,c
  1522  000FD0  0E01               	movlw	1
  1523  000FD2  6E4B               	movwf	_flageBuzz^0,c
  1524  000FD4                     l6268:
  1525                           
  1526                           ;HW2.c: 540: spf = read_adc_voltage(0);
  1527  000FD4  0E00               	movlw	0
  1528  000FD6  EC67  F011         	call	_read_adc_voltage
  1529  000FDA  C086  F039         	movff	?_read_adc_voltage,_spf
  1530  000FDE  C087  F03A         	movff	?_read_adc_voltage+1,_spf+1
  1531  000FE2  C088  F03B         	movff	?_read_adc_voltage+2,_spf+2
  1532                           
  1533                           ;HW2.c: 541: sp=spf*40.0;
  1534  000FE6  C039  F032         	movff	_spf,___ftmul@f1
  1535  000FEA  C03A  F033         	movff	_spf+1,___ftmul@f1+1
  1536  000FEE  C03B  F034         	movff	_spf+2,___ftmul@f1+2
  1537  000FF2  0E00               	movlw	0
  1538  000FF4  6E35               	movwf	___ftmul@f2^0,c
  1539  000FF6  0E20               	movlw	32
  1540  000FF8  6E36               	movwf	(___ftmul@f2+1)^0,c
  1541  000FFA  0E42               	movlw	66
  1542  000FFC  6E37               	movwf	(___ftmul@f2+2)^0,c
  1543  000FFE  EC80  F00D         	call	___ftmul	;wreg free
  1544  001002  C032  F03F         	movff	?___ftmul,_sp
  1545  001006  C033  F040         	movff	?___ftmul+1,_sp+1
  1546  00100A  C034  F041         	movff	?___ftmul+2,_sp+2
  1547                           
  1548                           ;HW2.c: 544: tempf =read_adc_voltage(2);
  1549  00100E  0E02               	movlw	2
  1550  001010  EC67  F011         	call	_read_adc_voltage
  1551  001014  C086  F03C         	movff	?_read_adc_voltage,_tempf
  1552  001018  C087  F03D         	movff	?_read_adc_voltage+1,_tempf+1
  1553  00101C  C088  F03E         	movff	?_read_adc_voltage+2,_tempf+2
  1554                           
  1555                           ;HW2.c: 545: temp=tempf*200;
  1556  001020  C03C  F032         	movff	_tempf,___ftmul@f1
  1557  001024  C03D  F033         	movff	_tempf+1,___ftmul@f1+1
  1558  001028  C03E  F034         	movff	_tempf+2,___ftmul@f1+2
  1559  00102C  0E00               	movlw	0
  1560  00102E  6E35               	movwf	___ftmul@f2^0,c
  1561  001030  0E48               	movlw	72
  1562  001032  6E36               	movwf	(___ftmul@f2+1)^0,c
  1563  001034  0E43               	movlw	67
  1564  001036  6E37               	movwf	(___ftmul@f2+2)^0,c
  1565  001038  EC80  F00D         	call	___ftmul	;wreg free
  1566  00103C  C032  F042         	movff	?___ftmul,_temp
  1567  001040  C033  F043         	movff	?___ftmul+1,_temp+1
  1568  001044  C034  F044         	movff	?___ftmul+2,_temp+2
  1569                           
  1570                           ;HW2.c: 557: if (mode ==0)
  1571  001048  0101               	movlb	1	; () banked
  1572  00104A  51E0               	movf	_mode& (0+255),w,b
  1573  00104C  11E1               	iorwf	(_mode+1)& (0+255),w,b
  1574  00104E  A4D8               	btfss	status,2,c
  1575  001050  D00F               	goto	l6288
  1576                           
  1577                           ; BSR set to: 1
  1578                           ;HW2.c: 558: {;HW2.c: 564: if(PORTBbits.RB3 == 0) {incrementClock();count=4;}
  1579  001052  B681               	btfsc	129,3,c	;volatile
  1580  001054  D008               	goto	l368
  1581                           
  1582                           ; BSR set to: 1
  1583  001056  EC30  F012         	call	_incrementClock	;wreg free
  1584  00105A                     l6282:
  1585                           
  1586                           ; BSR set to: 1
  1587  00105A  0E00               	movlw	0
  1588  00105C  0100               	movlb	0	; () banked
  1589  00105E  6FD4               	movwf	(main@count+1)& (0+255),b
  1590  001060  0E04               	movlw	4
  1591  001062  6FD3               	movwf	main@count& (0+255),b
  1592  001064  D040               	goto	l6336
  1593  001066                     l368:
  1594                           
  1595                           ; BSR set to: 1
  1596                           ;HW2.c: 565: else if(PORTBbits.RB4 == 0) {decrementClock();count=4;}
  1597  001066  B881               	btfsc	129,4,c	;volatile
  1598  001068  D03E               	goto	l6336
  1599                           
  1600                           ; BSR set to: 1
  1601  00106A  ECE1  F012         	call	_decrementClock	;wreg free
  1602  00106E  D7F5               	goto	l6282
  1603  001070                     l6288:
  1604                           
  1605                           ; BSR set to: 1
  1606                           ;HW2.c: 569: else if(mode ==1)
  1607  001070  05E0               	decf	_mode& (0+255),w,b
  1608  001072  11E1               	iorwf	(_mode+1)& (0+255),w,b
  1609  001074  A4D8               	btfss	status,2,c
  1610  001076  D00A               	goto	l6300
  1611                           
  1612                           ; BSR set to: 1
  1613                           ;HW2.c: 570: {;HW2.c: 573: if(PORTBbits.RB3 == 0) {increment10SClock();count=4;}
  1614  001078  B681               	btfsc	129,3,c	;volatile
  1615  00107A  D003               	goto	l373
  1616                           
  1617                           ; BSR set to: 1
  1618  00107C  ECCF  F011         	call	_increment10SClock	;wreg free
  1619  001080  D7EC               	goto	l6282
  1620  001082                     l373:
  1621                           
  1622                           ; BSR set to: 1
  1623                           ;HW2.c: 574: else if(PORTBbits.RB4 == 0) {decrement10SClock();count=4;}
  1624  001082  B881               	btfsc	129,4,c	;volatile
  1625  001084  D030               	goto	l6336
  1626                           
  1627                           ; BSR set to: 1
  1628  001086  EC00  F012         	call	_decrement10SClock	;wreg free
  1629  00108A  D7E7               	goto	l6282
  1630  00108C                     l6300:
  1631                           
  1632                           ; BSR set to: 1
  1633                           ;HW2.c: 576: else if(mode ==2)
  1634  00108C  0E02               	movlw	2
  1635  00108E  19E0               	xorwf	_mode& (0+255),w,b
  1636  001090  11E1               	iorwf	(_mode+1)& (0+255),w,b
  1637  001092  A4D8               	btfss	status,2,c
  1638  001094  D00A               	goto	l6312
  1639                           
  1640                           ; BSR set to: 1
  1641                           ;HW2.c: 577: {;HW2.c: 580: if(PORTBbits.RB3 == 0){ incrementMinClock();count=4;}
  1642  001096  B681               	btfsc	129,3,c	;volatile
  1643  001098  D003               	goto	l378
  1644                           
  1645                           ; BSR set to: 1
  1646  00109A  EC08  F013         	call	_incrementMinClock	;wreg free
  1647  00109E  D7DD               	goto	l6282
  1648  0010A0                     l378:
  1649                           
  1650                           ; BSR set to: 1
  1651                           ;HW2.c: 581: else if(PORTBbits.RB4 == 0) {decrementMinClock();count=4;}
  1652  0010A0  B881               	btfsc	129,4,c	;volatile
  1653  0010A2  D021               	goto	l6336
  1654                           
  1655                           ; BSR set to: 1
  1656  0010A4  ECD7  F013         	call	_decrementMinClock	;wreg free
  1657  0010A8  D7D8               	goto	l6282
  1658  0010AA                     l6312:
  1659                           
  1660                           ; BSR set to: 1
  1661                           ;HW2.c: 583: else if(mode ==3)
  1662  0010AA  0E03               	movlw	3
  1663  0010AC  19E0               	xorwf	_mode& (0+255),w,b
  1664  0010AE  11E1               	iorwf	(_mode+1)& (0+255),w,b
  1665  0010B0  A4D8               	btfss	status,2,c
  1666  0010B2  D00A               	goto	l6324
  1667                           
  1668                           ; BSR set to: 1
  1669                           ;HW2.c: 584: {;HW2.c: 598: if(PORTBbits.RB3 == 0) {increment10MinClock();count=4;}
  1670  0010B4  B681               	btfsc	129,3,c	;volatile
  1671  0010B6  D003               	goto	l383
  1672                           
  1673                           ; BSR set to: 1
  1674  0010B8  ECB8  F012         	call	_increment10MinClock	;wreg free
  1675  0010BC  D7CE               	goto	l6282
  1676  0010BE                     l383:
  1677                           
  1678                           ; BSR set to: 1
  1679                           ;HW2.c: 599: else if(PORTBbits.RB4 == 0){ decrement10MinClock();count=4;}
  1680  0010BE  B881               	btfsc	129,4,c	;volatile
  1681  0010C0  D012               	goto	l6336
  1682                           
  1683                           ; BSR set to: 1
  1684  0010C2  EC69  F014         	call	_decrement10MinClock	;wreg free
  1685  0010C6  D7C9               	goto	l6282
  1686  0010C8                     l6324:
  1687                           
  1688                           ; BSR set to: 1
  1689                           ;HW2.c: 603: else if(mode ==4)
  1690  0010C8  0E04               	movlw	4
  1691  0010CA  19E0               	xorwf	_mode& (0+255),w,b
  1692  0010CC  11E1               	iorwf	(_mode+1)& (0+255),w,b
  1693  0010CE  A4D8               	btfss	status,2,c
  1694  0010D0  D00A               	goto	l6336
  1695                           
  1696                           ; BSR set to: 1
  1697                           ;HW2.c: 604: {;HW2.c: 620: if(PORTBbits.RB3 == 0){ incrementHourClock();count=4;}
  1698  0010D2  B681               	btfsc	129,3,c	;volatile
  1699  0010D4  D003               	goto	l388
  1700                           
  1701                           ; BSR set to: 1
  1702  0010D6  EC22  F015         	call	_incrementHourClock	;wreg free
  1703  0010DA  D7BF               	goto	l6282
  1704  0010DC                     l388:
  1705                           
  1706                           ; BSR set to: 1
  1707                           ;HW2.c: 621: else if(PORTBbits.RB4 == 0){ decrementHourClock();count=4;}
  1708  0010DC  B881               	btfsc	129,4,c	;volatile
  1709  0010DE  D003               	goto	l6336
  1710                           
  1711                           ; BSR set to: 1
  1712  0010E0  EC40  F015         	call	_decrementHourClock	;wreg free
  1713  0010E4  D7BA               	goto	l6282
  1714  0010E6                     l6336:
  1715                           
  1716                           ;HW2.c: 623: };HW2.c: 651: if (seconds==0.0&& minutes==0.0&&hours==0.0 ){
  1717  0010E6  C05A  F02C         	movff	_seconds,___awtoft@c
  1718  0010EA  C05B  F02D         	movff	_seconds+1,___awtoft@c+1
  1719  0010EE  EC4D  F014         	call	___awtoft	;wreg free
  1720  0010F2  502C               	movf	?___awtoft^0,w,c
  1721  0010F4  102D               	iorwf	(?___awtoft+1)^0,w,c
  1722  0010F6  102E               	iorwf	(?___awtoft+2)^0,w,c
  1723  0010F8  A4D8               	btfss	status,2,c
  1724  0010FA  D035               	goto	l6360
  1725  0010FC  C049  F02C         	movff	_minutes,___awtoft@c
  1726  001100  C04A  F02D         	movff	_minutes+1,___awtoft@c+1
  1727  001104  EC4D  F014         	call	___awtoft	;wreg free
  1728  001108  502C               	movf	?___awtoft^0,w,c
  1729  00110A  102D               	iorwf	(?___awtoft+1)^0,w,c
  1730  00110C  102E               	iorwf	(?___awtoft+2)^0,w,c
  1731  00110E  A4D8               	btfss	status,2,c
  1732  001110  D02A               	goto	l6360
  1733  001112  C058  F02C         	movff	_hours,___awtoft@c
  1734  001116  C059  F02D         	movff	_hours+1,___awtoft@c+1
  1735  00111A  EC4D  F014         	call	___awtoft	;wreg free
  1736  00111E  502C               	movf	?___awtoft^0,w,c
  1737  001120  102D               	iorwf	(?___awtoft+1)^0,w,c
  1738  001122  102E               	iorwf	(?___awtoft+2)^0,w,c
  1739  001124  A4D8               	btfss	status,2,c
  1740  001126  D01F               	goto	l6360
  1741                           
  1742                           ;HW2.c: 654: PORTCbits.RC5=0 ;
  1743  001128  9A82               	bcf	130,5,c	;volatile
  1744  00112A                     l6344:
  1745                           
  1746                           ;HW2.c: 656: for (;count>0;count--){
  1747  00112A  0100               	movlb	0	; () banked
  1748  00112C  BFD4               	btfsc	(main@count+1)& (0+255),7,b
  1749  00112E  D018               	goto	l6356
  1750  001130  51D4               	movf	(main@count+1)& (0+255),w,b
  1751  001132  E103               	bnz	l392
  1752  001134  05D3               	decf	main@count& (0+255),w,b
  1753  001136  A0D8               	btfss	status,0,c
  1754  001138  D013               	goto	l6356
  1755  00113A                     l392:
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;HW2.c: 657: PORTCbits.RC1=1 ;
  1759  00113A  8282               	bsf	130,1,c	;volatile
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;HW2.c: 658: delay_ms(20);
  1763  00113C  0E00               	movlw	0
  1764  00113E  6E25               	movwf	(delay_ms@n+1)^0,c
  1765  001140  0E14               	movlw	20
  1766  001142  6E24               	movwf	delay_ms@n^0,c
  1767  001144  ECDA  F014         	call	_delay_ms	;wreg free
  1768                           
  1769                           ;HW2.c: 659: PORTCbits.RC1=0;
  1770  001148  9282               	bcf	130,1,c	;volatile
  1771                           
  1772                           ;HW2.c: 660: delay_ms(1000);
  1773  00114A  0E03               	movlw	3
  1774  00114C  6E25               	movwf	(delay_ms@n+1)^0,c
  1775  00114E  0EE8               	movlw	232
  1776  001150  6E24               	movwf	delay_ms@n^0,c
  1777  001152  ECDA  F014         	call	_delay_ms	;wreg free
  1778  001156  0100               	movlb	0	; () banked
  1779  001158  07D3               	decf	main@count& (0+255),f,b
  1780  00115A  A0D8               	btfss	status,0,c
  1781  00115C  07D4               	decf	(main@count+1)& (0+255),f,b
  1782  00115E  D7E5               	goto	l6344
  1783  001160                     l6356:
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;HW2.c: 662: };HW2.c: 663: setupPorts();
  1787  001160  EC84  F014         	call	_setupPorts	;wreg free
  1788                           
  1789                           ;HW2.c: 664: PORTCbits.RC5=0 ;
  1790  001164  9A82               	bcf	130,5,c	;volatile
  1791  001166                     l6360:
  1792                           
  1793                           ;HW2.c: 687: };HW2.c: 688: display();
  1794  001166  ECB6  F008         	call	_display	;wreg free
  1795  00116A  D6F2               	goto	l360
  1796  00116C                     __end_of_main:
  1797                           	callstack 0
  1798                           
  1799 ;; *************** function _setupPorts *****************
  1800 ;; Defined at:
  1801 ;;		line 342 in file "HW2.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;		None
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;		None
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  1    wreg      void 
  1808 ;; Registers used:
  1809 ;;		wreg, status,2, cstack
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1819 ;;Total ram usage:        0 bytes
  1820 ;; Hardware stack levels used:    1
  1821 ;; Hardware stack levels required when called:    6
  1822 ;; This function calls:
  1823 ;;		_reloadTimer0
  1824 ;; This function is called by:
  1825 ;;		_main
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           	psect	text1
  1830  002908                     __ptext1:
  1831                           	callstack 0
  1832  002908                     _setupPorts:
  1833                           	callstack 24
  1834                           
  1835                           ;HW2.c: 344: ADCON0 =1;
  1836                           
  1837                           ;incstack = 0
  1838  002908  0E01               	movlw	1
  1839  00290A  6EC2               	movwf	194,c	;volatile
  1840                           
  1841                           ;HW2.c: 345: ADCON1 = 0x0C;
  1842  00290C  0E0C               	movlw	12
  1843  00290E  6EC1               	movwf	193,c	;volatile
  1844                           
  1845                           ;HW2.c: 346: TRISB = 0xFF;
  1846  002910  6893               	setf	147,c	;volatile
  1847                           
  1848                           ;HW2.c: 347: TRISC = 0x80;
  1849  002912  0E80               	movlw	128
  1850  002914  6E94               	movwf	148,c	;volatile
  1851                           
  1852                           ;HW2.c: 348: PORTC =0;
  1853  002916  0E00               	movlw	0
  1854  002918  6E82               	movwf	130,c	;volatile
  1855                           
  1856                           ;HW2.c: 349: TRISA = 0xFF;
  1857  00291A  6892               	setf	146,c	;volatile
  1858                           
  1859                           ;HW2.c: 350: TRISD = 0x00;
  1860  00291C  0E00               	movlw	0
  1861  00291E  6E95               	movwf	149,c	;volatile
  1862                           
  1863                           ;HW2.c: 351: TRISE= 0x00;
  1864  002920  0E00               	movlw	0
  1865  002922  6E96               	movwf	150,c	;volatile
  1866                           
  1867                           ;HW2.c: 353: TRISCbits.RC0 = 1;
  1868  002924  8094               	bsf	148,0,c	;volatile
  1869                           
  1870                           ;HW2.c: 355: PORTCbits.RC5 = 0;
  1871  002926  9A82               	bcf	130,5,c	;volatile
  1872                           
  1873                           ;HW2.c: 360: RCONbits.IPEN = 0;
  1874  002928  9ED0               	bcf	208,7,c	;volatile
  1875                           
  1876                           ;HW2.c: 361: INTCONbits.TMR0IE = 1;
  1877  00292A  8AF2               	bsf	242,5,c	;volatile
  1878                           
  1879                           ;HW2.c: 362: T0CONbits.TMR0ON = 1;
  1880  00292C  8ED5               	bsf	213,7,c	;volatile
  1881                           
  1882                           ;HW2.c: 363: INTCONbits.INT0IE = 1;
  1883  00292E  88F2               	bsf	242,4,c	;volatile
  1884                           
  1885                           ;HW2.c: 365: reloadTimer0();
  1886  002930  EC73  F015         	call	_reloadTimer0	;wreg free
  1887  002934  0012               	return		;funcret
  1888  002936                     __end_of_setupPorts:
  1889                           	callstack 0
  1890                           
  1891 ;; *************** function _reloadTimer0 *****************
  1892 ;; Defined at:
  1893 ;;		line 92 in file "HW2.c"
  1894 ;; Parameters:    Size  Location     Type
  1895 ;;		None
  1896 ;; Auto vars:     Size  Location     Type
  1897 ;;		None
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  1    wreg      void 
  1900 ;; Registers used:
  1901 ;;		wreg, status,2
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1911 ;;Total ram usage:        0 bytes
  1912 ;; Hardware stack levels used:    1
  1913 ;; Hardware stack levels required when called:    5
  1914 ;; This function calls:
  1915 ;;		Nothing
  1916 ;; This function is called by:
  1917 ;;		_setupPorts
  1918 ;; This function uses a non-reentrant model
  1919 ;;
  1920                           
  1921                           	psect	text2
  1922  002AE6                     __ptext2:
  1923                           	callstack 0
  1924  002AE6                     _reloadTimer0:
  1925                           	callstack 24
  1926                           
  1927                           ;HW2.c: 94: TMR3H = (unsigned char) ((3036 >> 8) & 0x00FF);
  1928                           
  1929                           ;incstack = 0
  1930  002AE6  0E0B               	movlw	11
  1931  002AE8  6EB3               	movwf	179,c	;volatile
  1932                           
  1933                           ;HW2.c: 95: TMR3L = (unsigned char)(3036 & 0x00FF );
  1934  002AEA  0EDC               	movlw	220
  1935  002AEC  6EB2               	movwf	178,c	;volatile
  1936  002AEE  0012               	return		;funcret
  1937  002AF0                     __end_of_reloadTimer0:
  1938                           	callstack 0
  1939                           
  1940 ;; *************** function _read_adc_voltage *****************
  1941 ;; Defined at:
  1942 ;;		line 45 in file "my_adc.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;  channel         1    wreg     unsigned char 
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;  channel         1   12[BANK0 ] unsigned char 
  1947 ;;  voltage         3    9[BANK0 ] float 
  1948 ;;  raw_value       2   13[BANK0 ] int 
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  3    6[BANK0 ] float 
  1951 ;; Registers used:
  1952 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1958 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;Total ram usage:        9 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    7
  1965 ;; This function calls:
  1966 ;;		___awtoft
  1967 ;;		___ftdiv
  1968 ;;		___wmul
  1969 ;;		_read_adc_raw_no_lib
  1970 ;; This function is called by:
  1971 ;;		_main
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           	psect	text3
  1976  0022CE                     __ptext3:
  1977                           	callstack 0
  1978  0022CE                     _read_adc_voltage:
  1979                           	callstack 23
  1980                           
  1981                           ;incstack = 0
  1982                           ;read_adc_voltage@channel stored from wreg
  1983  0022CE  0100               	movlb	0	; () banked
  1984  0022D0  6F8C               	movwf	read_adc_voltage@channel& (0+255),b
  1985                           
  1986                           ;my_adc.c: 46: int raw_value;;my_adc.c: 47: float voltage;;my_adc.c: 48: raw_value = rea
      +                          d_adc_raw_no_lib(channel);
  1987  0022D2  0100               	movlb	0	; () banked
  1988  0022D4  518C               	movf	read_adc_voltage@channel& (0+255),w,b
  1989  0022D6  ECF6  F013         	call	_read_adc_raw_no_lib
  1990  0022DA  C024  F08D         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  1991  0022DE  C025  F08E         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  1992                           
  1993                           ;my_adc.c: 49: voltage = (raw_value * 5) / 1023.0;
  1994  0022E2  C08D  F024         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  1995  0022E6  C08E  F025         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  1996  0022EA  0E00               	movlw	0
  1997  0022EC  6E27               	movwf	(___wmul@multiplicand+1)^0,c
  1998  0022EE  0E05               	movlw	5
  1999  0022F0  6E26               	movwf	___wmul@multiplicand^0,c
  2000  0022F2  ECC7  F014         	call	___wmul	;wreg free
  2001  0022F6  C024  F02C         	movff	?___wmul,___awtoft@c
  2002  0022FA  C025  F02D         	movff	?___wmul+1,___awtoft@c+1
  2003  0022FE  EC4D  F014         	call	___awtoft	;wreg free
  2004  002302  C02C  F030         	movff	?___awtoft,___ftdiv@f1
  2005  002306  C02D  F031         	movff	?___awtoft+1,___ftdiv@f1+1
  2006  00230A  C02E  F032         	movff	?___awtoft+2,___ftdiv@f1+2
  2007  00230E  0EC0               	movlw	192
  2008  002310  6E33               	movwf	___ftdiv@f2^0,c
  2009  002312  0E7F               	movlw	127
  2010  002314  6E34               	movwf	(___ftdiv@f2+1)^0,c
  2011  002316  0E44               	movlw	68
  2012  002318  6E35               	movwf	(___ftdiv@f2+2)^0,c
  2013  00231A  EC75  F00E         	call	___ftdiv	;wreg free
  2014  00231E  C030  F089         	movff	?___ftdiv,read_adc_voltage@voltage
  2015  002322  C031  F08A         	movff	?___ftdiv+1,read_adc_voltage@voltage+1
  2016  002326  C032  F08B         	movff	?___ftdiv+2,read_adc_voltage@voltage+2
  2017                           
  2018                           ;my_adc.c: 50: return voltage;
  2019  00232A  C089  F086         	movff	read_adc_voltage@voltage,?_read_adc_voltage
  2020  00232E  C08A  F087         	movff	read_adc_voltage@voltage+1,?_read_adc_voltage+1
  2021  002332  C08B  F088         	movff	read_adc_voltage@voltage+2,?_read_adc_voltage+2
  2022  002336  0012               	return		;funcret
  2023  002338                     __end_of_read_adc_voltage:
  2024                           	callstack 0
  2025                           
  2026 ;; *************** function _read_adc_raw_no_lib *****************
  2027 ;; Defined at:
  2028 ;;		line 29 in file "my_adc.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;  channel         1    wreg     unsigned char 
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;  channel         1   39[COMRAM] unsigned char 
  2033 ;;  raw_value       2   40[COMRAM] int 
  2034 ;; Return value:  Size  Location     Type
  2035 ;;                  2   35[COMRAM] int 
  2036 ;; Registers used:
  2037 ;;		wreg, status,2, status,0
  2038 ;; Tracked objects:
  2039 ;;		On entry : 3F/0
  2040 ;;		On exit  : 0/0
  2041 ;;		Unchanged: 0/0
  2042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2043 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2045 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2046 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2047 ;;Total ram usage:        7 bytes
  2048 ;; Hardware stack levels used:    1
  2049 ;; Hardware stack levels required when called:    5
  2050 ;; This function calls:
  2051 ;;		Nothing
  2052 ;; This function is called by:
  2053 ;;		_read_adc_voltage
  2054 ;; This function uses a non-reentrant model
  2055 ;;
  2056                           
  2057                           	psect	text4
  2058  0027EC                     __ptext4:
  2059                           	callstack 0
  2060  0027EC                     _read_adc_raw_no_lib:
  2061                           	callstack 24
  2062                           
  2063                           ;incstack = 0
  2064                           ;read_adc_raw_no_lib@channel stored from wreg
  2065  0027EC  6E28               	movwf	read_adc_raw_no_lib@channel^0,c
  2066                           
  2067                           ;my_adc.c: 30: int raw_value;;my_adc.c: 32: ADCON0bits.CHS = channel ;
  2068  0027EE  C028  F026         	movff	read_adc_raw_no_lib@channel,??_read_adc_raw_no_lib
  2069  0027F2  4626               	rlncf	??_read_adc_raw_no_lib^0,f,c
  2070  0027F4  4626               	rlncf	??_read_adc_raw_no_lib^0,f,c
  2071  0027F6  50C2               	movf	194,w,c	;volatile
  2072  0027F8  1826               	xorwf	??_read_adc_raw_no_lib^0,w,c
  2073  0027FA  0BC3               	andlw	-61
  2074  0027FC  1826               	xorwf	??_read_adc_raw_no_lib^0,w,c
  2075  0027FE  6EC2               	movwf	194,c	;volatile
  2076                           
  2077                           ;my_adc.c: 35: ADCON0bits.GO = 1;
  2078  002800  82C2               	bsf	194,1,c	;volatile
  2079  002802                     l76:
  2080  002802  B2C2               	btfsc	194,1,c	;volatile
  2081  002804  D7FE               	goto	l76
  2082                           
  2083                           ;my_adc.c: 37: raw_value = ADRESH << 8 | ADRESL;
  2084  002806  50C3               	movf	195,w,c	;volatile
  2085  002808  CFC4 F026          	movff	4036,??_read_adc_raw_no_lib	;volatile
  2086  00280C  6A27               	clrf	(??_read_adc_raw_no_lib+1)^0,c
  2087  00280E  C026  F027         	movff	??_read_adc_raw_no_lib,??_read_adc_raw_no_lib+1
  2088  002812  6A26               	clrf	??_read_adc_raw_no_lib^0,c
  2089  002814  1026               	iorwf	??_read_adc_raw_no_lib^0,w,c
  2090  002816  6E29               	movwf	read_adc_raw_no_lib@raw_value^0,c
  2091  002818  5027               	movf	(??_read_adc_raw_no_lib+1)^0,w,c
  2092  00281A  6E2A               	movwf	(read_adc_raw_no_lib@raw_value+1)^0,c
  2093                           
  2094                           ;my_adc.c: 42: return raw_value;
  2095  00281C  C029  F024         	movff	read_adc_raw_no_lib@raw_value,?_read_adc_raw_no_lib
  2096  002820  C02A  F025         	movff	read_adc_raw_no_lib@raw_value+1,?_read_adc_raw_no_lib+1
  2097  002824  0012               	return		;funcret
  2098  002826                     __end_of_read_adc_raw_no_lib:
  2099                           	callstack 0
  2100                           
  2101 ;; *************** function ___ftdiv *****************
  2102 ;; Defined at:
  2103 ;;		line 54 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftdiv.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;  f1              3   47[COMRAM] float 
  2106 ;;  f2              3   50[COMRAM] float 
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;  f3              3    1[BANK0 ] float 
  2109 ;;  sign            1    5[BANK0 ] unsigned char 
  2110 ;;  exp             1    4[BANK0 ] unsigned char 
  2111 ;;  cntr            1    0[BANK0 ] unsigned char 
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  3   47[COMRAM] float 
  2114 ;; Registers used:
  2115 ;;		wreg, status,2, status,0, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2121 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2122 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2123 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2124 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2125 ;;Total ram usage:       15 bytes
  2126 ;; Hardware stack levels used:    1
  2127 ;; Hardware stack levels required when called:    6
  2128 ;; This function calls:
  2129 ;;		___ftpack
  2130 ;; This function is called by:
  2131 ;;		_read_adc_voltage
  2132 ;; This function uses a non-reentrant model
  2133 ;;
  2134                           
  2135                           	psect	text5
  2136  001CEA                     __ptext5:
  2137                           	callstack 0
  2138  001CEA                     ___ftdiv:
  2139                           	callstack 23
  2140                           
  2141                           ;incstack = 0
  2142  001CEA  C032  F036         	movff	___ftdiv@f1+2,??___ftdiv
  2143  001CEE  6A37               	clrf	(??___ftdiv+1)^0,c
  2144  001CF0  6A38               	clrf	(??___ftdiv+2)^0,c
  2145  001CF2  3431               	rlcf	(___ftdiv@f1+1)^0,w,c
  2146  001CF4  3636               	rlcf	??___ftdiv^0,f,c
  2147  001CF6  E301               	bnc	u7161
  2148  001CF8  8037               	bsf	(??___ftdiv+1)^0,0,c
  2149  001CFA                     u7161:
  2150  001CFA  5036               	movf	??___ftdiv^0,w,c
  2151  001CFC  0100               	movlb	0	; () banked
  2152  001CFE  6F84               	movwf	___ftdiv@exp& (0+255),b
  2153  001D00  5184               	movf	___ftdiv@exp& (0+255),w,b
  2154  001D02  A4D8               	btfss	status,2,c
  2155  001D04  D007               	goto	l5910
  2156                           
  2157                           ; BSR set to: 0
  2158  001D06  0E00               	movlw	0
  2159  001D08  6E30               	movwf	?___ftdiv^0,c
  2160  001D0A  0E00               	movlw	0
  2161  001D0C  6E31               	movwf	(?___ftdiv+1)^0,c
  2162  001D0E  0E00               	movlw	0
  2163  001D10  6E32               	movwf	(?___ftdiv+2)^0,c
  2164  001D12  0012               	return	
  2165  001D14                     l5910:
  2166                           
  2167                           ; BSR set to: 0
  2168  001D14  C035  F036         	movff	___ftdiv@f2+2,??___ftdiv
  2169  001D18  6A37               	clrf	(??___ftdiv+1)^0,c
  2170  001D1A  6A38               	clrf	(??___ftdiv+2)^0,c
  2171  001D1C  3434               	rlcf	(___ftdiv@f2+1)^0,w,c
  2172  001D1E  3636               	rlcf	??___ftdiv^0,f,c
  2173  001D20  E301               	bnc	u7181
  2174  001D22  8037               	bsf	(??___ftdiv+1)^0,0,c
  2175  001D24                     u7181:
  2176  001D24  5036               	movf	??___ftdiv^0,w,c
  2177  001D26  6F85               	movwf	___ftdiv@sign& (0+255),b
  2178  001D28  5185               	movf	___ftdiv@sign& (0+255),w,b
  2179  001D2A  A4D8               	btfss	status,2,c
  2180  001D2C  D007               	goto	l5916
  2181                           
  2182                           ; BSR set to: 0
  2183  001D2E  0E00               	movlw	0
  2184  001D30  6E30               	movwf	?___ftdiv^0,c
  2185  001D32  0E00               	movlw	0
  2186  001D34  6E31               	movwf	(?___ftdiv+1)^0,c
  2187  001D36  0E00               	movlw	0
  2188  001D38  6E32               	movwf	(?___ftdiv+2)^0,c
  2189  001D3A  0012               	return	
  2190  001D3C                     l5916:
  2191                           
  2192                           ; BSR set to: 0
  2193  001D3C  0E00               	movlw	0
  2194  001D3E  6F81               	movwf	___ftdiv@f3& (0+255),b
  2195  001D40  0E00               	movlw	0
  2196  001D42  6F82               	movwf	(___ftdiv@f3+1)& (0+255),b
  2197  001D44  0E00               	movlw	0
  2198  001D46  6F83               	movwf	(___ftdiv@f3+2)& (0+255),b
  2199                           
  2200                           ; BSR set to: 0
  2201  001D48  5185               	movf	___ftdiv@sign& (0+255),w,b
  2202  001D4A  0F89               	addlw	137
  2203  001D4C  5F84               	subwf	___ftdiv@exp& (0+255),f,b
  2204                           
  2205                           ; BSR set to: 0
  2206  001D4E  C032  F085         	movff	___ftdiv@f1+2,___ftdiv@sign
  2207                           
  2208                           ; BSR set to: 0
  2209  001D52  5035               	movf	(___ftdiv@f2+2)^0,w,c
  2210  001D54  1B85               	xorwf	___ftdiv@sign& (0+255),f,b
  2211                           
  2212                           ; BSR set to: 0
  2213  001D56  0E80               	movlw	128
  2214  001D58  1785               	andwf	___ftdiv@sign& (0+255),f,b
  2215                           
  2216                           ; BSR set to: 0
  2217  001D5A  8E31               	bsf	(___ftdiv@f1+1)^0,7,c
  2218                           
  2219                           ; BSR set to: 0
  2220  001D5C  0EFF               	movlw	255
  2221  001D5E  1630               	andwf	___ftdiv@f1^0,f,c
  2222  001D60  0EFF               	movlw	255
  2223  001D62  1631               	andwf	(___ftdiv@f1+1)^0,f,c
  2224  001D64  0E00               	movlw	0
  2225  001D66  1632               	andwf	(___ftdiv@f1+2)^0,f,c
  2226                           
  2227                           ; BSR set to: 0
  2228  001D68  8E34               	bsf	(___ftdiv@f2+1)^0,7,c
  2229                           
  2230                           ; BSR set to: 0
  2231  001D6A  0EFF               	movlw	255
  2232  001D6C  1633               	andwf	___ftdiv@f2^0,f,c
  2233  001D6E  0EFF               	movlw	255
  2234  001D70  1634               	andwf	(___ftdiv@f2+1)^0,f,c
  2235  001D72  0E00               	movlw	0
  2236  001D74  1635               	andwf	(___ftdiv@f2+2)^0,f,c
  2237                           
  2238                           ; BSR set to: 0
  2239  001D76  0E18               	movlw	24
  2240  001D78  6F80               	movwf	___ftdiv@cntr& (0+255),b
  2241  001D7A                     l5936:
  2242                           
  2243                           ; BSR set to: 0
  2244  001D7A  90D8               	bcf	status,0,c
  2245  001D7C  3781               	rlcf	___ftdiv@f3& (0+255),f,b
  2246  001D7E  3782               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  2247  001D80  3783               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  2248                           
  2249                           ; BSR set to: 0
  2250  001D82  5033               	movf	___ftdiv@f2^0,w,c
  2251  001D84  5C30               	subwf	___ftdiv@f1^0,w,c
  2252  001D86  5034               	movf	(___ftdiv@f2+1)^0,w,c
  2253  001D88  5831               	subwfb	(___ftdiv@f1+1)^0,w,c
  2254  001D8A  5035               	movf	(___ftdiv@f2+2)^0,w,c
  2255  001D8C  5832               	subwfb	(___ftdiv@f1+2)^0,w,c
  2256  001D8E  A0D8               	btfss	status,0,c
  2257  001D90  D007               	goto	l908
  2258                           
  2259                           ; BSR set to: 0
  2260  001D92  5033               	movf	___ftdiv@f2^0,w,c
  2261  001D94  5E30               	subwf	___ftdiv@f1^0,f,c
  2262  001D96  5034               	movf	(___ftdiv@f2+1)^0,w,c
  2263  001D98  5A31               	subwfb	(___ftdiv@f1+1)^0,f,c
  2264  001D9A  5035               	movf	(___ftdiv@f2+2)^0,w,c
  2265  001D9C  5A32               	subwfb	(___ftdiv@f1+2)^0,f,c
  2266                           
  2267                           ; BSR set to: 0
  2268  001D9E  8181               	bsf	___ftdiv@f3& (0+255),0,b
  2269  001DA0                     l908:
  2270                           
  2271                           ; BSR set to: 0
  2272  001DA0  90D8               	bcf	status,0,c
  2273  001DA2  3630               	rlcf	___ftdiv@f1^0,f,c
  2274  001DA4  3631               	rlcf	(___ftdiv@f1+1)^0,f,c
  2275  001DA6  3632               	rlcf	(___ftdiv@f1+2)^0,f,c
  2276                           
  2277                           ; BSR set to: 0
  2278  001DA8  2F80               	decfsz	___ftdiv@cntr& (0+255),f,b
  2279  001DAA  D7E7               	goto	l5936
  2280                           
  2281                           ; BSR set to: 0
  2282  001DAC  C081  F024         	movff	___ftdiv@f3,___ftpack@arg
  2283  001DB0  C082  F025         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2284  001DB4  C083  F026         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2285  001DB8  C084  F027         	movff	___ftdiv@exp,___ftpack@exp
  2286  001DBC  C085  F028         	movff	___ftdiv@sign,___ftpack@sign
  2287  001DC0  EC54  F00F         	call	___ftpack	;wreg free
  2288  001DC4  C024  F030         	movff	?___ftpack,?___ftdiv
  2289  001DC8  C025  F031         	movff	?___ftpack+1,?___ftdiv+1
  2290  001DCC  C026  F032         	movff	?___ftpack+2,?___ftdiv+2
  2291  001DD0  0012               	return		;funcret
  2292  001DD2                     __end_of___ftdiv:
  2293                           	callstack 0
  2294                           
  2295 ;; *************** function ___awtoft *****************
  2296 ;; Defined at:
  2297 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awtoft.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;  c               2   43[COMRAM] int 
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;  sign            1   46[COMRAM] unsigned char 
  2302 ;; Return value:  Size  Location     Type
  2303 ;;                  3   43[COMRAM] float 
  2304 ;; Registers used:
  2305 ;;		wreg, status,2, status,0, cstack
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2311 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2312 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2314 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2315 ;;Total ram usage:        4 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; Hardware stack levels required when called:    6
  2318 ;; This function calls:
  2319 ;;		___ftpack
  2320 ;; This function is called by:
  2321 ;;		_read_adc_voltage
  2322 ;;		_main
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325                           
  2326                           	psect	text6
  2327  00289A                     __ptext6:
  2328                           	callstack 0
  2329  00289A                     ___awtoft:
  2330                           	callstack 23
  2331                           
  2332                           ;incstack = 0
  2333  00289A  0E00               	movlw	0
  2334  00289C  6E2F               	movwf	___awtoft@sign^0,c
  2335  00289E  AE2D               	btfss	(___awtoft@c+1)^0,7,c
  2336  0028A0  D006               	goto	l5958
  2337  0028A2  6C2C               	negf	___awtoft@c^0,c
  2338  0028A4  1E2D               	comf	(___awtoft@c+1)^0,f,c
  2339  0028A6  B0D8               	btfsc	status,0,c
  2340  0028A8  2A2D               	incf	(___awtoft@c+1)^0,f,c
  2341  0028AA  0E01               	movlw	1
  2342  0028AC  6E2F               	movwf	___awtoft@sign^0,c
  2343  0028AE                     l5958:
  2344  0028AE  C02C  F024         	movff	___awtoft@c,___ftpack@arg
  2345  0028B2  C02D  F025         	movff	___awtoft@c+1,___ftpack@arg+1
  2346  0028B6  6A26               	clrf	(___ftpack@arg+2)^0,c
  2347  0028B8  0E8E               	movlw	142
  2348  0028BA  6E27               	movwf	___ftpack@exp^0,c
  2349  0028BC  C02F  F028         	movff	___awtoft@sign,___ftpack@sign
  2350  0028C0  EC54  F00F         	call	___ftpack	;wreg free
  2351  0028C4  C024  F02C         	movff	?___ftpack,?___awtoft
  2352  0028C8  C025  F02D         	movff	?___ftpack+1,?___awtoft+1
  2353  0028CC  C026  F02E         	movff	?___ftpack+2,?___awtoft+2
  2354  0028D0  0012               	return		;funcret
  2355  0028D2                     __end_of___awtoft:
  2356                           	callstack 0
  2357                           
  2358 ;; *************** function _lcd_init *****************
  2359 ;; Defined at:
  2360 ;;		line 56 in file "lcd_x8.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;		None
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;  i               1   45[COMRAM] unsigned char 
  2365 ;; Return value:  Size  Location     Type
  2366 ;;                  1    wreg      void 
  2367 ;; Registers used:
  2368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2369 ;; Tracked objects:
  2370 ;;		On entry : 3F/0
  2371 ;;		On exit  : 0/0
  2372 ;;		Unchanged: 0/0
  2373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2375 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2377 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2378 ;;Total ram usage:        1 bytes
  2379 ;; Hardware stack levels used:    1
  2380 ;; Hardware stack levels required when called:    8
  2381 ;; This function calls:
  2382 ;;		_delay_ms
  2383 ;;		_lcd_send_byte
  2384 ;;		_lcd_send_nibble
  2385 ;; This function is called by:
  2386 ;;		_main
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           	psect	text7
  2391  00265A                     __ptext7:
  2392                           	callstack 0
  2393  00265A                     _lcd_init:
  2394                           	callstack 22
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;lcd_x8.c: 58: unsigned char i;;lcd_x8.c: 61: PORTEbits.RE2 = 0;
  2398                           
  2399                           ;incstack = 0
  2400  00265A  9484               	bcf	132,2,c	;volatile
  2401                           
  2402                           ;lcd_x8.c: 63: PORTEbits.RE1 = 0;
  2403  00265C  9284               	bcf	132,1,c	;volatile
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;lcd_x8.c: 65: delay_ms(25);
  2407  00265E  0E00               	movlw	0
  2408  002660  6E25               	movwf	(delay_ms@n+1)^0,c
  2409  002662  0E19               	movlw	25
  2410  002664  6E24               	movwf	delay_ms@n^0,c
  2411  002666  ECDA  F014         	call	_delay_ms	;wreg free
  2412                           
  2413                           ;lcd_x8.c: 66: for (i = 1; i <= 3; ++i) {
  2414  00266A  0E01               	movlw	1
  2415  00266C  6E2E               	movwf	lcd_init@i^0,c
  2416  00266E                     l5972:
  2417                           
  2418                           ;lcd_x8.c: 67: lcd_send_nibble(3);
  2419  00266E  0E03               	movlw	3
  2420  002670  EC11  F015         	call	_lcd_send_nibble
  2421  002674  2A2E               	incf	lcd_init@i^0,f,c
  2422  002676  0E03               	movlw	3
  2423  002678  642E               	cpfsgt	lcd_init@i^0,c
  2424  00267A  D7F9               	goto	l5972
  2425                           
  2426                           ;lcd_x8.c: 70: };lcd_x8.c: 72: lcd_send_nibble(2);
  2427  00267C  0E02               	movlw	2
  2428  00267E  EC11  F015         	call	_lcd_send_nibble
  2429                           
  2430                           ;lcd_x8.c: 74: for (i = 0; i <= 3; ++i)
  2431  002682  0E00               	movlw	0
  2432  002684  6E2E               	movwf	lcd_init@i^0,c
  2433  002686                     l5986:
  2434                           
  2435                           ;lcd_x8.c: 75: lcd_send_byte(0, LCD_INIT_STRING[i]);
  2436  002686  502E               	movf	lcd_init@i^0,w,c
  2437  002688  0FF5               	addlw	low _LCD_INIT_STRING
  2438  00268A  6ED9               	movwf	fsr2l,c
  2439  00268C  6ADA               	clrf	fsr2h,c
  2440  00268E  50DF               	movf	indf2,w,c
  2441  002690  6E2C               	movwf	lcd_send_byte@n^0,c
  2442  002692  0E00               	movlw	0
  2443  002694  EC30  F014         	call	_lcd_send_byte
  2444  002698  2A2E               	incf	lcd_init@i^0,f,c
  2445  00269A  0E03               	movlw	3
  2446  00269C  642E               	cpfsgt	lcd_init@i^0,c
  2447  00269E  D7F3               	goto	l5986
  2448  0026A0  0012               	return	
  2449  0026A2                     __end_of_lcd_init:
  2450                           	callstack 0
  2451                           
  2452 ;; *************** function _init_adc_no_lib *****************
  2453 ;; Defined at:
  2454 ;;		line 10 in file "my_adc.c"
  2455 ;; Parameters:    Size  Location     Type
  2456 ;;		None
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;		None
  2459 ;; Return value:  Size  Location     Type
  2460 ;;                  1    wreg      void 
  2461 ;; Registers used:
  2462 ;;		wreg, status,2
  2463 ;; Tracked objects:
  2464 ;;		On entry : 3F/0
  2465 ;;		On exit  : 3F/0
  2466 ;;		Unchanged: 3F/0
  2467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2472 ;;Total ram usage:        0 bytes
  2473 ;; Hardware stack levels used:    1
  2474 ;; Hardware stack levels required when called:    5
  2475 ;; This function calls:
  2476 ;;		Nothing
  2477 ;; This function is called by:
  2478 ;;		_main
  2479 ;; This function uses a non-reentrant model
  2480 ;;
  2481                           
  2482                           	psect	text8
  2483  002ADA                     __ptext8:
  2484                           	callstack 0
  2485  002ADA                     _init_adc_no_lib:
  2486                           	callstack 25
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;my_adc.c: 12: ADCON0 = 0;
  2490                           
  2491                           ;incstack = 0
  2492  002ADA  0E00               	movlw	0
  2493  002ADC  6EC2               	movwf	194,c	;volatile
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;my_adc.c: 13: ADCON0bits.ADON = 1;
  2497  002ADE  80C2               	bsf	194,0,c	;volatile
  2498                           
  2499                           ;my_adc.c: 15: ADCON2 = 0b10001001;
  2500  002AE0  0E89               	movlw	137
  2501  002AE2  6EC0               	movwf	192,c	;volatile
  2502                           
  2503                           ; BSR set to: 0
  2504  002AE4  0012               	return		;funcret
  2505  002AE6                     __end_of_init_adc_no_lib:
  2506                           	callstack 0
  2507                           
  2508 ;; *************** function _incrementMinClock *****************
  2509 ;; Defined at:
  2510 ;;		line 260 in file "HW2.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;		None
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;		None
  2515 ;; Return value:  Size  Location     Type
  2516 ;;                  1    wreg      void 
  2517 ;; Registers used:
  2518 ;;		wreg, status,2, status,0
  2519 ;; Tracked objects:
  2520 ;;		On entry : 3F/1
  2521 ;;		On exit  : 3F/1
  2522 ;;		Unchanged: 3F/0
  2523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2528 ;;Total ram usage:        0 bytes
  2529 ;; Hardware stack levels used:    1
  2530 ;; Hardware stack levels required when called:    5
  2531 ;; This function calls:
  2532 ;;		Nothing
  2533 ;; This function is called by:
  2534 ;;		_main
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           	psect	text9
  2539  002610                     __ptext9:
  2540                           	callstack 0
  2541  002610                     _incrementMinClock:
  2542                           	callstack 25
  2543                           
  2544                           ; BSR set to: 1
  2545                           ;HW2.c: 261: minutes+=1;
  2546                           
  2547                           ; BSR set to: 0
  2548                           ;incstack = 0
  2549  002610  4A49               	infsnz	_minutes^0,f,c
  2550  002612  2A4A               	incf	(_minutes+1)^0,f,c
  2551                           
  2552                           ; BSR set to: 1
  2553                           ;HW2.c: 262: if (minutes>=59){
  2554  002614  BE4A               	btfsc	(_minutes+1)^0,7,c
  2555  002616  0012               	return	
  2556  002618  504A               	movf	(_minutes+1)^0,w,c
  2557  00261A  E104               	bnz	u7360
  2558  00261C  0E3B               	movlw	59
  2559  00261E  5C49               	subwf	_minutes^0,w,c
  2560  002620  A0D8               	btfss	status,0,c
  2561  002622  0012               	return	
  2562  002624                     u7360:
  2563                           
  2564                           ; BSR set to: 1
  2565                           ;HW2.c: 263: minutes=0;
  2566  002624  0E00               	movlw	0
  2567  002626  6E4A               	movwf	(_minutes+1)^0,c
  2568  002628  0E00               	movlw	0
  2569  00262A  6E49               	movwf	_minutes^0,c
  2570                           
  2571                           ; BSR set to: 1
  2572                           ;HW2.c: 264: hours+=1;
  2573  00262C  4A58               	infsnz	_hours^0,f,c
  2574  00262E  2A59               	incf	(_hours+1)^0,f,c
  2575                           
  2576                           ; BSR set to: 1
  2577                           ;HW2.c: 265: if (hours>9){
  2578  002630  BE59               	btfsc	(_hours+1)^0,7,c
  2579  002632  0012               	return	
  2580  002634  5059               	movf	(_hours+1)^0,w,c
  2581  002636  E104               	bnz	u7370
  2582  002638  0E0A               	movlw	10
  2583  00263A  5C58               	subwf	_hours^0,w,c
  2584  00263C  A0D8               	btfss	status,0,c
  2585  00263E  0012               	return	
  2586  002640                     u7370:
  2587                           
  2588                           ; BSR set to: 1
  2589                           ;HW2.c: 266: seconds=0;
  2590  002640  0E00               	movlw	0
  2591  002642  6E5B               	movwf	(_seconds+1)^0,c
  2592  002644  0E00               	movlw	0
  2593  002646  6E5A               	movwf	_seconds^0,c
  2594                           
  2595                           ;HW2.c: 268: minutes=0;
  2596  002648  0E00               	movlw	0
  2597  00264A  6E4A               	movwf	(_minutes+1)^0,c
  2598  00264C  0E00               	movlw	0
  2599  00264E  6E49               	movwf	_minutes^0,c
  2600                           
  2601                           ;HW2.c: 270: hours =0 ;
  2602  002650  0E00               	movlw	0
  2603  002652  6E59               	movwf	(_hours+1)^0,c
  2604  002654  0E00               	movlw	0
  2605  002656  6E58               	movwf	_hours^0,c
  2606                           
  2607                           ; BSR set to: 1
  2608  002658  0012               	return		;funcret
  2609  00265A                     __end_of_incrementMinClock:
  2610                           	callstack 0
  2611                           
  2612 ;; *************** function _incrementHourClock *****************
  2613 ;; Defined at:
  2614 ;;		line 327 in file "HW2.c"
  2615 ;; Parameters:    Size  Location     Type
  2616 ;;		None
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;		None
  2619 ;; Return value:  Size  Location     Type
  2620 ;;                  1    wreg      void 
  2621 ;; Registers used:
  2622 ;;		wreg, status,2, status,0
  2623 ;; Tracked objects:
  2624 ;;		On entry : 3F/1
  2625 ;;		On exit  : 3F/1
  2626 ;;		Unchanged: 3F/0
  2627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2632 ;;Total ram usage:        0 bytes
  2633 ;; Hardware stack levels used:    1
  2634 ;; Hardware stack levels required when called:    5
  2635 ;; This function calls:
  2636 ;;		Nothing
  2637 ;; This function is called by:
  2638 ;;		_main
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642                           	psect	text10
  2643  002A44                     __ptext10:
  2644                           	callstack 0
  2645  002A44                     _incrementHourClock:
  2646                           	callstack 25
  2647                           
  2648                           ; BSR set to: 1
  2649                           ;HW2.c: 328: hours+=1;
  2650                           
  2651                           ; BSR set to: 1
  2652                           ;incstack = 0
  2653  002A44  4A58               	infsnz	_hours^0,f,c
  2654  002A46  2A59               	incf	(_hours+1)^0,f,c
  2655                           
  2656                           ; BSR set to: 1
  2657                           ;HW2.c: 329: if (hours>9){
  2658  002A48  BE59               	btfsc	(_hours+1)^0,7,c
  2659  002A4A  0012               	return	
  2660  002A4C  5059               	movf	(_hours+1)^0,w,c
  2661  002A4E  E104               	bnz	u7440
  2662  002A50  0E0A               	movlw	10
  2663  002A52  5C58               	subwf	_hours^0,w,c
  2664  002A54  A0D8               	btfss	status,0,c
  2665  002A56  0012               	return	
  2666  002A58                     u7440:
  2667                           
  2668                           ; BSR set to: 1
  2669                           ;HW2.c: 330: hours=0 ;
  2670  002A58  0E00               	movlw	0
  2671  002A5A  6E59               	movwf	(_hours+1)^0,c
  2672  002A5C  0E00               	movlw	0
  2673  002A5E  6E58               	movwf	_hours^0,c
  2674                           
  2675                           ; BSR set to: 1
  2676  002A60  0012               	return		;funcret
  2677  002A62                     __end_of_incrementHourClock:
  2678                           	callstack 0
  2679                           
  2680 ;; *************** function _incrementClock *****************
  2681 ;; Defined at:
  2682 ;;		line 204 in file "HW2.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;		None
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;		None
  2687 ;; Return value:  Size  Location     Type
  2688 ;;                  1    wreg      void 
  2689 ;; Registers used:
  2690 ;;		wreg, status,2, status,0
  2691 ;; Tracked objects:
  2692 ;;		On entry : 3F/1
  2693 ;;		On exit  : 3F/1
  2694 ;;		Unchanged: 3F/0
  2695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2700 ;;Total ram usage:        0 bytes
  2701 ;; Hardware stack levels used:    1
  2702 ;; Hardware stack levels required when called:    5
  2703 ;; This function calls:
  2704 ;;		Nothing
  2705 ;; This function is called by:
  2706 ;;		_main
  2707 ;; This function uses a non-reentrant model
  2708 ;;
  2709                           
  2710                           	psect	text11
  2711  002460                     __ptext11:
  2712                           	callstack 0
  2713  002460                     _incrementClock:
  2714                           	callstack 25
  2715                           
  2716                           ; BSR set to: 1
  2717                           ;HW2.c: 206: seconds+=1;
  2718                           
  2719                           ; BSR set to: 1
  2720                           ;incstack = 0
  2721  002460  4A5A               	infsnz	_seconds^0,f,c
  2722  002462  2A5B               	incf	(_seconds+1)^0,f,c
  2723                           
  2724                           ; BSR set to: 1
  2725                           ;HW2.c: 207: if (seconds>=59){seconds=seconds-59;
  2726  002464  BE5B               	btfsc	(_seconds+1)^0,7,c
  2727  002466  0012               	return	
  2728  002468  505B               	movf	(_seconds+1)^0,w,c
  2729  00246A  E104               	bnz	u7240
  2730  00246C  0E3B               	movlw	59
  2731  00246E  5C5A               	subwf	_seconds^0,w,c
  2732  002470  A0D8               	btfss	status,0,c
  2733  002472  0012               	return	
  2734  002474                     u7240:
  2735                           
  2736                           ; BSR set to: 1
  2737  002474  0EC5               	movlw	197
  2738  002476  245A               	addwf	_seconds^0,w,c
  2739  002478  6E5A               	movwf	_seconds^0,c
  2740  00247A  0EFF               	movlw	255
  2741  00247C  205B               	addwfc	(_seconds+1)^0,w,c
  2742  00247E  6E5B               	movwf	(_seconds+1)^0,c
  2743                           
  2744                           ; BSR set to: 1
  2745                           ;HW2.c: 208: minutes+=1;
  2746  002480  4A49               	infsnz	_minutes^0,f,c
  2747  002482  2A4A               	incf	(_minutes+1)^0,f,c
  2748                           
  2749                           ; BSR set to: 1
  2750                           ;HW2.c: 209: if (minutes>=59){minutes=minutes-60;
  2751  002484  BE4A               	btfsc	(_minutes+1)^0,7,c
  2752  002486  0012               	return	
  2753  002488  504A               	movf	(_minutes+1)^0,w,c
  2754  00248A  E104               	bnz	u7250
  2755  00248C  0E3B               	movlw	59
  2756  00248E  5C49               	subwf	_minutes^0,w,c
  2757  002490  A0D8               	btfss	status,0,c
  2758  002492  0012               	return	
  2759  002494                     u7250:
  2760                           
  2761                           ; BSR set to: 1
  2762  002494  0EC4               	movlw	196
  2763  002496  2449               	addwf	_minutes^0,w,c
  2764  002498  6E49               	movwf	_minutes^0,c
  2765  00249A  0EFF               	movlw	255
  2766  00249C  204A               	addwfc	(_minutes+1)^0,w,c
  2767  00249E  6E4A               	movwf	(_minutes+1)^0,c
  2768                           
  2769                           ; BSR set to: 1
  2770                           ;HW2.c: 210: hours+=1;
  2771  0024A0  4A58               	infsnz	_hours^0,f,c
  2772  0024A2  2A59               	incf	(_hours+1)^0,f,c
  2773                           
  2774                           ; BSR set to: 1
  2775                           ;HW2.c: 211: if (hours>=9){hours=0;
  2776  0024A4  BE59               	btfsc	(_hours+1)^0,7,c
  2777  0024A6  0012               	return	
  2778  0024A8  5059               	movf	(_hours+1)^0,w,c
  2779  0024AA  E104               	bnz	u7260
  2780  0024AC  0E09               	movlw	9
  2781  0024AE  5C58               	subwf	_hours^0,w,c
  2782  0024B0  A0D8               	btfss	status,0,c
  2783  0024B2  0012               	return	
  2784  0024B4                     u7260:
  2785                           
  2786                           ; BSR set to: 1
  2787  0024B4  0E00               	movlw	0
  2788  0024B6  6E59               	movwf	(_hours+1)^0,c
  2789  0024B8  0E00               	movlw	0
  2790  0024BA  6E58               	movwf	_hours^0,c
  2791                           
  2792                           ; BSR set to: 1
  2793  0024BC  0012               	return		;funcret
  2794  0024BE                     __end_of_incrementClock:
  2795                           	callstack 0
  2796                           
  2797 ;; *************** function _increment10SClock *****************
  2798 ;; Defined at:
  2799 ;;		line 228 in file "HW2.c"
  2800 ;; Parameters:    Size  Location     Type
  2801 ;;		None
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;		None
  2804 ;; Return value:  Size  Location     Type
  2805 ;;                  1    wreg      void 
  2806 ;; Registers used:
  2807 ;;		wreg, status,2, status,0
  2808 ;; Tracked objects:
  2809 ;;		On entry : 3F/1
  2810 ;;		On exit  : 3F/1
  2811 ;;		Unchanged: 3F/0
  2812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2817 ;;Total ram usage:        0 bytes
  2818 ;; Hardware stack levels used:    1
  2819 ;; Hardware stack levels required when called:    5
  2820 ;; This function calls:
  2821 ;;		Nothing
  2822 ;; This function is called by:
  2823 ;;		_main
  2824 ;; This function uses a non-reentrant model
  2825 ;;
  2826                           
  2827                           	psect	text12
  2828  00239E                     __ptext12:
  2829                           	callstack 0
  2830  00239E                     _increment10SClock:
  2831                           	callstack 25
  2832                           
  2833                           ; BSR set to: 1
  2834                           ;HW2.c: 229: seconds+=10;
  2835                           
  2836                           ; BSR set to: 1
  2837                           ;incstack = 0
  2838  00239E  0E0A               	movlw	10
  2839  0023A0  265A               	addwf	_seconds^0,f,c
  2840  0023A2  0E00               	movlw	0
  2841  0023A4  225B               	addwfc	(_seconds+1)^0,f,c
  2842                           
  2843                           ;HW2.c: 230: if (seconds>=59){seconds=seconds-60;
  2844  0023A6  BE5B               	btfsc	(_seconds+1)^0,7,c
  2845  0023A8  0012               	return	
  2846  0023AA  505B               	movf	(_seconds+1)^0,w,c
  2847  0023AC  E104               	bnz	u7300
  2848  0023AE  0E3B               	movlw	59
  2849  0023B0  5C5A               	subwf	_seconds^0,w,c
  2850  0023B2  A0D8               	btfss	status,0,c
  2851  0023B4  0012               	return	
  2852  0023B6                     u7300:
  2853                           
  2854                           ; BSR set to: 1
  2855  0023B6  0EC4               	movlw	196
  2856  0023B8  245A               	addwf	_seconds^0,w,c
  2857  0023BA  6E5A               	movwf	_seconds^0,c
  2858  0023BC  0EFF               	movlw	255
  2859  0023BE  205B               	addwfc	(_seconds+1)^0,w,c
  2860  0023C0  6E5B               	movwf	(_seconds+1)^0,c
  2861                           
  2862                           ; BSR set to: 1
  2863                           ;HW2.c: 231: minutes+=1;
  2864  0023C2  4A49               	infsnz	_minutes^0,f,c
  2865  0023C4  2A4A               	incf	(_minutes+1)^0,f,c
  2866                           
  2867                           ; BSR set to: 1
  2868                           ;HW2.c: 232: if (minutes>=59){minutes=minutes-60;
  2869  0023C6  BE4A               	btfsc	(_minutes+1)^0,7,c
  2870  0023C8  0012               	return	
  2871  0023CA  504A               	movf	(_minutes+1)^0,w,c
  2872  0023CC  E104               	bnz	u7310
  2873  0023CE  0E3B               	movlw	59
  2874  0023D0  5C49               	subwf	_minutes^0,w,c
  2875  0023D2  A0D8               	btfss	status,0,c
  2876  0023D4  0012               	return	
  2877  0023D6                     u7310:
  2878                           
  2879                           ; BSR set to: 1
  2880  0023D6  0EC4               	movlw	196
  2881  0023D8  2449               	addwf	_minutes^0,w,c
  2882  0023DA  6E49               	movwf	_minutes^0,c
  2883  0023DC  0EFF               	movlw	255
  2884  0023DE  204A               	addwfc	(_minutes+1)^0,w,c
  2885  0023E0  6E4A               	movwf	(_minutes+1)^0,c
  2886                           
  2887                           ; BSR set to: 1
  2888                           ;HW2.c: 233: hours+=1;
  2889  0023E2  4A58               	infsnz	_hours^0,f,c
  2890  0023E4  2A59               	incf	(_hours+1)^0,f,c
  2891                           
  2892                           ; BSR set to: 1
  2893                           ;HW2.c: 234: if (hours>=9){hours=0;
  2894  0023E6  BE59               	btfsc	(_hours+1)^0,7,c
  2895  0023E8  0012               	return	
  2896  0023EA  5059               	movf	(_hours+1)^0,w,c
  2897  0023EC  E104               	bnz	u7320
  2898  0023EE  0E09               	movlw	9
  2899  0023F0  5C58               	subwf	_hours^0,w,c
  2900  0023F2  A0D8               	btfss	status,0,c
  2901  0023F4  0012               	return	
  2902  0023F6                     u7320:
  2903                           
  2904                           ; BSR set to: 1
  2905  0023F6  0E00               	movlw	0
  2906  0023F8  6E59               	movwf	(_hours+1)^0,c
  2907  0023FA  0E00               	movlw	0
  2908  0023FC  6E58               	movwf	_hours^0,c
  2909                           
  2910                           ; BSR set to: 1
  2911  0023FE  0012               	return		;funcret
  2912  002400                     __end_of_increment10SClock:
  2913                           	callstack 0
  2914                           
  2915 ;; *************** function _increment10MinClock *****************
  2916 ;; Defined at:
  2917 ;;		line 293 in file "HW2.c"
  2918 ;; Parameters:    Size  Location     Type
  2919 ;;		None
  2920 ;; Auto vars:     Size  Location     Type
  2921 ;;		None
  2922 ;; Return value:  Size  Location     Type
  2923 ;;                  1    wreg      void 
  2924 ;; Registers used:
  2925 ;;		wreg, status,2, status,0
  2926 ;; Tracked objects:
  2927 ;;		On entry : 3F/1
  2928 ;;		On exit  : 3F/1
  2929 ;;		Unchanged: 3F/0
  2930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2935 ;;Total ram usage:        0 bytes
  2936 ;; Hardware stack levels used:    1
  2937 ;; Hardware stack levels required when called:    5
  2938 ;; This function calls:
  2939 ;;		Nothing
  2940 ;; This function is called by:
  2941 ;;		_main
  2942 ;; This function uses a non-reentrant model
  2943 ;;
  2944                           
  2945                           	psect	text13
  2946  002570                     __ptext13:
  2947                           	callstack 0
  2948  002570                     _increment10MinClock:
  2949                           	callstack 25
  2950                           
  2951                           ; BSR set to: 1
  2952                           ;HW2.c: 294: minutes+=10;
  2953                           
  2954                           ; BSR set to: 1
  2955                           ;incstack = 0
  2956  002570  0E0A               	movlw	10
  2957  002572  2649               	addwf	_minutes^0,f,c
  2958  002574  0E00               	movlw	0
  2959  002576  224A               	addwfc	(_minutes+1)^0,f,c
  2960                           
  2961                           ;HW2.c: 295: if (minutes>=59){
  2962  002578  BE4A               	btfsc	(_minutes+1)^0,7,c
  2963  00257A  0012               	return	
  2964  00257C  504A               	movf	(_minutes+1)^0,w,c
  2965  00257E  E104               	bnz	u7400
  2966  002580  0E3B               	movlw	59
  2967  002582  5C49               	subwf	_minutes^0,w,c
  2968  002584  A0D8               	btfss	status,0,c
  2969  002586  0012               	return	
  2970  002588                     u7400:
  2971                           
  2972                           ; BSR set to: 1
  2973                           ;HW2.c: 296: minutes=minutes-60;
  2974  002588  0EC4               	movlw	196
  2975  00258A  2449               	addwf	_minutes^0,w,c
  2976  00258C  6E49               	movwf	_minutes^0,c
  2977  00258E  0EFF               	movlw	255
  2978  002590  204A               	addwfc	(_minutes+1)^0,w,c
  2979  002592  6E4A               	movwf	(_minutes+1)^0,c
  2980                           
  2981                           ; BSR set to: 1
  2982                           ;HW2.c: 297: hours+=1;
  2983  002594  4A58               	infsnz	_hours^0,f,c
  2984  002596  2A59               	incf	(_hours+1)^0,f,c
  2985                           
  2986                           ; BSR set to: 1
  2987                           ;HW2.c: 298: if (hours>9){
  2988  002598  BE59               	btfsc	(_hours+1)^0,7,c
  2989  00259A  0012               	return	
  2990  00259C  5059               	movf	(_hours+1)^0,w,c
  2991  00259E  E104               	bnz	u7410
  2992  0025A0  0E0A               	movlw	10
  2993  0025A2  5C58               	subwf	_hours^0,w,c
  2994  0025A4  A0D8               	btfss	status,0,c
  2995  0025A6  0012               	return	
  2996  0025A8                     u7410:
  2997                           
  2998                           ; BSR set to: 1
  2999                           ;HW2.c: 299: seconds=0;
  3000  0025A8  0E00               	movlw	0
  3001  0025AA  6E5B               	movwf	(_seconds+1)^0,c
  3002  0025AC  0E00               	movlw	0
  3003  0025AE  6E5A               	movwf	_seconds^0,c
  3004                           
  3005                           ;HW2.c: 301: minutes=0;
  3006  0025B0  0E00               	movlw	0
  3007  0025B2  6E4A               	movwf	(_minutes+1)^0,c
  3008  0025B4  0E00               	movlw	0
  3009  0025B6  6E49               	movwf	_minutes^0,c
  3010                           
  3011                           ;HW2.c: 303: hours =0 ;
  3012  0025B8  0E00               	movlw	0
  3013  0025BA  6E59               	movwf	(_hours+1)^0,c
  3014  0025BC  0E00               	movlw	0
  3015  0025BE  6E58               	movwf	_hours^0,c
  3016                           
  3017                           ; BSR set to: 1
  3018  0025C0  0012               	return		;funcret
  3019  0025C2                     __end_of_increment10MinClock:
  3020                           	callstack 0
  3021                           
  3022 ;; *************** function _display *****************
  3023 ;; Defined at:
  3024 ;;		line 368 in file "HW2.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;		None
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;  LCDP           64   64[BANK1 ] unsigned char [64]
  3029 ;;  LCD            64    0[BANK1 ] unsigned char [64]
  3030 ;;  Buffer2        32  192[BANK1 ] unsigned char [32]
  3031 ;;  Buffer1        32  160[BANK1 ] unsigned char [32]
  3032 ;;  Buffer         32  128[BANK1 ] unsigned char [32]
  3033 ;;  H               1    0        unsigned char 
  3034 ;;  C               1    0        unsigned char 
  3035 ;; Return value:  Size  Location     Type
  3036 ;;                  1    wreg      void 
  3037 ;; Registers used:
  3038 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3039 ;; Tracked objects:
  3040 ;;		On entry : 0/0
  3041 ;;		On exit  : 0/0
  3042 ;;		Unchanged: 0/0
  3043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;      Locals:         0       0     225       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;      Totals:         0       2     225       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3048 ;;Total ram usage:      227 bytes
  3049 ;; Hardware stack levels used:    1
  3050 ;; Hardware stack levels required when called:   11
  3051 ;; This function calls:
  3052 ;;		_lcd_gotoxy
  3053 ;;		_lcd_puts
  3054 ;;		_sprintf
  3055 ;; This function is called by:
  3056 ;;		_main
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           	psect	text14
  3061  00116C                     __ptext14:
  3062                           	callstack 0
  3063  00116C                     _display:
  3064                           	callstack 19
  3065                           
  3066                           ;HW2.c: 369: char LCD[64];;HW2.c: 370: char LCDP[64];;HW2.c: 371: char Buffer1[32];;HW2.
      +                          c: 372: char Buffer2[32];;HW2.c: 373: char Buffer[32];;HW2.c: 375: unsigned char C, H;;H
      +                          W2.c: 376: if(mode==4){
  3067                           
  3068                           ; BSR set to: 1
  3069                           ;incstack = 0
  3070  00116C  0E04               	movlw	4
  3071  00116E  0101               	movlb	1	; () banked
  3072  001170  19E0               	xorwf	_mode& (0+255),w,b
  3073  001172  11E1               	iorwf	(_mode+1)& (0+255),w,b
  3074  001174  B4D8               	btfsc	status,2,c
  3075  001176  D021               	goto	l6150
  3076                           
  3077                           ; BSR set to: 1
  3078                           ;HW2.c: 381: else if(PORTCbits.RC5 == 1){
  3079                           
  3080                           ; BSR set to: 1
  3081                           ;HW2.c: 379: }
  3082  001178  AA82               	btfss	130,5,c	;volatile
  3083  00117A  D010               	goto	l6148
  3084                           
  3085                           ; BSR set to: 1
  3086                           ;HW2.c: 384: sprintf(Buffer1, " HT:%s", "ON   ");
  3087  00117C  0EA0               	movlw	low display@Buffer1
  3088  00117E  0100               	movlb	0	; () banked
  3089  001180  6FA5               	movwf	sprintf@sp& (0+255),b
  3090  001182  0E01               	movlw	high display@Buffer1
  3091  001184  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  3092  001186  0EEC               	movlw	low STR_1
  3093  001188  6FA7               	movwf	sprintf@f& (0+255),b
  3094  00118A  0EFF               	movlw	high STR_1
  3095  00118C  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  3096  00118E  0EF3               	movlw	low STR_2
  3097  001190  6FA9               	movwf	(?_sprintf+4)& (0+255),b
  3098  001192  0EFF               	movlw	high STR_2
  3099  001194  6FAA               	movwf	(?_sprintf+5)& (0+255),b
  3100  001196  EC09  F000         	call	_sprintf	;wreg free
  3101                           
  3102                           ;HW2.c: 387: }
  3103  00119A  D00F               	goto	l6150
  3104  00119C                     l6148:
  3105                           
  3106                           ; BSR set to: 1
  3107                           ;HW2.c: 388: else{;HW2.c: 390: sprintf(Buffer1, " HT:%s", "OFF   ");
  3108  00119C  0EA0               	movlw	low display@Buffer1
  3109  00119E  0100               	movlb	0	; () banked
  3110  0011A0  6FA5               	movwf	sprintf@sp& (0+255),b
  3111  0011A2  0E01               	movlw	high display@Buffer1
  3112  0011A4  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  3113  0011A6  0EEC               	movlw	low STR_1
  3114  0011A8  6FA7               	movwf	sprintf@f& (0+255),b
  3115  0011AA  0EFF               	movlw	high STR_1
  3116  0011AC  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  3117  0011AE  0EDE               	movlw	low STR_4
  3118  0011B0  6FA9               	movwf	(?_sprintf+4)& (0+255),b
  3119  0011B2  0EFF               	movlw	high STR_4
  3120  0011B4  6FAA               	movwf	(?_sprintf+5)& (0+255),b
  3121  0011B6  EC09  F000         	call	_sprintf	;wreg free
  3122  0011BA                     l6150:
  3123                           
  3124                           ;HW2.c: 393: };HW2.c: 395: if(PORTCbits.RC5 == 1){
  3125  0011BA  AA82               	btfss	130,5,c	;volatile
  3126  0011BC  D010               	goto	l6154
  3127                           
  3128                           ;HW2.c: 398: sprintf(Buffer2, " CK:%s", "ON   ");
  3129  0011BE  0EC0               	movlw	low display@Buffer2
  3130  0011C0  0100               	movlb	0	; () banked
  3131  0011C2  6FA5               	movwf	sprintf@sp& (0+255),b
  3132  0011C4  0E01               	movlw	high display@Buffer2
  3133  0011C6  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  3134  0011C8  0EE5               	movlw	low STR_5
  3135  0011CA  6FA7               	movwf	sprintf@f& (0+255),b
  3136  0011CC  0EFF               	movlw	high STR_5
  3137  0011CE  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  3138  0011D0  0EF3               	movlw	low STR_2
  3139  0011D2  6FA9               	movwf	(?_sprintf+4)& (0+255),b
  3140  0011D4  0EFF               	movlw	high STR_2
  3141  0011D6  6FAA               	movwf	(?_sprintf+5)& (0+255),b
  3142  0011D8  EC09  F000         	call	_sprintf	;wreg free
  3143                           
  3144                           ;HW2.c: 400: }
  3145  0011DC  D047               	goto	l6168
  3146  0011DE                     l6154:
  3147                           
  3148                           ;HW2.c: 401: else{;HW2.c: 402: sprintf(Buffer2, " CK:%s", "OFF  ");
  3149  0011DE  0EC0               	movlw	low display@Buffer2
  3150  0011E0  0100               	movlb	0	; () banked
  3151  0011E2  6FA5               	movwf	sprintf@sp& (0+255),b
  3152  0011E4  0E01               	movlw	high display@Buffer2
  3153  0011E6  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  3154  0011E8  0EE5               	movlw	low STR_5
  3155  0011EA  6FA7               	movwf	sprintf@f& (0+255),b
  3156  0011EC  0EFF               	movlw	high STR_5
  3157  0011EE  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  3158  0011F0  0EF9               	movlw	low STR_8
  3159  0011F2  6FA9               	movwf	(?_sprintf+4)& (0+255),b
  3160  0011F4  0EFF               	movlw	high STR_8
  3161  0011F6  6FAA               	movwf	(?_sprintf+5)& (0+255),b
  3162  0011F8  EC09  F000         	call	_sprintf	;wreg free
  3163  0011FC  D037               	goto	l6168
  3164  0011FE                     l6156:
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;HW2.c: 408: sprintf(LCDP, "  SEC           ");
  3168  0011FE  0E40               	movlw	low display@LCDP
  3169  001200  6FA5               	movwf	sprintf@sp& (0+255),b
  3170  001202  0E01               	movlw	high display@LCDP
  3171  001204  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  3172  001206  0E78               	movlw	low STR_9
  3173  001208  6FA7               	movwf	sprintf@f& (0+255),b
  3174  00120A  0EFF               	movlw	high STR_9
  3175  00120C  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  3176  00120E  EC09  F000         	call	_sprintf	;wreg free
  3177                           
  3178                           ;HW2.c: 409: break;
  3179  001212  D044               	goto	l6170
  3180  001214                     l6158:
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;HW2.c: 412: sprintf(LCDP, "  10 SEC          ");
  3184  001214  0E40               	movlw	low display@LCDP
  3185  001216  6FA5               	movwf	sprintf@sp& (0+255),b
  3186  001218  0E01               	movlw	high display@LCDP
  3187  00121A  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  3188  00121C  0E65               	movlw	low STR_10
  3189  00121E  6FA7               	movwf	sprintf@f& (0+255),b
  3190  001220  0EFF               	movlw	high STR_10
  3191  001222  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  3192  001224  EC09  F000         	call	_sprintf	;wreg free
  3193                           
  3194                           ;HW2.c: 413: break;
  3195  001228  D039               	goto	l6170
  3196  00122A                     l6160:
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;HW2.c: 415: sprintf(LCDP, "  MIN          ");
  3200  00122A  0E40               	movlw	low display@LCDP
  3201  00122C  6FA5               	movwf	sprintf@sp& (0+255),b
  3202  00122E  0E01               	movlw	high display@LCDP
  3203  001230  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  3204  001232  0E89               	movlw	low STR_11
  3205  001234  6FA7               	movwf	sprintf@f& (0+255),b
  3206  001236  0EFF               	movlw	high STR_11
  3207  001238  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  3208  00123A  EC09  F000         	call	_sprintf	;wreg free
  3209                           
  3210                           ;HW2.c: 416: break;
  3211  00123E  D02E               	goto	l6170
  3212  001240                     l6162:
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;HW2.c: 418: sprintf(LCDP, "  10 MIN      ");
  3216  001240  0E40               	movlw	low display@LCDP
  3217  001242  6FA5               	movwf	sprintf@sp& (0+255),b
  3218  001244  0E01               	movlw	high display@LCDP
  3219  001246  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  3220  001248  0E99               	movlw	low STR_12
  3221  00124A  6FA7               	movwf	sprintf@f& (0+255),b
  3222  00124C  0EFF               	movlw	high STR_12
  3223  00124E  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  3224  001250  EC09  F000         	call	_sprintf	;wreg free
  3225                           
  3226                           ;HW2.c: 419: break;
  3227  001254  D023               	goto	l6170
  3228  001256                     l6164:
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;HW2.c: 421: sprintf(LCDP, "  HOUR     ");
  3232  001256  0E40               	movlw	low display@LCDP
  3233  001258  6FA5               	movwf	sprintf@sp& (0+255),b
  3234  00125A  0E01               	movlw	high display@LCDP
  3235  00125C  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  3236  00125E  0EB6               	movlw	low STR_13
  3237  001260  6FA7               	movwf	sprintf@f& (0+255),b
  3238  001262  0EFF               	movlw	high STR_13
  3239  001264  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  3240  001266  EC09  F000         	call	_sprintf	;wreg free
  3241                           
  3242                           ;HW2.c: 422: break;
  3243  00126A  D018               	goto	l6170
  3244  00126C                     l6168:
  3245                           
  3246                           ; BSR set to: 0
  3247  00126C  C1E0  F0D1         	movff	_mode,??_display
  3248  001270  C1E1  F0D2         	movff	_mode+1,??_display+1
  3249                           
  3250                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3251                           ; Switch size 1, requested type "simple"
  3252                           ; Number of cases is 1, Range of values is 0 to 0
  3253                           ; switch strategies available:
  3254                           ; Name         Instructions Cycles
  3255                           ; simple_byte            4     3 (average)
  3256                           ;	Chosen strategy is simple_byte
  3257  001274  51D2               	movf	(??_display+1)& (0+255),w,b
  3258  001276  0A00               	xorlw	0	; case 0
  3259  001278  A4D8               	btfss	status,2,c
  3260  00127A  D010               	goto	l6170
  3261                           
  3262                           ; BSR set to: 0
  3263                           ; Switch size 1, requested type "simple"
  3264                           ; Number of cases is 5, Range of values is 0 to 4
  3265                           ; switch strategies available:
  3266                           ; Name         Instructions Cycles
  3267                           ; simple_byte           16     9 (average)
  3268                           ;	Chosen strategy is simple_byte
  3269  00127C  51D1               	movf	??_display& (0+255),w,b
  3270  00127E  0A00               	xorlw	0	; case 0
  3271  001280  B4D8               	btfsc	status,2,c
  3272  001282  D7BD               	goto	l6156
  3273  001284  0A01               	xorlw	1	; case 1
  3274  001286  B4D8               	btfsc	status,2,c
  3275  001288  D7C5               	goto	l6158
  3276  00128A  0A03               	xorlw	3	; case 2
  3277  00128C  B4D8               	btfsc	status,2,c
  3278  00128E  D7CD               	goto	l6160
  3279  001290  0A01               	xorlw	1	; case 3
  3280  001292  B4D8               	btfsc	status,2,c
  3281  001294  D7D5               	goto	l6162
  3282  001296  0A07               	xorlw	7	; case 4
  3283  001298  B4D8               	btfsc	status,2,c
  3284  00129A  D7DD               	goto	l6164
  3285  00129C                     l6170:
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;HW2.c: 428: lcd_gotoxy(1, 1);
  3289  00129C  0E01               	movlw	1
  3290  00129E  6E2E               	movwf	lcd_gotoxy@y^0,c
  3291  0012A0  0E01               	movlw	1
  3292  0012A2  EC96  F013         	call	_lcd_gotoxy
  3293                           
  3294                           ;HW2.c: 429: sprintf(Buffer, "Time : %02d:%02d:%02d", hours, minutes, seconds);
  3295  0012A6  0E80               	movlw	low display@Buffer
  3296  0012A8  0100               	movlb	0	; () banked
  3297  0012AA  6FA5               	movwf	sprintf@sp& (0+255),b
  3298  0012AC  0E01               	movlw	high display@Buffer
  3299  0012AE  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  3300  0012B0  0E4F               	movlw	low STR_14
  3301  0012B2  6FA7               	movwf	sprintf@f& (0+255),b
  3302  0012B4  0EFF               	movlw	high STR_14
  3303  0012B6  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  3304  0012B8  C058  F0A9         	movff	_hours,?_sprintf+4
  3305  0012BC  C059  F0AA         	movff	_hours+1,?_sprintf+5
  3306  0012C0  C049  F0AB         	movff	_minutes,?_sprintf+6
  3307  0012C4  C04A  F0AC         	movff	_minutes+1,?_sprintf+7
  3308  0012C8  C05A  F0AD         	movff	_seconds,?_sprintf+8
  3309  0012CC  C05B  F0AE         	movff	_seconds+1,?_sprintf+9
  3310  0012D0  EC09  F000         	call	_sprintf	;wreg free
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;HW2.c: 430: lcd_puts(Buffer);
  3314  0012D4  0E80               	movlw	low display@Buffer
  3315  0012D6  6E32               	movwf	lcd_puts@s^0,c
  3316  0012D8  0E01               	movlw	high display@Buffer
  3317  0012DA  6E33               	movwf	(lcd_puts@s+1)^0,c
  3318  0012DC  ECFF  F014         	call	_lcd_puts	;wreg free
  3319                           
  3320                           ;HW2.c: 435: lcd_gotoxy(1, 2);
  3321  0012E0  0E02               	movlw	2
  3322  0012E2  6E2E               	movwf	lcd_gotoxy@y^0,c
  3323  0012E4  0E01               	movlw	1
  3324  0012E6  EC96  F013         	call	_lcd_gotoxy
  3325                           
  3326                           ;HW2.c: 436: sprintf(LCD, "TMP:%3.1fC   ", temp);
  3327  0012EA  0E00               	movlw	low display@LCD
  3328  0012EC  0100               	movlb	0	; () banked
  3329  0012EE  6FA5               	movwf	sprintf@sp& (0+255),b
  3330  0012F0  0E01               	movlw	high display@LCD
  3331  0012F2  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  3332  0012F4  0EA8               	movlw	low STR_15
  3333  0012F6  6FA7               	movwf	sprintf@f& (0+255),b
  3334  0012F8  0EFF               	movlw	high STR_15
  3335  0012FA  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  3336  0012FC  C042  F0A9         	movff	_temp,?_sprintf+4
  3337  001300  C043  F0AA         	movff	_temp+1,?_sprintf+5
  3338  001304  C044  F0AB         	movff	_temp+2,?_sprintf+6
  3339  001308  EC09  F000         	call	_sprintf	;wreg free
  3340                           
  3341                           ;HW2.c: 437: lcd_puts(LCD);
  3342  00130C  0E00               	movlw	low display@LCD
  3343  00130E  6E32               	movwf	lcd_puts@s^0,c
  3344  001310  0E01               	movlw	high display@LCD
  3345  001312  6E33               	movwf	(lcd_puts@s+1)^0,c
  3346  001314  ECFF  F014         	call	_lcd_puts	;wreg free
  3347                           
  3348                           ;HW2.c: 439: lcd_gotoxy(1, 3);
  3349  001318  0E03               	movlw	3
  3350  00131A  6E2E               	movwf	lcd_gotoxy@y^0,c
  3351  00131C  0E01               	movlw	1
  3352  00131E  EC96  F013         	call	_lcd_gotoxy
  3353                           
  3354                           ;HW2.c: 440: sprintf(LCD, "SP :%3.1fC",sp);
  3355  001322  0E00               	movlw	low display@LCD
  3356  001324  0100               	movlb	0	; () banked
  3357  001326  6FA5               	movwf	sprintf@sp& (0+255),b
  3358  001328  0E01               	movlw	high display@LCD
  3359  00132A  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  3360  00132C  0EC2               	movlw	low STR_16
  3361  00132E  6FA7               	movwf	sprintf@f& (0+255),b
  3362  001330  0EFF               	movlw	high STR_16
  3363  001332  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  3364  001334  C03F  F0A9         	movff	_sp,?_sprintf+4
  3365  001338  C040  F0AA         	movff	_sp+1,?_sprintf+5
  3366  00133C  C041  F0AB         	movff	_sp+2,?_sprintf+6
  3367  001340  EC09  F000         	call	_sprintf	;wreg free
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;HW2.c: 441: lcd_puts(LCD);
  3371  001344  0E00               	movlw	low display@LCD
  3372  001346  6E32               	movwf	lcd_puts@s^0,c
  3373  001348  0E01               	movlw	high display@LCD
  3374  00134A  6E33               	movwf	(lcd_puts@s+1)^0,c
  3375  00134C  ECFF  F014         	call	_lcd_puts	;wreg free
  3376                           
  3377                           ;HW2.c: 443: lcd_gotoxy(10, 2);
  3378  001350  0E02               	movlw	2
  3379  001352  6E2E               	movwf	lcd_gotoxy@y^0,c
  3380  001354  0E0A               	movlw	10
  3381  001356  EC96  F013         	call	_lcd_gotoxy
  3382                           
  3383                           ;HW2.c: 444: lcd_puts(Buffer1);
  3384  00135A  0EA0               	movlw	low display@Buffer1
  3385  00135C  6E32               	movwf	lcd_puts@s^0,c
  3386  00135E  0E01               	movlw	high display@Buffer1
  3387  001360  6E33               	movwf	(lcd_puts@s+1)^0,c
  3388  001362  ECFF  F014         	call	_lcd_puts	;wreg free
  3389                           
  3390                           ;HW2.c: 446: lcd_gotoxy(10, 3);
  3391  001366  0E03               	movlw	3
  3392  001368  6E2E               	movwf	lcd_gotoxy@y^0,c
  3393  00136A  0E0A               	movlw	10
  3394  00136C  EC96  F013         	call	_lcd_gotoxy
  3395                           
  3396                           ;HW2.c: 447: lcd_puts(Buffer2);
  3397  001370  0EC0               	movlw	low display@Buffer2
  3398  001372  6E32               	movwf	lcd_puts@s^0,c
  3399  001374  0E01               	movlw	high display@Buffer2
  3400  001376  6E33               	movwf	(lcd_puts@s+1)^0,c
  3401  001378  ECFF  F014         	call	_lcd_puts	;wreg free
  3402                           
  3403                           ;HW2.c: 454: lcd_gotoxy(1, 4);
  3404  00137C  0E04               	movlw	4
  3405  00137E  6E2E               	movwf	lcd_gotoxy@y^0,c
  3406  001380  0E01               	movlw	1
  3407  001382  EC96  F013         	call	_lcd_gotoxy
  3408                           
  3409                           ;HW2.c: 455: sprintf(LCD, "MD :     ");
  3410  001386  0E00               	movlw	low display@LCD
  3411  001388  0100               	movlb	0	; () banked
  3412  00138A  6FA5               	movwf	sprintf@sp& (0+255),b
  3413  00138C  0E01               	movlw	high display@LCD
  3414  00138E  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  3415  001390  0ECD               	movlw	low STR_17
  3416  001392  6FA7               	movwf	sprintf@f& (0+255),b
  3417  001394  0EFF               	movlw	high STR_17
  3418  001396  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  3419  001398  EC09  F000         	call	_sprintf	;wreg free
  3420                           
  3421                           ; BSR set to: 0
  3422                           ;HW2.c: 456: lcd_puts(LCD);
  3423  00139C  0E00               	movlw	low display@LCD
  3424  00139E  6E32               	movwf	lcd_puts@s^0,c
  3425  0013A0  0E01               	movlw	high display@LCD
  3426  0013A2  6E33               	movwf	(lcd_puts@s+1)^0,c
  3427  0013A4  ECFF  F014         	call	_lcd_puts	;wreg free
  3428                           
  3429                           ;HW2.c: 458: lcd_gotoxy(3, 4);
  3430  0013A8  0E04               	movlw	4
  3431  0013AA  6E2E               	movwf	lcd_gotoxy@y^0,c
  3432  0013AC  0E03               	movlw	3
  3433  0013AE  EC96  F013         	call	_lcd_gotoxy
  3434                           
  3435                           ;HW2.c: 459: lcd_puts(LCDP);
  3436  0013B2  0E40               	movlw	low display@LCDP
  3437  0013B4  6E32               	movwf	lcd_puts@s^0,c
  3438  0013B6  0E01               	movlw	high display@LCDP
  3439  0013B8  6E33               	movwf	(lcd_puts@s+1)^0,c
  3440  0013BA  ECFF  F014         	call	_lcd_puts	;wreg free
  3441  0013BE  0012               	return		;funcret
  3442  0013C0                     __end_of_display:
  3443                           	callstack 0
  3444                           
  3445 ;; *************** function _sprintf *****************
  3446 ;; Defined at:
  3447 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;  sp              2   37[BANK0 ] PTR unsigned char 
  3450 ;;		 -> display@LCD(64), display@Buffer(32), display@LCDP(64), display@Buffer2(32), 
  3451 ;;		 -> display@Buffer1(32), 
  3452 ;;  f               2   39[BANK0 ] PTR const unsigned char 
  3453 ;;		 -> STR_17(10), STR_16(11), STR_15(14), STR_14(22), 
  3454 ;;		 -> STR_13(12), STR_12(15), STR_11(16), STR_10(19), 
  3455 ;;		 -> STR_9(17), STR_7(7), STR_5(7), STR_3(7), 
  3456 ;;		 -> STR_1(7), 
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;  val             4   65[BANK0 ] unsigned long 
  3459 ;;  tmpval          4   61[BANK0 ] struct .
  3460 ;;  fval            3   73[BANK0 ] struct .
  3461 ;;  prec            2   78[BANK0 ] int 
  3462 ;;  width           2   76[BANK0 ] int 
  3463 ;;  flag            2   71[BANK0 ] unsigned short 
  3464 ;;  eexp            2   69[BANK0 ] int 
  3465 ;;  len             2   59[BANK0 ] unsigned int 
  3466 ;;  cp              2   56[BANK0 ] PTR const unsigned char 
  3467 ;;		 -> STR_18(7), ?_sprintf(2), STR_8(6), STR_6(6), 
  3468 ;;		 -> STR_4(7), STR_2(6), 
  3469 ;;  c               1   80[BANK0 ] unsigned char 
  3470 ;;  ap              1   58[BANK0 ] PTR void [1]
  3471 ;;		 -> ?_sprintf(2), 
  3472 ;;  d               1    0        unsigned char 
  3473 ;; Return value:  Size  Location     Type
  3474 ;;                  2   37[BANK0 ] int 
  3475 ;; Registers used:
  3476 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3477 ;; Tracked objects:
  3478 ;;		On entry : 3F/0
  3479 ;;		On exit  : 3F/0
  3480 ;;		Unchanged: 0/0
  3481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3482 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;      Locals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;      Totals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;Total ram usage:       44 bytes
  3487 ;; Hardware stack levels used:    1
  3488 ;; Hardware stack levels required when called:    8
  3489 ;; This function calls:
  3490 ;;		___awdiv
  3491 ;;		___ftadd
  3492 ;;		___ftge
  3493 ;;		___ftmul
  3494 ;;		___ftneg
  3495 ;;		___ftsub
  3496 ;;		___fttol
  3497 ;;		___lldiv
  3498 ;;		___llmod
  3499 ;;		___lltoft
  3500 ;;		___wmul
  3501 ;;		__div_to_l_
  3502 ;;		__tdiv_to_l_
  3503 ;;		_fround
  3504 ;;		_isdigit
  3505 ;;		_scale
  3506 ;; This function is called by:
  3507 ;;		_display
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511                           	psect	text15
  3512  000012                     __ptext15:
  3513                           	callstack 0
  3514  000012                     _sprintf:
  3515                           	callstack 21
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          17: int prec;;doprnt.c: 525: unsigned short flag;;doprnt.c: 532: char d;;doprnt.c: 533: 
      +                          double fval;;doprnt.c: 534: int eexp;;doprnt.c: 540: union {;doprnt.c: 541: unsigned lon
      +                          g vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned long
      +                           val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = 
      +                          __va_start();
  3519                           
  3520                           ;incstack = 0
  3521  000012  0EA9               	movlw	low (?_sprintf+4)
  3522  000014  6FBA               	movwf	sprintf@ap& (0+255),b
  3523                           
  3524                           ;doprnt.c: 553: while((c = *f++)) {
  3525  000016  EF98  F005         	goto	u7140
  3526  00001A                     l5532:
  3527                           
  3528                           ; BSR set to: 0
  3529                           ;doprnt.c: 555: if(c != '%')
  3530  00001A  0E25               	movlw	37
  3531  00001C  19D0               	xorwf	sprintf@c& (0+255),w,b
  3532  00001E  B4D8               	btfsc	status,2,c
  3533  000020  D00A               	goto	l5538
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  3537  000022  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  3538  000026  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  3539  00002A  C0D0  FFDF         	movff	sprintf@c,indf2
  3540                           
  3541                           ; BSR set to: 0
  3542  00002E  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  3543  000030  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  3544                           
  3545                           ;doprnt.c: 559: continue;
  3546  000032  EF98  F005         	goto	u7140
  3547  000036                     l5538:
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
  3551  000036  0E00               	movlw	0
  3552  000038  6FCD               	movwf	(sprintf@width+1)& (0+255),b
  3553  00003A  0E00               	movlw	0
  3554  00003C  6FCC               	movwf	sprintf@width& (0+255),b
  3555                           
  3556                           ;doprnt.c: 565: flag = 0;
  3557  00003E  0E00               	movlw	0
  3558  000040  6FC8               	movwf	(sprintf@flag+1)& (0+255),b
  3559  000042  0E00               	movlw	0
  3560  000044  6FC7               	movwf	sprintf@flag& (0+255),b
  3561  000046  D003               	goto	l5544
  3562  000048                     l5540:
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;doprnt.c: 597: flag |= 0x04;
  3566  000048  85C7               	bsf	sprintf@flag& (0+255),2,b
  3567                           
  3568                           ;doprnt.c: 598: f++;
  3569  00004A  4BA7               	infsnz	sprintf@f& (0+255),f,b
  3570  00004C  2BA8               	incf	(sprintf@f+1)& (0+255),f,b
  3571  00004E                     l5544:
  3572                           
  3573                           ; BSR set to: 0
  3574  00004E  C0A7  FFF6         	movff	sprintf@f,tblptrl
  3575  000052  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  3576  000056                     	if	0	;tblptru may be non-zero
  3577  000056                     	endif
  3578  000056                     	if	0	;tblptru may be non-zero
  3579  000056                     	endif
  3580  000056  0008               	tblrd		*
  3581  000058  50F5               	movf	tablat,w,c
  3582                           
  3583                           ; Switch size 1, requested type "simple"
  3584                           ; Number of cases is 1, Range of values is 48 to 48
  3585                           ; switch strategies available:
  3586                           ; Name         Instructions Cycles
  3587                           ; simple_byte            4     3 (average)
  3588                           ;	Chosen strategy is simple_byte
  3589  00005A  0A30               	xorlw	48	; case 48
  3590  00005C  B4D8               	btfsc	status,2,c
  3591  00005E  D7F4               	goto	l5540
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
  3595  000060  C0A7  FFF6         	movff	sprintf@f,tblptrl
  3596  000064  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  3597  000068                     	if	0	;tblptru may be non-zero
  3598  000068                     	endif
  3599  000068                     	if	0	;tblptru may be non-zero
  3600  000068                     	endif
  3601  000068  0008               	tblrd		*
  3602  00006A  50F5               	movf	tablat,w,c
  3603  00006C  EC31  F015         	call	_isdigit
  3604  000070  A0D8               	btfss	status,0,c
  3605  000072  D034               	goto	u6540
  3606                           
  3607                           ;doprnt.c: 615: width = 0;
  3608  000074  0E00               	movlw	0
  3609  000076  0100               	movlb	0	; () banked
  3610  000078  6FCD               	movwf	(sprintf@width+1)& (0+255),b
  3611  00007A  0E00               	movlw	0
  3612  00007C  6FCC               	movwf	sprintf@width& (0+255),b
  3613  00007E                     l5550:
  3614                           
  3615                           ;doprnt.c: 617: width *= 10;
  3616  00007E  C0CC  F024         	movff	sprintf@width,___wmul@multiplier
  3617  000082  C0CD  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  3618  000086  0E00               	movlw	0
  3619  000088  6E27               	movwf	(___wmul@multiplicand+1)^0,c
  3620  00008A  0E0A               	movlw	10
  3621  00008C  6E26               	movwf	___wmul@multiplicand^0,c
  3622  00008E  ECC7  F014         	call	___wmul	;wreg free
  3623  000092  C024  F0CC         	movff	?___wmul,sprintf@width
  3624  000096  C025  F0CD         	movff	?___wmul+1,sprintf@width+1
  3625                           
  3626                           ;doprnt.c: 618: width += *f++ - '0';
  3627  00009A  0ED0               	movlw	208
  3628  00009C  0100               	movlb	0	; () banked
  3629  00009E  6FAF               	movwf	??_sprintf& (0+255),b
  3630  0000A0  0EFF               	movlw	255
  3631  0000A2  6FB0               	movwf	(??_sprintf+1)& (0+255),b
  3632  0000A4  C0A7  FFF6         	movff	sprintf@f,tblptrl
  3633  0000A8  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  3634  0000AC                     	if	0	;tblptru may be non-zero
  3635  0000AC                     	endif
  3636  0000AC                     	if	0	;tblptru may be non-zero
  3637  0000AC                     	endif
  3638  0000AC  0008               	tblrd		*
  3639  0000AE  50F5               	movf	tablat,w,c
  3640  0000B0  6FB1               	movwf	(??_sprintf+2)& (0+255),b
  3641  0000B2  6BB2               	clrf	(??_sprintf+3)& (0+255),b
  3642  0000B4  51AF               	movf	??_sprintf& (0+255),w,b
  3643  0000B6  27B1               	addwf	(??_sprintf+2)& (0+255),f,b
  3644  0000B8  51B0               	movf	(??_sprintf+1)& (0+255),w,b
  3645  0000BA  23B2               	addwfc	(??_sprintf+3)& (0+255),f,b
  3646  0000BC  51B1               	movf	(??_sprintf+2)& (0+255),w,b
  3647  0000BE  27CC               	addwf	sprintf@width& (0+255),f,b
  3648  0000C0  51B2               	movf	(??_sprintf+3)& (0+255),w,b
  3649  0000C2  23CD               	addwfc	(sprintf@width+1)& (0+255),f,b
  3650                           
  3651                           ; BSR set to: 0
  3652  0000C4  4BA7               	infsnz	sprintf@f& (0+255),f,b
  3653  0000C6  2BA8               	incf	(sprintf@f+1)& (0+255),f,b
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
  3657  0000C8  C0A7  FFF6         	movff	sprintf@f,tblptrl
  3658  0000CC  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  3659  0000D0                     	if	0	;tblptru may be non-zero
  3660  0000D0                     	endif
  3661  0000D0                     	if	0	;tblptru may be non-zero
  3662  0000D0                     	endif
  3663  0000D0  0008               	tblrd		*
  3664  0000D2  50F5               	movf	tablat,w,c
  3665  0000D4  EC31  F015         	call	_isdigit
  3666  0000D8  B0D8               	btfsc	status,0,c
  3667  0000DA  D7D1               	goto	l5550
  3668  0000DC                     u6540:
  3669                           
  3670                           ;doprnt.c: 625: };doprnt.c: 628: if(*f == '.') {
  3671  0000DC  C0A7  FFF6         	movff	sprintf@f,tblptrl
  3672  0000E0  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  3673  0000E4                     	if	0	;tblptru may be non-zero
  3674  0000E4                     	endif
  3675  0000E4                     	if	0	;tblptru may be non-zero
  3676  0000E4                     	endif
  3677  0000E4  0008               	tblrd		*
  3678  0000E6  50F5               	movf	tablat,w,c
  3679  0000E8  0A2E               	xorlw	46
  3680  0000EA  A4D8               	btfss	status,2,c
  3681  0000EC  D039               	goto	l5572
  3682                           
  3683                           ;doprnt.c: 629: flag |= 0x4000;
  3684  0000EE  0100               	movlb	0	; () banked
  3685  0000F0  8DC8               	bsf	(sprintf@flag+1)& (0+255),6,b
  3686                           
  3687                           ;doprnt.c: 630: f++;
  3688  0000F2  4BA7               	infsnz	sprintf@f& (0+255),f,b
  3689  0000F4  2BA8               	incf	(sprintf@f+1)& (0+255),f,b
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;doprnt.c: 644: {;doprnt.c: 645: prec = 0;
  3693  0000F6  0E00               	movlw	0
  3694  0000F8  6FCF               	movwf	(sprintf@prec+1)& (0+255),b
  3695  0000FA  0E00               	movlw	0
  3696  0000FC  6FCE               	movwf	sprintf@prec& (0+255),b
  3697                           
  3698                           ;doprnt.c: 646: while(isdigit((unsigned)*f)) {
  3699  0000FE  D025               	goto	l5570
  3700  000100                     l5564:
  3701                           
  3702                           ;doprnt.c: 647: prec *= 10;
  3703  000100  C0CE  F024         	movff	sprintf@prec,___wmul@multiplier
  3704  000104  C0CF  F025         	movff	sprintf@prec+1,___wmul@multiplier+1
  3705  000108  0E00               	movlw	0
  3706  00010A  6E27               	movwf	(___wmul@multiplicand+1)^0,c
  3707  00010C  0E0A               	movlw	10
  3708  00010E  6E26               	movwf	___wmul@multiplicand^0,c
  3709  000110  ECC7  F014         	call	___wmul	;wreg free
  3710  000114  C024  F0CE         	movff	?___wmul,sprintf@prec
  3711  000118  C025  F0CF         	movff	?___wmul+1,sprintf@prec+1
  3712                           
  3713                           ;doprnt.c: 648: prec += *f++ - '0';
  3714  00011C  0ED0               	movlw	208
  3715  00011E  0100               	movlb	0	; () banked
  3716  000120  6FAF               	movwf	??_sprintf& (0+255),b
  3717  000122  0EFF               	movlw	255
  3718  000124  6FB0               	movwf	(??_sprintf+1)& (0+255),b
  3719  000126  C0A7  FFF6         	movff	sprintf@f,tblptrl
  3720  00012A  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  3721  00012E                     	if	0	;tblptru may be non-zero
  3722  00012E                     	endif
  3723  00012E                     	if	0	;tblptru may be non-zero
  3724  00012E                     	endif
  3725  00012E  0008               	tblrd		*
  3726  000130  50F5               	movf	tablat,w,c
  3727  000132  6FB1               	movwf	(??_sprintf+2)& (0+255),b
  3728  000134  6BB2               	clrf	(??_sprintf+3)& (0+255),b
  3729  000136  51AF               	movf	??_sprintf& (0+255),w,b
  3730  000138  27B1               	addwf	(??_sprintf+2)& (0+255),f,b
  3731  00013A  51B0               	movf	(??_sprintf+1)& (0+255),w,b
  3732  00013C  23B2               	addwfc	(??_sprintf+3)& (0+255),f,b
  3733  00013E  51B1               	movf	(??_sprintf+2)& (0+255),w,b
  3734  000140  27CE               	addwf	sprintf@prec& (0+255),f,b
  3735  000142  51B2               	movf	(??_sprintf+3)& (0+255),w,b
  3736  000144  23CF               	addwfc	(sprintf@prec+1)& (0+255),f,b
  3737                           
  3738                           ; BSR set to: 0
  3739  000146  4BA7               	infsnz	sprintf@f& (0+255),f,b
  3740  000148  2BA8               	incf	(sprintf@f+1)& (0+255),f,b
  3741  00014A                     l5570:
  3742                           
  3743                           ; BSR set to: 0
  3744  00014A  C0A7  FFF6         	movff	sprintf@f,tblptrl
  3745  00014E  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  3746  000152                     	if	0	;tblptru may be non-zero
  3747  000152                     	endif
  3748  000152                     	if	0	;tblptru may be non-zero
  3749  000152                     	endif
  3750  000152  0008               	tblrd		*
  3751  000154  50F5               	movf	tablat,w,c
  3752  000156  EC31  F015         	call	_isdigit
  3753  00015A  A0D8               	btfss	status,0,c
  3754  00015C  D096               	goto	l5620
  3755  00015E  D7D0               	goto	l5564
  3756  000160                     l5572:
  3757                           
  3758                           ;doprnt.c: 652: prec = 0;
  3759  000160  0E00               	movlw	0
  3760  000162  0100               	movlb	0	; () banked
  3761  000164  6FCF               	movwf	(sprintf@prec+1)& (0+255),b
  3762  000166  0E00               	movlw	0
  3763  000168  6FCE               	movwf	sprintf@prec& (0+255),b
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;doprnt.c: 654: flag |= 0x1000;
  3767  00016A  89C8               	bsf	(sprintf@flag+1)& (0+255),4,b
  3768  00016C  D08E               	goto	l5620
  3769  00016E                     l5576:
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;doprnt.c: 689: flag |= 0x400;
  3773  00016E  85C8               	bsf	(sprintf@flag+1)& (0+255),2,b
  3774                           
  3775                           ;doprnt.c: 690: break;
  3776  000170  D0A9               	goto	l5622
  3777  000172                     l5578:
  3778                           
  3779                           ; BSR set to: 0
  3780                           ;doprnt.c: 760: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3781  000172  51BA               	movf	sprintf@ap& (0+255),w,b
  3782  000174  6ED9               	movwf	fsr2l,c
  3783  000176  6ADA               	clrf	fsr2h,c
  3784  000178  CFDE F0B8          	movff	postinc2,sprintf@cp
  3785  00017C  CFDD F0B9          	movff	postdec2,sprintf@cp+1
  3786                           
  3787                           ; BSR set to: 0
  3788  000180  0E02               	movlw	2
  3789  000182  27BA               	addwf	sprintf@ap& (0+255),f,b
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;doprnt.c: 766: if(!cp)
  3793  000184  51B8               	movf	sprintf@cp& (0+255),w,b
  3794  000186  11B9               	iorwf	(sprintf@cp+1)& (0+255),w,b
  3795  000188  A4D8               	btfss	status,2,c
  3796  00018A  D004               	goto	l5586
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;doprnt.c: 767: cp = "(null)";
  3800  00018C  0ED7               	movlw	low STR_18
  3801  00018E  6FB8               	movwf	sprintf@cp& (0+255),b
  3802  000190  0EFF               	movlw	high STR_18
  3803  000192  6FB9               	movwf	(sprintf@cp+1)& (0+255),b
  3804  000194                     l5586:
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;doprnt.c: 771: len = 0;
  3808  000194  0E00               	movlw	0
  3809  000196  6FBC               	movwf	(sprintf@len+1)& (0+255),b
  3810  000198  0E00               	movlw	0
  3811  00019A  6FBB               	movwf	sprintf@len& (0+255),b
  3812                           
  3813                           ;doprnt.c: 772: while(cp[len])
  3814  00019C  D003               	goto	l5590
  3815  00019E                     l5588:
  3816                           
  3817                           ;doprnt.c: 773: len++;
  3818  00019E  0100               	movlb	0	; () banked
  3819  0001A0  4BBB               	infsnz	sprintf@len& (0+255),f,b
  3820  0001A2  2BBC               	incf	(sprintf@len+1)& (0+255),f,b
  3821  0001A4                     l5590:
  3822                           
  3823                           ; BSR set to: 0
  3824  0001A4  51BB               	movf	sprintf@len& (0+255),w,b
  3825  0001A6  25B8               	addwf	sprintf@cp& (0+255),w,b
  3826  0001A8  6FAF               	movwf	??_sprintf& (0+255),b
  3827  0001AA  51BC               	movf	(sprintf@len+1)& (0+255),w,b
  3828  0001AC  21B9               	addwfc	(sprintf@cp+1)& (0+255),w,b
  3829  0001AE  6FB0               	movwf	(??_sprintf+1)& (0+255),b
  3830  0001B0  C0AF  FFF6         	movff	??_sprintf,tblptrl
  3831  0001B4  C0B0  FFF7         	movff	??_sprintf+1,tblptrh
  3832  0001B8  0E00               	movlw	low (__mediumconst shr (0+16))
  3833  0001BA  6EF8               	movwf	tblptru,c
  3834  0001BC  0E0F               	movlw	(high __ramtop+-1)
  3835  0001BE  64F7               	cpfsgt	tblptrh,c
  3836  0001C0  D003               	bra	u6587
  3837  0001C2  0008               	tblrd		*
  3838  0001C4  50F5               	movf	tablat,w,c
  3839  0001C6  D005               	bra	u6580
  3840  0001C8                     u6587:
  3841  0001C8  CFF6 FFE1          	movff	tblptrl,fsr1l
  3842  0001CC  CFF7 FFE2          	movff	tblptrh,fsr1h
  3843  0001D0  50E7               	movf	indf1,w,c
  3844  0001D2                     u6580:
  3845  0001D2  0900               	iorlw	0
  3846  0001D4  A4D8               	btfss	status,2,c
  3847  0001D6  D7E3               	goto	l5588
  3848                           
  3849                           ;doprnt.c: 779: if(prec && (prec < ((int)len)))
  3850  0001D8  0100               	movlb	0	; () banked
  3851  0001DA  51CE               	movf	sprintf@prec& (0+255),w,b
  3852  0001DC  11CF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3853  0001DE  B4D8               	btfsc	status,2,c
  3854  0001E0  D00E               	goto	l5598
  3855                           
  3856                           ; BSR set to: 0
  3857  0001E2  51BB               	movf	sprintf@len& (0+255),w,b
  3858  0001E4  5DCE               	subwf	sprintf@prec& (0+255),w,b
  3859  0001E6  51CF               	movf	(sprintf@prec+1)& (0+255),w,b
  3860  0001E8  0A80               	xorlw	128
  3861  0001EA  6FAF               	movwf	??_sprintf& (0+255),b
  3862  0001EC  51BC               	movf	(sprintf@len+1)& (0+255),w,b
  3863  0001EE  0A80               	xorlw	128
  3864  0001F0  59AF               	subwfb	??_sprintf& (0+255),w,b
  3865  0001F2  B0D8               	btfsc	status,0,c
  3866  0001F4  D004               	goto	l5598
  3867                           
  3868                           ; BSR set to: 0
  3869                           ;doprnt.c: 780: len = (unsigned int)prec;
  3870  0001F6  C0CE  F0BB         	movff	sprintf@prec,sprintf@len
  3871  0001FA  C0CF  F0BC         	movff	sprintf@prec+1,sprintf@len+1
  3872  0001FE                     l5598:
  3873                           
  3874                           ; BSR set to: 0
  3875                           ;doprnt.c: 783: if(((unsigned)width) > len)
  3876  0001FE  51CC               	movf	sprintf@width& (0+255),w,b
  3877  000200  5DBB               	subwf	sprintf@len& (0+255),w,b
  3878  000202  51CD               	movf	(sprintf@width+1)& (0+255),w,b
  3879  000204  59BC               	subwfb	(sprintf@len+1)& (0+255),w,b
  3880  000206  B0D8               	btfsc	status,0,c
  3881  000208  D005               	goto	l5602
  3882                           
  3883                           ; BSR set to: 0
  3884                           ;doprnt.c: 784: width -= len;
  3885  00020A  51BB               	movf	sprintf@len& (0+255),w,b
  3886  00020C  5FCC               	subwf	sprintf@width& (0+255),f,b
  3887  00020E  51BC               	movf	(sprintf@len+1)& (0+255),w,b
  3888  000210  5BCD               	subwfb	(sprintf@width+1)& (0+255),f,b
  3889  000212  D00D               	goto	l5608
  3890  000214                     l5602:
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;doprnt.c: 785: else;doprnt.c: 786: width = 0;
  3894  000214  0E00               	movlw	0
  3895  000216  6FCD               	movwf	(sprintf@width+1)& (0+255),b
  3896  000218  0E00               	movlw	0
  3897  00021A  6FCC               	movwf	sprintf@width& (0+255),b
  3898  00021C  D008               	goto	l5608
  3899  00021E                     l5604:
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;doprnt.c: 791: ((*sp++ = (' ')));
  3903  00021E  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  3904  000222  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  3905  000226  0E20               	movlw	32
  3906  000228  6EDF               	movwf	indf2,c
  3907                           
  3908                           ; BSR set to: 0
  3909  00022A  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  3910  00022C  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  3911  00022E                     l5608:
  3912                           
  3913                           ; BSR set to: 0
  3914  00022E  07CC               	decf	sprintf@width& (0+255),f,b
  3915  000230  A0D8               	btfss	status,0,c
  3916  000232  07CD               	decf	(sprintf@width+1)& (0+255),f,b
  3917  000234  29CC               	incf	sprintf@width& (0+255),w,b
  3918  000236  E1F3               	bnz	l5604
  3919  000238  29CD               	incf	(sprintf@width+1)& (0+255),w,b
  3920  00023A  B4D8               	btfsc	status,2,c
  3921  00023C  D01C               	goto	l5616
  3922  00023E  D7EF               	goto	l5604
  3923  000240                     l5610:
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;doprnt.c: 794: ((*sp++ = (*cp++)));
  3927  000240  C0B8  FFF6         	movff	sprintf@cp,tblptrl
  3928  000244  C0B9  FFF7         	movff	sprintf@cp+1,tblptrh
  3929  000248  0E00               	movlw	low (__mediumconst shr (0+16))
  3930  00024A  6EF8               	movwf	tblptru,c
  3931  00024C  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  3932  000250  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  3933  000254  0E0F               	movlw	(high __ramtop+-1)
  3934  000256  64F7               	cpfsgt	tblptrh,c
  3935  000258  D003               	bra	u6647
  3936  00025A  0008               	tblrd		*
  3937  00025C  50F5               	movf	tablat,w,c
  3938  00025E  D005               	bra	u6640
  3939  000260                     u6647:
  3940  000260  CFF6 FFE1          	movff	tblptrl,fsr1l
  3941  000264  CFF7 FFE2          	movff	tblptrh,fsr1h
  3942  000268  50E7               	movf	indf1,w,c
  3943  00026A                     u6640:
  3944  00026A  6EDF               	movwf	indf2,c
  3945  00026C  0100               	movlb	0	; () banked
  3946  00026E  4BB8               	infsnz	sprintf@cp& (0+255),f,b
  3947  000270  2BB9               	incf	(sprintf@cp+1)& (0+255),f,b
  3948                           
  3949                           ; BSR set to: 0
  3950  000272  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  3951  000274  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  3952  000276                     l5616:
  3953                           
  3954                           ; BSR set to: 0
  3955  000276  07BB               	decf	sprintf@len& (0+255),f,b
  3956  000278  A0D8               	btfss	status,0,c
  3957  00027A  07BC               	decf	(sprintf@len+1)& (0+255),f,b
  3958  00027C  29BB               	incf	sprintf@len& (0+255),w,b
  3959  00027E  E1E0               	bnz	l5610
  3960  000280  29BC               	incf	(sprintf@len+1)& (0+255),w,b
  3961  000282  B4D8               	btfsc	status,2,c
  3962  000284  EF98  F005         	goto	u7140
  3963  000288  D7DB               	goto	l5610
  3964  00028A                     l5620:
  3965  00028A  C0A7  FFF6         	movff	sprintf@f,tblptrl
  3966  00028E  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  3967  000292  0100               	movlb	0	; () banked
  3968  000294  4BA7               	infsnz	sprintf@f& (0+255),f,b
  3969  000296  2BA8               	incf	(sprintf@f+1)& (0+255),f,b
  3970  000298                     	if	0	;tblptru may be non-zero
  3971  000298                     	endif
  3972  000298                     	if	0	;tblptru may be non-zero
  3973  000298                     	endif
  3974  000298  0008               	tblrd		*
  3975  00029A  CFF5 F0D0          	movff	tablat,sprintf@c
  3976  00029E  51D0               	movf	sprintf@c& (0+255),w,b
  3977                           
  3978                           ; Switch size 1, requested type "simple"
  3979                           ; Number of cases is 5, Range of values is 0 to 115
  3980                           ; switch strategies available:
  3981                           ; Name         Instructions Cycles
  3982                           ; simple_byte           16     9 (average)
  3983                           ;	Chosen strategy is simple_byte
  3984  0002A0  0A00               	xorlw	0	; case 0
  3985  0002A2  B4D8               	btfsc	status,2,c
  3986  0002A4  EFA5  F005         	goto	u7150
  3987  0002A8  0A64               	xorlw	100	; case 100
  3988  0002AA  B4D8               	btfsc	status,2,c
  3989  0002AC  D00B               	goto	l5622
  3990  0002AE  0A02               	xorlw	2	; case 102
  3991  0002B0  B4D8               	btfsc	status,2,c
  3992  0002B2  D75D               	goto	l5576
  3993  0002B4  0A0F               	xorlw	15	; case 105
  3994  0002B6  B4D8               	btfsc	status,2,c
  3995  0002B8  D005               	goto	l5622
  3996  0002BA  0A1A               	xorlw	26	; case 115
  3997  0002BC  B4D8               	btfsc	status,2,c
  3998  0002BE  D759               	goto	l5578
  3999  0002C0  EF98  F005         	goto	u7140
  4000  0002C4                     l5622:
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;doprnt.c: 851: if(flag & (0x700)) {
  4004  0002C4  0E07               	movlw	7
  4005  0002C6  15C8               	andwf	(sprintf@flag+1)& (0+255),w,b
  4006  0002C8  B4D8               	btfsc	status,2,c
  4007  0002CA  D30C               	goto	l5802
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;doprnt.c: 853: if(flag & 0x1000)
  4011  0002CC  A9C8               	btfss	(sprintf@flag+1)& (0+255),4,b
  4012  0002CE  D004               	goto	l5628
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;doprnt.c: 855: prec = 6;
  4016  0002D0  0E00               	movlw	0
  4017  0002D2  6FCF               	movwf	(sprintf@prec+1)& (0+255),b
  4018  0002D4  0E06               	movlw	6
  4019  0002D6  6FCE               	movwf	sprintf@prec& (0+255),b
  4020  0002D8                     l5628:
  4021                           
  4022                           ; BSR set to: 0
  4023                           ;doprnt.c: 856: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4024  0002D8  51BA               	movf	sprintf@ap& (0+255),w,b
  4025  0002DA  6ED9               	movwf	fsr2l,c
  4026  0002DC  6ADA               	clrf	fsr2h,c
  4027  0002DE  CFDE F0C9          	movff	postinc2,sprintf@fval
  4028  0002E2  CFDE F0CA          	movff	postinc2,sprintf@fval+1
  4029  0002E6  CFDD F0CB          	movff	postdec2,sprintf@fval+2
  4030                           
  4031                           ; BSR set to: 0
  4032  0002EA  0E03               	movlw	3
  4033  0002EC  27BA               	addwf	sprintf@ap& (0+255),f,b
  4034                           
  4035                           ; BSR set to: 0
  4036                           ;doprnt.c: 857: if(fval < 0.0) {
  4037  0002EE  AFCB               	btfss	(sprintf@fval+2)& (0+255),7,b
  4038  0002F0  D010               	goto	l5638
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;doprnt.c: 858: fval = -fval;
  4042  0002F2  C0C9  F024         	movff	sprintf@fval,___ftneg@f1
  4043  0002F6  C0CA  F025         	movff	sprintf@fval+1,___ftneg@f1+1
  4044  0002FA  C0CB  F026         	movff	sprintf@fval+2,___ftneg@f1+2
  4045  0002FE  ECED  F014         	call	___ftneg	;wreg free
  4046  000302  C024  F0C9         	movff	?___ftneg,sprintf@fval
  4047  000306  C025  F0CA         	movff	?___ftneg+1,sprintf@fval+1
  4048  00030A  C026  F0CB         	movff	?___ftneg+2,sprintf@fval+2
  4049                           
  4050                           ; BSR set to: 0
  4051                           ;doprnt.c: 859: flag |= 0x03;
  4052  00030E  0E03               	movlw	3
  4053  000310  13C7               	iorwf	sprintf@flag& (0+255),f,b
  4054  000312                     l5638:
  4055                           
  4056                           ; BSR set to: 0
  4057                           ;doprnt.c: 860: };doprnt.c: 861: eexp = 0;
  4058  000312  0E00               	movlw	0
  4059  000314  6FC6               	movwf	(sprintf@eexp+1)& (0+255),b
  4060  000316  0E00               	movlw	0
  4061  000318  6FC5               	movwf	sprintf@eexp& (0+255),b
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;doprnt.c: 862: if( fval!=0) {
  4065  00031A  51C9               	movf	sprintf@fval& (0+255),w,b
  4066  00031C  11CA               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4067  00031E  11CB               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4068  000320  B4D8               	btfsc	status,2,c
  4069  000322  D086               	goto	l5666
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;doprnt.c: 863: (void)(*(&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4073  000324  0E82               	movlw	130
  4074  000326  6FAF               	movwf	??_sprintf& (0+255),b
  4075  000328  0EFF               	movlw	255
  4076  00032A  6FB0               	movwf	(??_sprintf+1)& (0+255),b
  4077  00032C  C0C9  F0B1         	movff	sprintf@fval,??_sprintf+2
  4078  000330  C0CA  F0B2         	movff	sprintf@fval+1,??_sprintf+3
  4079  000334  C0CB  F0B3         	movff	sprintf@fval+2,??_sprintf+4
  4080  000338  C0CC  F0B4         	movff	sprintf@fval+3,??_sprintf+5
  4081  00033C  0E10               	movlw	16
  4082  00033E  D005               	goto	u6700
  4083  000340                     u6705:
  4084  000340  90D8               	bcf	status,0,c
  4085  000342  33B4               	rrcf	(??_sprintf+5)& (0+255),f,b
  4086  000344  33B3               	rrcf	(??_sprintf+4)& (0+255),f,b
  4087  000346  33B2               	rrcf	(??_sprintf+3)& (0+255),f,b
  4088  000348  33B1               	rrcf	(??_sprintf+2)& (0+255),f,b
  4089  00034A                     u6700:
  4090  00034A  2EE8               	decfsz	wreg,f,c
  4091  00034C  D7F9               	goto	u6705
  4092  00034E  51B1               	movf	(??_sprintf+2)& (0+255),w,b
  4093  000350  25AF               	addwf	??_sprintf& (0+255),w,b
  4094  000352  6FC5               	movwf	sprintf@eexp& (0+255),b
  4095  000354  0E00               	movlw	0
  4096  000356  21B0               	addwfc	(??_sprintf+1)& (0+255),w,b
  4097  000358  6FC6               	movwf	(sprintf@eexp+1)& (0+255),b
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;doprnt.c: 864: eexp--;
  4101  00035A  07C5               	decf	sprintf@eexp& (0+255),f,b
  4102  00035C  A0D8               	btfss	status,0,c
  4103  00035E  07C6               	decf	(sprintf@eexp+1)& (0+255),f,b
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;doprnt.c: 865: eexp *= 3;
  4107  000360  C0C5  F024         	movff	sprintf@eexp,___wmul@multiplier
  4108  000364  C0C6  F025         	movff	sprintf@eexp+1,___wmul@multiplier+1
  4109  000368  0E00               	movlw	0
  4110  00036A  6E27               	movwf	(___wmul@multiplicand+1)^0,c
  4111  00036C  0E03               	movlw	3
  4112  00036E  6E26               	movwf	___wmul@multiplicand^0,c
  4113  000370  ECC7  F014         	call	___wmul	;wreg free
  4114  000374  C024  F0C5         	movff	?___wmul,sprintf@eexp
  4115  000378  C025  F0C6         	movff	?___wmul+1,sprintf@eexp+1
  4116                           
  4117                           ;doprnt.c: 866: eexp /= 10;
  4118  00037C  C0C5  F02A         	movff	sprintf@eexp,___awdiv@dividend
  4119  000380  C0C6  F02B         	movff	sprintf@eexp+1,___awdiv@dividend+1
  4120  000384  0E00               	movlw	0
  4121  000386  6E2D               	movwf	(___awdiv@divisor+1)^0,c
  4122  000388  0E0A               	movlw	10
  4123  00038A  6E2C               	movwf	___awdiv@divisor^0,c
  4124  00038C  EC02  F010         	call	___awdiv	;wreg free
  4125  000390  C02A  F0C5         	movff	?___awdiv,sprintf@eexp
  4126  000394  C02B  F0C6         	movff	?___awdiv+1,sprintf@eexp+1
  4127                           
  4128                           ;doprnt.c: 867: if(eexp < 0)
  4129  000398  0100               	movlb	0	; () banked
  4130  00039A  AFC6               	btfss	(sprintf@eexp+1)& (0+255),7,b
  4131  00039C  D003               	goto	l5654
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;doprnt.c: 868: eexp--;
  4135  00039E  07C5               	decf	sprintf@eexp& (0+255),f,b
  4136  0003A0  A0D8               	btfss	status,0,c
  4137  0003A2  07C6               	decf	(sprintf@eexp+1)& (0+255),f,b
  4138  0003A4                     l5654:
  4139                           
  4140                           ; BSR set to: 0
  4141                           ;doprnt.c: 872: tmpval.integ = scale(-eexp);
  4142  0003A4  51C5               	movf	sprintf@eexp& (0+255),w,b
  4143  0003A6  0800               	sublw	0
  4144  0003A8  ECAC  F005         	call	_scale
  4145  0003AC  C089  F0BD         	movff	?_scale,sprintf@tmpval
  4146  0003B0  C08A  F0BE         	movff	?_scale+1,sprintf@tmpval+1
  4147  0003B4  C08B  F0BF         	movff	?_scale+2,sprintf@tmpval+2
  4148                           
  4149                           ;doprnt.c: 873: tmpval.integ *= fval;
  4150  0003B8  C0BD  F032         	movff	sprintf@tmpval,___ftmul@f1
  4151  0003BC  C0BE  F033         	movff	sprintf@tmpval+1,___ftmul@f1+1
  4152  0003C0  C0BF  F034         	movff	sprintf@tmpval+2,___ftmul@f1+2
  4153  0003C4  C0C9  F035         	movff	sprintf@fval,___ftmul@f2
  4154  0003C8  C0CA  F036         	movff	sprintf@fval+1,___ftmul@f2+1
  4155  0003CC  C0CB  F037         	movff	sprintf@fval+2,___ftmul@f2+2
  4156  0003D0  EC80  F00D         	call	___ftmul	;wreg free
  4157  0003D4  C032  F0BD         	movff	?___ftmul,sprintf@tmpval
  4158  0003D8  C033  F0BE         	movff	?___ftmul+1,sprintf@tmpval+1
  4159  0003DC  C034  F0BF         	movff	?___ftmul+2,sprintf@tmpval+2
  4160                           
  4161                           ;doprnt.c: 874: if(tmpval.integ < 1.0)
  4162  0003E0  C0BD  F024         	movff	sprintf@tmpval,___ftge@ff1
  4163  0003E4  C0BE  F025         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4164  0003E8  C0BF  F026         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4165  0003EC  0E00               	movlw	0
  4166  0003EE  6E27               	movwf	___ftge@ff2^0,c
  4167  0003F0  0E80               	movlw	128
  4168  0003F2  6E28               	movwf	(___ftge@ff2+1)^0,c
  4169  0003F4  0E3F               	movlw	63
  4170  0003F6  6E29               	movwf	(___ftge@ff2+2)^0,c
  4171  0003F8  EC85  F010         	call	___ftge	;wreg free
  4172  0003FC  B0D8               	btfsc	status,0,c
  4173  0003FE  D005               	goto	l5662
  4174                           
  4175                           ;doprnt.c: 875: eexp--;
  4176  000400  0100               	movlb	0	; () banked
  4177  000402  07C5               	decf	sprintf@eexp& (0+255),f,b
  4178  000404  A0D8               	btfss	status,0,c
  4179  000406  07C6               	decf	(sprintf@eexp+1)& (0+255),f,b
  4180  000408  D013               	goto	l5666
  4181  00040A                     l5662:
  4182                           
  4183                           ;doprnt.c: 876: else if(tmpval.integ >= 10.0)
  4184  00040A  C0BD  F024         	movff	sprintf@tmpval,___ftge@ff1
  4185  00040E  C0BE  F025         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4186  000412  C0BF  F026         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4187  000416  0E00               	movlw	0
  4188  000418  6E27               	movwf	___ftge@ff2^0,c
  4189  00041A  0E20               	movlw	32
  4190  00041C  6E28               	movwf	(___ftge@ff2+1)^0,c
  4191  00041E  0E41               	movlw	65
  4192  000420  6E29               	movwf	(___ftge@ff2+2)^0,c
  4193  000422  EC85  F010         	call	___ftge	;wreg free
  4194  000426  A0D8               	btfss	status,0,c
  4195  000428  D003               	goto	l5666
  4196                           
  4197                           ;doprnt.c: 877: eexp++;
  4198  00042A  0100               	movlb	0	; () banked
  4199  00042C  4BC5               	infsnz	sprintf@eexp& (0+255),f,b
  4200  00042E  2BC6               	incf	(sprintf@eexp+1)& (0+255),f,b
  4201  000430                     l5666:
  4202                           
  4203                           ;doprnt.c: 878: };doprnt.c: 1138: if(prec <= 12)
  4204  000430  0100               	movlb	0	; () banked
  4205  000432  BFCF               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4206  000434  D006               	goto	u6740
  4207  000436  51CF               	movf	(sprintf@prec+1)& (0+255),w,b
  4208  000438  E11B               	bnz	l5670
  4209  00043A  0E0D               	movlw	13
  4210  00043C  5DCE               	subwf	sprintf@prec& (0+255),w,b
  4211  00043E  B0D8               	btfsc	status,0,c
  4212  000440  D017               	goto	l5670
  4213  000442                     u6740:
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;doprnt.c: 1139: fval += fround((unsigned int)prec);
  4217  000442  C0C9  F093         	movff	sprintf@fval,___ftadd@f1
  4218  000446  C0CA  F094         	movff	sprintf@fval+1,___ftadd@f1+1
  4219  00044A  C0CB  F095         	movff	sprintf@fval+2,___ftadd@f1+2
  4220  00044E  51CE               	movf	sprintf@prec& (0+255),w,b
  4221  000450  ECE0  F009         	call	_fround
  4222  000454  C089  F096         	movff	?_fround,___ftadd@f2
  4223  000458  C08A  F097         	movff	?_fround+1,___ftadd@f2+1
  4224  00045C  C08B  F098         	movff	?_fround+2,___ftadd@f2+2
  4225  000460  ECD6  F00A         	call	___ftadd	;wreg free
  4226  000464  C093  F0C9         	movff	?___ftadd,sprintf@fval
  4227  000468  C094  F0CA         	movff	?___ftadd+1,sprintf@fval+1
  4228  00046C  C095  F0CB         	movff	?___ftadd+2,sprintf@fval+2
  4229  000470                     l5670:
  4230                           
  4231                           ;doprnt.c: 1142: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  4232  000470  0100               	movlb	0	; () banked
  4233  000472  BFC6               	btfsc	(sprintf@eexp+1)& (0+255),7,b
  4234  000474  D006               	goto	u6750
  4235  000476  51C6               	movf	(sprintf@eexp+1)& (0+255),w,b
  4236  000478  E11E               	bnz	l5678
  4237  00047A  0E0A               	movlw	10
  4238  00047C  5DC5               	subwf	sprintf@eexp& (0+255),w,b
  4239  00047E  B0D8               	btfsc	status,0,c
  4240  000480  D01A               	goto	u6780
  4241  000482                     u6750:
  4242                           
  4243                           ; BSR set to: 0
  4244  000482  51C9               	movf	sprintf@fval& (0+255),w,b
  4245  000484  11CA               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4246  000486  11CB               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4247  000488  B4D8               	btfsc	status,2,c
  4248  00048A  D054               	goto	l5692
  4249                           
  4250                           ; BSR set to: 0
  4251  00048C  C0C9  F090         	movff	sprintf@fval,___fttol@f1
  4252  000490  C0CA  F091         	movff	sprintf@fval+1,___fttol@f1+1
  4253  000494  C0CB  F092         	movff	sprintf@fval+2,___fttol@f1+2
  4254  000498  ECE9  F00E         	call	___fttol	;wreg free
  4255  00049C  5190               	movf	?___fttol& (0+255),w,b
  4256  00049E  1191               	iorwf	(?___fttol+1)& (0+255),w,b
  4257  0004A0  1192               	iorwf	(?___fttol+2)& (0+255),w,b
  4258  0004A2  1193               	iorwf	(?___fttol+3)& (0+255),w,b
  4259  0004A4  B4D8               	btfsc	status,2,c
  4260                           
  4261                           ; BSR set to: 0
  4262  0004A6  BFC6               	btfsc	(sprintf@eexp+1)& (0+255),7,b
  4263  0004A8  D045               	goto	l5692
  4264  0004AA  51C6               	movf	(sprintf@eexp+1)& (0+255),w,b
  4265  0004AC  E104               	bnz	u6780
  4266  0004AE  0E02               	movlw	2
  4267  0004B0  5DC5               	subwf	sprintf@eexp& (0+255),w,b
  4268  0004B2  A0D8               	btfss	status,0,c
  4269  0004B4  D03F               	goto	l5692
  4270  0004B6                     u6780:
  4271  0004B6                     l5678:
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;doprnt.c: 1146: if(tmpval.integ < 4.294967296){
  4275  0004B6  C0BD  F024         	movff	sprintf@tmpval,___ftge@ff1
  4276  0004BA  C0BE  F025         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4277  0004BE  C0BF  F026         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4278  0004C2  0E70               	movlw	112
  4279  0004C4  6E27               	movwf	___ftge@ff2^0,c
  4280  0004C6  0E89               	movlw	137
  4281  0004C8  6E28               	movwf	(___ftge@ff2+1)^0,c
  4282  0004CA  0E40               	movlw	64
  4283  0004CC  6E29               	movwf	(___ftge@ff2+2)^0,c
  4284  0004CE  EC85  F010         	call	___ftge	;wreg free
  4285  0004D2  B0D8               	btfsc	status,0,c
  4286  0004D4  D003               	goto	l5682
  4287                           
  4288                           ;doprnt.c: 1147: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4289  0004D6  0100               	movlb	0	; () banked
  4290  0004D8  0EF7               	movlw	247
  4291  0004DA  D002               	goto	L1
  4292  0004DC                     l5682:
  4293                           
  4294                           ;doprnt.c: 1149: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4295  0004DC  0100               	movlb	0	; () banked
  4296  0004DE  0EF8               	movlw	248
  4297  0004E0                     L1:
  4298  0004E0  27C5               	addwf	sprintf@eexp& (0+255),f,b
  4299  0004E2  0EFF               	movlw	255
  4300  0004E4  23C6               	addwfc	(sprintf@eexp+1)& (0+255),f,b
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;doprnt.c: 1150: };doprnt.c: 1151: tmpval.integ = scale(eexp);
  4304  0004E6  51C5               	movf	sprintf@eexp& (0+255),w,b
  4305  0004E8  ECAC  F005         	call	_scale
  4306  0004EC  C089  F0BD         	movff	?_scale,sprintf@tmpval
  4307  0004F0  C08A  F0BE         	movff	?_scale+1,sprintf@tmpval+1
  4308  0004F4  C08B  F0BF         	movff	?_scale+2,sprintf@tmpval+2
  4309                           
  4310                           ;doprnt.c: 1152: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  4311  0004F8  C0C9  F024         	movff	sprintf@fval,__tdiv_to_l_@f1
  4312  0004FC  C0CA  F025         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  4313  000500  C0CB  F026         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  4314  000504  C0BD  F027         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  4315  000508  C0BE  F028         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  4316  00050C  C0BF  F029         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  4317  000510  EC01  F00D         	call	__tdiv_to_l_	;wreg free
  4318  000514  C024  F0C1         	movff	?__tdiv_to_l_,sprintf@val
  4319  000518  C025  F0C2         	movff	?__tdiv_to_l_+1,sprintf@val+1
  4320  00051C  C026  F0C3         	movff	?__tdiv_to_l_+2,sprintf@val+2
  4321  000520  C027  F0C4         	movff	?__tdiv_to_l_+3,sprintf@val+3
  4322                           
  4323                           ;doprnt.c: 1155: fval = 0.0;
  4324  000524  0E00               	movlw	0
  4325  000526  0100               	movlb	0	; () banked
  4326  000528  6FC9               	movwf	sprintf@fval& (0+255),b
  4327  00052A  0E00               	movlw	0
  4328  00052C  6FCA               	movwf	(sprintf@fval+1)& (0+255),b
  4329  00052E  0E00               	movlw	0
  4330  000530  6FCB               	movwf	(sprintf@fval+2)& (0+255),b
  4331                           
  4332                           ;doprnt.c: 1156: } else {
  4333  000532  D033               	goto	l5696
  4334  000534                     l5692:
  4335                           
  4336                           ; BSR set to: 0
  4337                           ;doprnt.c: 1157: val = (unsigned long)fval;
  4338  000534  C0C9  F090         	movff	sprintf@fval,___fttol@f1
  4339  000538  C0CA  F091         	movff	sprintf@fval+1,___fttol@f1+1
  4340  00053C  C0CB  F092         	movff	sprintf@fval+2,___fttol@f1+2
  4341  000540  ECE9  F00E         	call	___fttol	;wreg free
  4342  000544  C090  F0C1         	movff	?___fttol,sprintf@val
  4343  000548  C091  F0C2         	movff	?___fttol+1,sprintf@val+1
  4344  00054C  C092  F0C3         	movff	?___fttol+2,sprintf@val+2
  4345  000550  C093  F0C4         	movff	?___fttol+3,sprintf@val+3
  4346                           
  4347                           ;doprnt.c: 1158: fval -= (double)val;
  4348  000554  C0C9  F09F         	movff	sprintf@fval,___ftsub@f1
  4349  000558  C0CA  F0A0         	movff	sprintf@fval+1,___ftsub@f1+1
  4350  00055C  C0CB  F0A1         	movff	sprintf@fval+2,___ftsub@f1+2
  4351  000560  C0C1  F02C         	movff	sprintf@val,___lltoft@c
  4352  000564  C0C2  F02D         	movff	sprintf@val+1,___lltoft@c+1
  4353  000568  C0C3  F02E         	movff	sprintf@val+2,___lltoft@c+2
  4354  00056C  C0C4  F02F         	movff	sprintf@val+3,___lltoft@c+3
  4355  000570  EC5F  F012         	call	___lltoft	;wreg free
  4356  000574  C02C  F0A2         	movff	?___lltoft,___ftsub@f2
  4357  000578  C02D  F0A3         	movff	?___lltoft+1,___ftsub@f2+1
  4358  00057C  C02E  F0A4         	movff	?___lltoft+2,___ftsub@f2+2
  4359  000580  EC75  F013         	call	___ftsub	;wreg free
  4360  000584  C09F  F0C9         	movff	?___ftsub,sprintf@fval
  4361  000588  C0A0  F0CA         	movff	?___ftsub+1,sprintf@fval+1
  4362  00058C  C0A1  F0CB         	movff	?___ftsub+2,sprintf@fval+2
  4363                           
  4364                           ;doprnt.c: 1159: eexp = 0;
  4365  000590  0E00               	movlw	0
  4366  000592  0100               	movlb	0	; () banked
  4367  000594  6FC6               	movwf	(sprintf@eexp+1)& (0+255),b
  4368  000596  0E00               	movlw	0
  4369  000598  6FC5               	movwf	sprintf@eexp& (0+255),b
  4370  00059A                     l5696:
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;doprnt.c: 1160: };doprnt.c: 1162: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ;
      +                           c++)
  4374  00059A  0E01               	movlw	1
  4375  00059C  6FD0               	movwf	sprintf@c& (0+255),b
  4376  00059E                     l5702:
  4377                           
  4378                           ; BSR set to: 0
  4379                           ;doprnt.c: 1163: if(val < dpowers[c])
  4380  00059E  51D0               	movf	sprintf@c& (0+255),w,b
  4381  0005A0  0D04               	mullw	4
  4382  0005A2  0E27               	movlw	low _dpowers
  4383  0005A4  24F3               	addwf	243,w,c
  4384  0005A6  6EF6               	movwf	tblptrl,c
  4385  0005A8  0EFF               	movlw	high _dpowers
  4386  0005AA  20F4               	addwfc	244,w,c
  4387  0005AC  6EF7               	movwf	tblptrh,c
  4388  0005AE                     	if	0	;There are less than 3 active tblptr bytes
  4389  0005AE                     	endif
  4390  0005AE  0009               	tblrd		*+
  4391  0005B0  50F5               	movf	tablat,w,c
  4392  0005B2  5DC1               	subwf	sprintf@val& (0+255),w,b
  4393  0005B4  0009               	tblrd		*+
  4394  0005B6  50F5               	movf	tablat,w,c
  4395  0005B8  59C2               	subwfb	(sprintf@val+1)& (0+255),w,b
  4396  0005BA  0009               	tblrd		*+
  4397  0005BC  50F5               	movf	tablat,w,c
  4398  0005BE  59C3               	subwfb	(sprintf@val+2)& (0+255),w,b
  4399  0005C0  0009               	tblrd		*+
  4400  0005C2  50F5               	movf	tablat,w,c
  4401  0005C4  59C4               	subwfb	(sprintf@val+3)& (0+255),w,b
  4402  0005C6  A0D8               	btfss	status,0,c
  4403  0005C8  D005               	goto	u6810
  4404                           
  4405                           ; BSR set to: 0
  4406  0005CA  2BD0               	incf	sprintf@c& (0+255),f,b
  4407                           
  4408                           ; BSR set to: 0
  4409  0005CC  0E0A               	movlw	10
  4410  0005CE  19D0               	xorwf	sprintf@c& (0+255),w,b
  4411  0005D0  A4D8               	btfss	status,2,c
  4412  0005D2  D7E5               	goto	l5702
  4413  0005D4                     u6810:
  4414                           
  4415                           ; BSR set to: 0
  4416                           ;doprnt.c: 1168: width -= prec + c + eexp;
  4417  0005D4  51D0               	movf	sprintf@c& (0+255),w,b
  4418  0005D6  25CE               	addwf	sprintf@prec& (0+255),w,b
  4419  0005D8  6FAF               	movwf	??_sprintf& (0+255),b
  4420  0005DA  0E00               	movlw	0
  4421  0005DC  21CF               	addwfc	(sprintf@prec+1)& (0+255),w,b
  4422  0005DE  6FB0               	movwf	(??_sprintf+1)& (0+255),b
  4423  0005E0  51C5               	movf	sprintf@eexp& (0+255),w,b
  4424  0005E2  27AF               	addwf	??_sprintf& (0+255),f,b
  4425  0005E4  51C6               	movf	(sprintf@eexp+1)& (0+255),w,b
  4426  0005E6  23B0               	addwfc	(??_sprintf+1)& (0+255),f,b
  4427  0005E8  51AF               	movf	??_sprintf& (0+255),w,b
  4428  0005EA  5FCC               	subwf	sprintf@width& (0+255),f,b
  4429  0005EC  51B0               	movf	(??_sprintf+1)& (0+255),w,b
  4430  0005EE  5BCD               	subwfb	(sprintf@width+1)& (0+255),f,b
  4431                           
  4432                           ;doprnt.c: 1169: if(;doprnt.c: 1173: prec)
  4433  0005F0  51CE               	movf	sprintf@prec& (0+255),w,b
  4434  0005F2  11CF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4435  0005F4  B4D8               	btfsc	status,2,c
  4436  0005F6  D003               	goto	l5714
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;doprnt.c: 1174: width--;
  4440  0005F8  07CC               	decf	sprintf@width& (0+255),f,b
  4441  0005FA  A0D8               	btfss	status,0,c
  4442  0005FC  07CD               	decf	(sprintf@width+1)& (0+255),f,b
  4443  0005FE                     l5714:
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;doprnt.c: 1175: if(flag & 0x03)
  4447  0005FE  C0C7  F0AF         	movff	sprintf@flag,??_sprintf
  4448  000602  0E03               	movlw	3
  4449  000604  17AF               	andwf	??_sprintf& (0+255),f,b
  4450  000606  B4D8               	btfsc	status,2,c
  4451  000608  D003               	goto	l5718
  4452                           
  4453                           ; BSR set to: 0
  4454                           ;doprnt.c: 1176: width--;
  4455  00060A  07CC               	decf	sprintf@width& (0+255),f,b
  4456  00060C  A0D8               	btfss	status,0,c
  4457  00060E  07CD               	decf	(sprintf@width+1)& (0+255),f,b
  4458  000610                     l5718:
  4459                           
  4460                           ; BSR set to: 0
  4461                           ;doprnt.c: 1179: if(flag & 0x04) {
  4462  000610  A5C7               	btfss	sprintf@flag& (0+255),2,b
  4463  000612  D02D               	goto	l5740
  4464                           
  4465                           ; BSR set to: 0
  4466                           ;doprnt.c: 1183: if(flag & 0x03)
  4467  000614  C0C7  F0AF         	movff	sprintf@flag,??_sprintf
  4468  000618  0E03               	movlw	3
  4469  00061A  17AF               	andwf	??_sprintf& (0+255),f,b
  4470  00061C  B4D8               	btfsc	status,2,c
  4471  00061E  D014               	goto	l5732
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;doprnt.c: 1185: ((*sp++ = ('-')));
  4475  000620  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4476  000624  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4477  000628  0E2D               	movlw	45
  4478  00062A  6EDF               	movwf	indf2,c
  4479                           
  4480                           ; BSR set to: 0
  4481  00062C  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4482  00062E  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4483  000630  D00B               	goto	l5732
  4484  000632                     l5726:
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;doprnt.c: 1195: ((*sp++ = ('0')));
  4488  000632  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4489  000636  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4490  00063A  0E30               	movlw	48
  4491  00063C  6EDF               	movwf	indf2,c
  4492                           
  4493                           ; BSR set to: 0
  4494  00063E  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4495  000640  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;doprnt.c: 1196: width--;
  4499  000642  07CC               	decf	sprintf@width& (0+255),f,b
  4500  000644  A0D8               	btfss	status,0,c
  4501  000646  07CD               	decf	(sprintf@width+1)& (0+255),f,b
  4502  000648                     l5732:
  4503                           
  4504                           ; BSR set to: 0
  4505  000648  BFCD               	btfsc	(sprintf@width+1)& (0+255),7,b
  4506  00064A  D06D               	goto	l5756
  4507  00064C  51CD               	movf	(sprintf@width+1)& (0+255),w,b
  4508  00064E  E1F1               	bnz	l5726
  4509  000650  05CC               	decf	sprintf@width& (0+255),w,b
  4510  000652  A0D8               	btfss	status,0,c
  4511  000654  D068               	goto	l5756
  4512  000656  D7ED               	goto	l5726
  4513  000658                     l5734:
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;doprnt.c: 1207: ((*sp++ = (' ')));
  4517  000658  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4518  00065C  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4519  000660  0E20               	movlw	32
  4520  000662  6EDF               	movwf	indf2,c
  4521                           
  4522                           ; BSR set to: 0
  4523  000664  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4524  000666  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4525                           
  4526                           ; BSR set to: 0
  4527                           ;doprnt.c: 1208: width--;
  4528  000668  07CC               	decf	sprintf@width& (0+255),f,b
  4529  00066A  A0D8               	btfss	status,0,c
  4530  00066C  07CD               	decf	(sprintf@width+1)& (0+255),f,b
  4531  00066E                     l5740:
  4532                           
  4533                           ; BSR set to: 0
  4534  00066E  BFCD               	btfsc	(sprintf@width+1)& (0+255),7,b
  4535  000670  D005               	goto	u6870
  4536  000672  51CD               	movf	(sprintf@width+1)& (0+255),w,b
  4537  000674  E1F1               	bnz	l5734
  4538  000676  05CC               	decf	sprintf@width& (0+255),w,b
  4539  000678  B0D8               	btfsc	status,0,c
  4540  00067A  D7EE               	goto	l5734
  4541  00067C                     u6870:
  4542                           
  4543                           ; BSR set to: 0
  4544                           ;doprnt.c: 1209: };doprnt.c: 1214: if(flag & 0x03)
  4545  00067C  C0C7  F0AF         	movff	sprintf@flag,??_sprintf
  4546  000680  0E03               	movlw	3
  4547  000682  17AF               	andwf	??_sprintf& (0+255),f,b
  4548  000684  B4D8               	btfsc	status,2,c
  4549  000686  D04F               	goto	l5756
  4550                           
  4551                           ; BSR set to: 0
  4552                           ;doprnt.c: 1216: ((*sp++ = ('-')));
  4553  000688  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4554  00068C  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4555  000690  0E2D               	movlw	45
  4556  000692  D046               	goto	L5
  4557  000694                     l5748:
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;doprnt.c: 1226: {;doprnt.c: 1227: tmpval.vd = val/dpowers[c];
  4561  000694  C0C1  F024         	movff	sprintf@val,___lldiv@dividend
  4562  000698  C0C2  F025         	movff	sprintf@val+1,___lldiv@dividend+1
  4563  00069C  C0C3  F026         	movff	sprintf@val+2,___lldiv@dividend+2
  4564  0006A0  C0C4  F027         	movff	sprintf@val+3,___lldiv@dividend+3
  4565  0006A4  51D0               	movf	sprintf@c& (0+255),w,b
  4566  0006A6  0D04               	mullw	4
  4567  0006A8  0E27               	movlw	low _dpowers
  4568  0006AA  24F3               	addwf	243,w,c
  4569  0006AC  6EF6               	movwf	tblptrl,c
  4570  0006AE  0EFF               	movlw	high _dpowers
  4571  0006B0  20F4               	addwfc	244,w,c
  4572  0006B2  6EF7               	movwf	tblptrh,c
  4573  0006B4                     	if	0	;There are less than 3 active tblptr bytes
  4574  0006B4                     	endif
  4575  0006B4  0009               	tblrd		*+
  4576  0006B6  CFF5 F028          	movff	tablat,___lldiv@divisor
  4577  0006BA  0009               	tblrd		*+
  4578  0006BC  CFF5 F029          	movff	tablat,___lldiv@divisor+1
  4579  0006C0  0009               	tblrd		*+
  4580  0006C2  CFF5 F02A          	movff	tablat,___lldiv@divisor+2
  4581  0006C6  000A               	tblrd		*-
  4582  0006C8  CFF5 F02B          	movff	tablat,___lldiv@divisor+3
  4583  0006CC  EC44  F010         	call	___lldiv	;wreg free
  4584  0006D0  C024  F0BD         	movff	?___lldiv,sprintf@tmpval
  4585  0006D4  C025  F0BE         	movff	?___lldiv+1,sprintf@tmpval+1
  4586  0006D8  C026  F0BF         	movff	?___lldiv+2,sprintf@tmpval+2
  4587  0006DC  C027  F0C0         	movff	?___lldiv+3,sprintf@tmpval+3
  4588                           
  4589                           ; BSR set to: 0
  4590                           ;doprnt.c: 1228: tmpval.vd %= 10;
  4591  0006E0  C0BD  F031         	movff	sprintf@tmpval,___llmod@dividend
  4592  0006E4  C0BE  F032         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4593  0006E8  C0BF  F033         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4594  0006EC  C0C0  F034         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4595  0006F0  0E0A               	movlw	10
  4596  0006F2  6E35               	movwf	___llmod@divisor^0,c
  4597  0006F4  0E00               	movlw	0
  4598  0006F6  6E36               	movwf	(___llmod@divisor+1)^0,c
  4599  0006F8  0E00               	movlw	0
  4600  0006FA  6E37               	movwf	(___llmod@divisor+2)^0,c
  4601  0006FC  0E00               	movlw	0
  4602  0006FE  6E38               	movwf	(___llmod@divisor+3)^0,c
  4603  000700  EC9C  F011         	call	___llmod	;wreg free
  4604  000704  C031  F0BD         	movff	?___llmod,sprintf@tmpval
  4605  000708  C032  F0BE         	movff	?___llmod+1,sprintf@tmpval+1
  4606  00070C  C033  F0BF         	movff	?___llmod+2,sprintf@tmpval+2
  4607  000710  C034  F0C0         	movff	?___llmod+3,sprintf@tmpval+3
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;doprnt.c: 1229: ((*sp++ = ('0' + tmpval.vd)));
  4611  000714  51BD               	movf	sprintf@tmpval& (0+255),w,b
  4612  000716  0F30               	addlw	48
  4613  000718  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4614  00071C  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4615  000720                     L5:
  4616  000720  6EDF               	movwf	indf2,c
  4617                           
  4618                           ; BSR set to: 0
  4619  000722  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4620  000724  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4621  000726                     l5756:
  4622                           
  4623                           ; BSR set to: 0
  4624  000726  07D0               	decf	sprintf@c& (0+255),f,b
  4625  000728  29D0               	incf	sprintf@c& (0+255),w,b
  4626  00072A  B4D8               	btfsc	status,2,c
  4627  00072C  D00C               	goto	l5764
  4628  00072E  D7B2               	goto	l5748
  4629  000730                     l5758:
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;doprnt.c: 1234: ((*sp++ = ('0')));
  4633  000730  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4634  000734  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4635  000738  0E30               	movlw	48
  4636  00073A  6EDF               	movwf	indf2,c
  4637                           
  4638                           ; BSR set to: 0
  4639  00073C  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4640  00073E  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4641                           
  4642                           ; BSR set to: 0
  4643                           ;doprnt.c: 1235: eexp--;
  4644  000740  07C5               	decf	sprintf@eexp& (0+255),f,b
  4645  000742  A0D8               	btfss	status,0,c
  4646  000744  07C6               	decf	(sprintf@eexp+1)& (0+255),f,b
  4647  000746                     l5764:
  4648                           
  4649                           ; BSR set to: 0
  4650  000746  BFC6               	btfsc	(sprintf@eexp+1)& (0+255),7,b
  4651  000748  D005               	goto	u6900
  4652  00074A  51C6               	movf	(sprintf@eexp+1)& (0+255),w,b
  4653  00074C  E1F1               	bnz	l5758
  4654  00074E  05C5               	decf	sprintf@eexp& (0+255),w,b
  4655  000750  B0D8               	btfsc	status,0,c
  4656  000752  D7EE               	goto	l5758
  4657  000754                     u6900:
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;doprnt.c: 1236: };doprnt.c: 1237: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2)
      +                          )
  4661  000754  BFCF               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4662  000756  D009               	goto	l510
  4663  000758  51CF               	movf	(sprintf@prec+1)& (0+255),w,b
  4664  00075A  E104               	bnz	u6910
  4665  00075C  0E09               	movlw	9
  4666  00075E  5DCE               	subwf	sprintf@prec& (0+255),w,b
  4667  000760  A0D8               	btfss	status,0,c
  4668  000762  D003               	goto	l510
  4669  000764                     u6910:
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;doprnt.c: 1238: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4673  000764  0E08               	movlw	8
  4674  000766  6FD0               	movwf	sprintf@c& (0+255),b
  4675  000768  D002               	goto	l5770
  4676  00076A                     l510:
  4677                           
  4678                           ; BSR set to: 0
  4679                           ;doprnt.c: 1239: else;doprnt.c: 1240: c = (char)prec;
  4680  00076A  C0CE  F0D0         	movff	sprintf@prec,sprintf@c
  4681  00076E                     l5770:
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;doprnt.c: 1241: prec -= (int)c;
  4685  00076E  51D0               	movf	sprintf@c& (0+255),w,b
  4686  000770  5FCE               	subwf	sprintf@prec& (0+255),f,b
  4687  000772  0E00               	movlw	0
  4688  000774  5BCF               	subwfb	(sprintf@prec+1)& (0+255),f,b
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;doprnt.c: 1245: if(c)
  4692  000776  51D0               	movf	sprintf@c& (0+255),w,b
  4693  000778  B4D8               	btfsc	status,2,c
  4694  00077A  D008               	goto	l5778
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;doprnt.c: 1247: ((*sp++ = ('.')));
  4698  00077C  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4699  000780  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4700  000784  0E2E               	movlw	46
  4701  000786  6EDF               	movwf	indf2,c
  4702                           
  4703                           ; BSR set to: 0
  4704  000788  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4705  00078A  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4706  00078C                     l5778:
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  4710  00078C  51D0               	movf	sprintf@c& (0+255),w,b
  4711  00078E  ECAC  F005         	call	_scale
  4712  000792  C089  F0B5         	movff	?_scale,_sprintf$1845
  4713  000796  C08A  F0B6         	movff	?_scale+1,_sprintf$1845+1
  4714  00079A  C08B  F0B7         	movff	?_scale+2,_sprintf$1845+2
  4715                           
  4716                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  4717  00079E  C0C9  F035         	movff	sprintf@fval,___ftmul@f2
  4718  0007A2  C0CA  F036         	movff	sprintf@fval+1,___ftmul@f2+1
  4719  0007A6  C0CB  F037         	movff	sprintf@fval+2,___ftmul@f2+2
  4720  0007AA  C0B5  F032         	movff	_sprintf$1845,___ftmul@f1
  4721  0007AE  C0B6  F033         	movff	_sprintf$1845+1,___ftmul@f1+1
  4722  0007B2  C0B7  F034         	movff	_sprintf$1845+2,___ftmul@f1+2
  4723  0007B6  EC80  F00D         	call	___ftmul	;wreg free
  4724  0007BA  C032  F090         	movff	?___ftmul,___fttol@f1
  4725  0007BE  C033  F091         	movff	?___ftmul+1,___fttol@f1+1
  4726  0007C2  C034  F092         	movff	?___ftmul+2,___fttol@f1+2
  4727  0007C6  ECE9  F00E         	call	___fttol	;wreg free
  4728  0007CA  C090  F0C1         	movff	?___fttol,sprintf@val
  4729  0007CE  C091  F0C2         	movff	?___fttol+1,sprintf@val+1
  4730  0007D2  C092  F0C3         	movff	?___fttol+2,sprintf@val+2
  4731  0007D6  C093  F0C4         	movff	?___fttol+3,sprintf@val+3
  4732                           
  4733                           ;doprnt.c: 1254: while(c--) {
  4734  0007DA  D06F               	goto	l5792
  4735  0007DC                     l5782:
  4736                           
  4737                           ; BSR set to: 0
  4738                           ;doprnt.c: 1255: tmpval.vd = val/dpowers[c];
  4739  0007DC  C0C1  F024         	movff	sprintf@val,___lldiv@dividend
  4740  0007E0  C0C2  F025         	movff	sprintf@val+1,___lldiv@dividend+1
  4741  0007E4  C0C3  F026         	movff	sprintf@val+2,___lldiv@dividend+2
  4742  0007E8  C0C4  F027         	movff	sprintf@val+3,___lldiv@dividend+3
  4743  0007EC  51D0               	movf	sprintf@c& (0+255),w,b
  4744  0007EE  0D04               	mullw	4
  4745  0007F0  0E27               	movlw	low _dpowers
  4746  0007F2  24F3               	addwf	243,w,c
  4747  0007F4  6EF6               	movwf	tblptrl,c
  4748  0007F6  0EFF               	movlw	high _dpowers
  4749  0007F8  20F4               	addwfc	244,w,c
  4750  0007FA  6EF7               	movwf	tblptrh,c
  4751  0007FC                     	if	0	;There are less than 3 active tblptr bytes
  4752  0007FC                     	endif
  4753  0007FC  0009               	tblrd		*+
  4754  0007FE  CFF5 F028          	movff	tablat,___lldiv@divisor
  4755  000802  0009               	tblrd		*+
  4756  000804  CFF5 F029          	movff	tablat,___lldiv@divisor+1
  4757  000808  0009               	tblrd		*+
  4758  00080A  CFF5 F02A          	movff	tablat,___lldiv@divisor+2
  4759  00080E  000A               	tblrd		*-
  4760  000810  CFF5 F02B          	movff	tablat,___lldiv@divisor+3
  4761  000814  EC44  F010         	call	___lldiv	;wreg free
  4762  000818  C024  F0BD         	movff	?___lldiv,sprintf@tmpval
  4763  00081C  C025  F0BE         	movff	?___lldiv+1,sprintf@tmpval+1
  4764  000820  C026  F0BF         	movff	?___lldiv+2,sprintf@tmpval+2
  4765  000824  C027  F0C0         	movff	?___lldiv+3,sprintf@tmpval+3
  4766                           
  4767                           ; BSR set to: 0
  4768                           ;doprnt.c: 1256: tmpval.vd %= 10;
  4769  000828  C0BD  F031         	movff	sprintf@tmpval,___llmod@dividend
  4770  00082C  C0BE  F032         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4771  000830  C0BF  F033         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4772  000834  C0C0  F034         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4773  000838  0E0A               	movlw	10
  4774  00083A  6E35               	movwf	___llmod@divisor^0,c
  4775  00083C  0E00               	movlw	0
  4776  00083E  6E36               	movwf	(___llmod@divisor+1)^0,c
  4777  000840  0E00               	movlw	0
  4778  000842  6E37               	movwf	(___llmod@divisor+2)^0,c
  4779  000844  0E00               	movlw	0
  4780  000846  6E38               	movwf	(___llmod@divisor+3)^0,c
  4781  000848  EC9C  F011         	call	___llmod	;wreg free
  4782  00084C  C031  F0BD         	movff	?___llmod,sprintf@tmpval
  4783  000850  C032  F0BE         	movff	?___llmod+1,sprintf@tmpval+1
  4784  000854  C033  F0BF         	movff	?___llmod+2,sprintf@tmpval+2
  4785  000858  C034  F0C0         	movff	?___llmod+3,sprintf@tmpval+3
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;doprnt.c: 1257: ((*sp++ = ('0' + tmpval.vd)));
  4789  00085C  51BD               	movf	sprintf@tmpval& (0+255),w,b
  4790  00085E  0F30               	addlw	48
  4791  000860  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4792  000864  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4793  000868  6EDF               	movwf	indf2,c
  4794                           
  4795                           ; BSR set to: 0
  4796  00086A  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4797  00086C  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;doprnt.c: 1258: val %= dpowers[c];
  4801  00086E  C0C1  F031         	movff	sprintf@val,___llmod@dividend
  4802  000872  C0C2  F032         	movff	sprintf@val+1,___llmod@dividend+1
  4803  000876  C0C3  F033         	movff	sprintf@val+2,___llmod@dividend+2
  4804  00087A  C0C4  F034         	movff	sprintf@val+3,___llmod@dividend+3
  4805  00087E  51D0               	movf	sprintf@c& (0+255),w,b
  4806  000880  0D04               	mullw	4
  4807  000882  0E27               	movlw	low _dpowers
  4808  000884  24F3               	addwf	243,w,c
  4809  000886  6EF6               	movwf	tblptrl,c
  4810  000888  0EFF               	movlw	high _dpowers
  4811  00088A  20F4               	addwfc	244,w,c
  4812  00088C  6EF7               	movwf	tblptrh,c
  4813  00088E                     	if	0	;There are less than 3 active tblptr bytes
  4814  00088E                     	endif
  4815  00088E  0009               	tblrd		*+
  4816  000890  CFF5 F035          	movff	tablat,___llmod@divisor
  4817  000894  0009               	tblrd		*+
  4818  000896  CFF5 F036          	movff	tablat,___llmod@divisor+1
  4819  00089A  0009               	tblrd		*+
  4820  00089C  CFF5 F037          	movff	tablat,___llmod@divisor+2
  4821  0008A0  000A               	tblrd		*-
  4822  0008A2  CFF5 F038          	movff	tablat,___llmod@divisor+3
  4823  0008A6  EC9C  F011         	call	___llmod	;wreg free
  4824  0008AA  C031  F0C1         	movff	?___llmod,sprintf@val
  4825  0008AE  C032  F0C2         	movff	?___llmod+1,sprintf@val+1
  4826  0008B2  C033  F0C3         	movff	?___llmod+2,sprintf@val+2
  4827  0008B6  C034  F0C4         	movff	?___llmod+3,sprintf@val+3
  4828  0008BA                     l5792:
  4829                           
  4830                           ; BSR set to: 0
  4831  0008BA  07D0               	decf	sprintf@c& (0+255),f,b
  4832  0008BC  29D0               	incf	sprintf@c& (0+255),w,b
  4833  0008BE  B4D8               	btfsc	status,2,c
  4834  0008C0  D00C               	goto	l5800
  4835  0008C2  D78C               	goto	l5782
  4836  0008C4                     l5794:
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;doprnt.c: 1262: ((*sp++ = ('0')));
  4840  0008C4  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4841  0008C8  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4842  0008CC  0E30               	movlw	48
  4843  0008CE  6EDF               	movwf	indf2,c
  4844                           
  4845                           ; BSR set to: 0
  4846  0008D0  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4847  0008D2  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;doprnt.c: 1263: prec--;
  4851  0008D4  07CE               	decf	sprintf@prec& (0+255),f,b
  4852  0008D6  A0D8               	btfss	status,0,c
  4853  0008D8  07CF               	decf	(sprintf@prec+1)& (0+255),f,b
  4854  0008DA                     l5800:
  4855                           
  4856                           ; BSR set to: 0
  4857  0008DA  51CE               	movf	sprintf@prec& (0+255),w,b
  4858  0008DC  11CF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4859  0008DE  B4D8               	btfsc	status,2,c
  4860  0008E0  D127               	goto	u7140
  4861  0008E2  D7F0               	goto	l5794
  4862  0008E4                     l5802:
  4863                           
  4864                           ; BSR set to: 0
  4865                           ;doprnt.c: 1272: };doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned long)(*(int *)__va_
      +                          arg((*(int **)ap), (int)0));
  4866  0008E4  51BA               	movf	sprintf@ap& (0+255),w,b
  4867  0008E6  6ED9               	movwf	fsr2l,c
  4868  0008E8  6ADA               	clrf	fsr2h,c
  4869  0008EA  CFDE F0C1          	movff	postinc2,sprintf@val
  4870  0008EE  CFDD F0C2          	movff	postdec2,sprintf@val+1
  4871  0008F2  0E00               	movlw	0
  4872  0008F4  BFC2               	btfsc	(sprintf@val+1)& (0+255),7,b
  4873  0008F6  0EFF               	movlw	-1
  4874  0008F8  6FC3               	movwf	(sprintf@val+2)& (0+255),b
  4875  0008FA  6FC4               	movwf	(sprintf@val+3)& (0+255),b
  4876                           
  4877                           ; BSR set to: 0
  4878  0008FC  0E02               	movlw	2
  4879  0008FE  27BA               	addwf	sprintf@ap& (0+255),f,b
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;doprnt.c: 1287: if((long)val < 0) {
  4883  000900  AFC4               	btfss	(sprintf@val+3)& (0+255),7,b
  4884  000902  D00A               	goto	l5812
  4885                           
  4886                           ; BSR set to: 0
  4887                           ;doprnt.c: 1288: flag |= 0x03;
  4888  000904  0E03               	movlw	3
  4889  000906  13C7               	iorwf	sprintf@flag& (0+255),f,b
  4890                           
  4891                           ; BSR set to: 0
  4892                           ;doprnt.c: 1289: val = -val;
  4893  000908  1FC4               	comf	(sprintf@val+3)& (0+255),f,b
  4894  00090A  1FC3               	comf	(sprintf@val+2)& (0+255),f,b
  4895  00090C  1FC2               	comf	(sprintf@val+1)& (0+255),f,b
  4896  00090E  6DC1               	negf	sprintf@val& (0+255),b
  4897  000910  0E00               	movlw	0
  4898  000912  23C2               	addwfc	(sprintf@val+1)& (0+255),f,b
  4899  000914  23C3               	addwfc	(sprintf@val+2)& (0+255),f,b
  4900  000916  23C4               	addwfc	(sprintf@val+3)& (0+255),f,b
  4901  000918                     l5812:
  4902                           
  4903                           ; BSR set to: 0
  4904                           ;doprnt.c: 1290: };doprnt.c: 1292: };doprnt.c: 1316: if(prec == 0 && val == 0)
  4905  000918  51CE               	movf	sprintf@prec& (0+255),w,b
  4906  00091A  11CF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4907  00091C  A4D8               	btfss	status,2,c
  4908  00091E  D008               	goto	l5818
  4909                           
  4910                           ; BSR set to: 0
  4911  000920  51C1               	movf	sprintf@val& (0+255),w,b
  4912  000922  11C2               	iorwf	(sprintf@val+1)& (0+255),w,b
  4913  000924  11C3               	iorwf	(sprintf@val+2)& (0+255),w,b
  4914  000926  11C4               	iorwf	(sprintf@val+3)& (0+255),w,b
  4915  000928  A4D8               	btfss	status,2,c
  4916  00092A  D002               	goto	l5818
  4917                           
  4918                           ; BSR set to: 0
  4919                           ;doprnt.c: 1317: prec++;
  4920  00092C  4BCE               	infsnz	sprintf@prec& (0+255),f,b
  4921  00092E  2BCF               	incf	(sprintf@prec+1)& (0+255),f,b
  4922  000930                     l5818:
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4926  000930  0E01               	movlw	1
  4927  000932  6FD0               	movwf	sprintf@c& (0+255),b
  4928  000934                     l5824:
  4929                           
  4930                           ; BSR set to: 0
  4931                           ;doprnt.c: 1332: if(val < dpowers[c])
  4932  000934  51D0               	movf	sprintf@c& (0+255),w,b
  4933  000936  0D04               	mullw	4
  4934  000938  0E27               	movlw	low _dpowers
  4935  00093A  24F3               	addwf	243,w,c
  4936  00093C  6EF6               	movwf	tblptrl,c
  4937  00093E  0EFF               	movlw	high _dpowers
  4938  000940  20F4               	addwfc	244,w,c
  4939  000942  6EF7               	movwf	tblptrh,c
  4940  000944                     	if	0	;There are less than 3 active tblptr bytes
  4941  000944                     	endif
  4942  000944  0009               	tblrd		*+
  4943  000946  50F5               	movf	tablat,w,c
  4944  000948  5DC1               	subwf	sprintf@val& (0+255),w,b
  4945  00094A  0009               	tblrd		*+
  4946  00094C  50F5               	movf	tablat,w,c
  4947  00094E  59C2               	subwfb	(sprintf@val+1)& (0+255),w,b
  4948  000950  0009               	tblrd		*+
  4949  000952  50F5               	movf	tablat,w,c
  4950  000954  59C3               	subwfb	(sprintf@val+2)& (0+255),w,b
  4951  000956  0009               	tblrd		*+
  4952  000958  50F5               	movf	tablat,w,c
  4953  00095A  59C4               	subwfb	(sprintf@val+3)& (0+255),w,b
  4954  00095C  A0D8               	btfss	status,0,c
  4955  00095E  D005               	goto	u6990
  4956                           
  4957                           ; BSR set to: 0
  4958  000960  2BD0               	incf	sprintf@c& (0+255),f,b
  4959                           
  4960                           ; BSR set to: 0
  4961  000962  0E0A               	movlw	10
  4962  000964  19D0               	xorwf	sprintf@c& (0+255),w,b
  4963  000966  A4D8               	btfss	status,2,c
  4964  000968  D7E5               	goto	l5824
  4965  00096A                     u6990:
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;doprnt.c: 1365: if(c < prec)
  4969  00096A  51D0               	movf	sprintf@c& (0+255),w,b
  4970  00096C  6FAF               	movwf	??_sprintf& (0+255),b
  4971  00096E  6BB0               	clrf	(??_sprintf+1)& (0+255),b
  4972  000970  51CE               	movf	sprintf@prec& (0+255),w,b
  4973  000972  5DAF               	subwf	??_sprintf& (0+255),w,b
  4974  000974  51B0               	movf	(??_sprintf+1)& (0+255),w,b
  4975  000976  0A80               	xorlw	128
  4976  000978  6FB1               	movwf	(??_sprintf+2)& (0+255),b
  4977  00097A  51CF               	movf	(sprintf@prec+1)& (0+255),w,b
  4978  00097C  0A80               	xorlw	128
  4979  00097E  59B1               	subwfb	(??_sprintf+2)& (0+255),w,b
  4980  000980  B0D8               	btfsc	status,0,c
  4981  000982  D003               	goto	l5836
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;doprnt.c: 1366: c = (char)prec;
  4985  000984  C0CE  F0D0         	movff	sprintf@prec,sprintf@c
  4986  000988  D010               	goto	l5840
  4987  00098A                     l5836:
  4988                           
  4989                           ; BSR set to: 0
  4990                           ;doprnt.c: 1367: else if(prec < c)
  4991  00098A  51D0               	movf	sprintf@c& (0+255),w,b
  4992  00098C  6FAF               	movwf	??_sprintf& (0+255),b
  4993  00098E  6BB0               	clrf	(??_sprintf+1)& (0+255),b
  4994  000990  51AF               	movf	??_sprintf& (0+255),w,b
  4995  000992  5DCE               	subwf	sprintf@prec& (0+255),w,b
  4996  000994  51CF               	movf	(sprintf@prec+1)& (0+255),w,b
  4997  000996  0A80               	xorlw	128
  4998  000998  6FB1               	movwf	(??_sprintf+2)& (0+255),b
  4999  00099A  51B0               	movf	(??_sprintf+1)& (0+255),w,b
  5000  00099C  0A80               	xorlw	128
  5001  00099E  59B1               	subwfb	(??_sprintf+2)& (0+255),w,b
  5002  0009A0  B0D8               	btfsc	status,0,c
  5003  0009A2  D003               	goto	l5840
  5004                           
  5005                           ; BSR set to: 0
  5006                           ;doprnt.c: 1368: prec = c;
  5007  0009A4  C0D0  F0CE         	movff	sprintf@c,sprintf@prec
  5008  0009A8  6BCF               	clrf	(sprintf@prec+1)& (0+255),b
  5009  0009AA                     l5840:
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;doprnt.c: 1371: if(width && flag & 0x03)
  5013  0009AA  51CC               	movf	sprintf@width& (0+255),w,b
  5014  0009AC  11CD               	iorwf	(sprintf@width+1)& (0+255),w,b
  5015  0009AE  B4D8               	btfsc	status,2,c
  5016  0009B0  D009               	goto	l5846
  5017                           
  5018                           ; BSR set to: 0
  5019  0009B2  C0C7  F0AF         	movff	sprintf@flag,??_sprintf
  5020  0009B6  0E03               	movlw	3
  5021  0009B8  17AF               	andwf	??_sprintf& (0+255),f,b
  5022  0009BA  B4D8               	btfsc	status,2,c
  5023  0009BC  D003               	goto	l5846
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;doprnt.c: 1372: width--;
  5027  0009BE  07CC               	decf	sprintf@width& (0+255),f,b
  5028  0009C0  A0D8               	btfss	status,0,c
  5029  0009C2  07CD               	decf	(sprintf@width+1)& (0+255),f,b
  5030  0009C4                     l5846:
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;doprnt.c: 1374: if(flag & 0x4000) {
  5034  0009C4  ADC8               	btfss	(sprintf@flag+1)& (0+255),6,b
  5035  0009C6  D013               	goto	l5854
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;doprnt.c: 1375: if(width > prec)
  5039  0009C8  51CC               	movf	sprintf@width& (0+255),w,b
  5040  0009CA  5DCE               	subwf	sprintf@prec& (0+255),w,b
  5041  0009CC  51CF               	movf	(sprintf@prec+1)& (0+255),w,b
  5042  0009CE  0A80               	xorlw	128
  5043  0009D0  6FAF               	movwf	??_sprintf& (0+255),b
  5044  0009D2  51CD               	movf	(sprintf@width+1)& (0+255),w,b
  5045  0009D4  0A80               	xorlw	128
  5046  0009D6  59AF               	subwfb	??_sprintf& (0+255),w,b
  5047  0009D8  B0D8               	btfsc	status,0,c
  5048  0009DA  D005               	goto	l5852
  5049                           
  5050                           ; BSR set to: 0
  5051                           ;doprnt.c: 1376: width -= prec;
  5052  0009DC  51CE               	movf	sprintf@prec& (0+255),w,b
  5053  0009DE  5FCC               	subwf	sprintf@width& (0+255),f,b
  5054  0009E0  51CF               	movf	(sprintf@prec+1)& (0+255),w,b
  5055  0009E2  5BCD               	subwfb	(sprintf@width+1)& (0+255),f,b
  5056  0009E4  D004               	goto	l5854
  5057  0009E6                     l5852:
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;doprnt.c: 1377: else;doprnt.c: 1378: width = 0;
  5061  0009E6  0E00               	movlw	0
  5062  0009E8  6FCD               	movwf	(sprintf@width+1)& (0+255),b
  5063  0009EA  0E00               	movlw	0
  5064  0009EC  6FCC               	movwf	sprintf@width& (0+255),b
  5065  0009EE                     l5854:
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;doprnt.c: 1379: };doprnt.c: 1407: if(width > c)
  5069  0009EE  51D0               	movf	sprintf@c& (0+255),w,b
  5070  0009F0  6FAF               	movwf	??_sprintf& (0+255),b
  5071  0009F2  6BB0               	clrf	(??_sprintf+1)& (0+255),b
  5072  0009F4  51CC               	movf	sprintf@width& (0+255),w,b
  5073  0009F6  5DAF               	subwf	??_sprintf& (0+255),w,b
  5074  0009F8  51B0               	movf	(??_sprintf+1)& (0+255),w,b
  5075  0009FA  0A80               	xorlw	128
  5076  0009FC  6FB1               	movwf	(??_sprintf+2)& (0+255),b
  5077  0009FE  51CD               	movf	(sprintf@width+1)& (0+255),w,b
  5078  000A00  0A80               	xorlw	128
  5079  000A02  59B1               	subwfb	(??_sprintf+2)& (0+255),w,b
  5080  000A04  B0D8               	btfsc	status,0,c
  5081  000A06  D005               	goto	l5858
  5082                           
  5083                           ; BSR set to: 0
  5084                           ;doprnt.c: 1408: width -= c;
  5085  000A08  51D0               	movf	sprintf@c& (0+255),w,b
  5086  000A0A  5FCC               	subwf	sprintf@width& (0+255),f,b
  5087  000A0C  0E00               	movlw	0
  5088  000A0E  5BCD               	subwfb	(sprintf@width+1)& (0+255),f,b
  5089  000A10  D004               	goto	l5860
  5090  000A12                     l5858:
  5091                           
  5092                           ; BSR set to: 0
  5093                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
  5094  000A12  0E00               	movlw	0
  5095  000A14  6FCD               	movwf	(sprintf@width+1)& (0+255),b
  5096  000A16  0E00               	movlw	0
  5097  000A18  6FCC               	movwf	sprintf@width& (0+255),b
  5098  000A1A                     l5860:
  5099                           
  5100                           ; BSR set to: 0
  5101                           ;doprnt.c: 1413: if(flag & 0x04) {
  5102  000A1A  A5C7               	btfss	sprintf@flag& (0+255),2,b
  5103  000A1C  D01E               	goto	l5876
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;doprnt.c: 1418: if(flag & 0x03)
  5107  000A1E  C0C7  F0AF         	movff	sprintf@flag,??_sprintf
  5108  000A22  0E03               	movlw	3
  5109  000A24  17AF               	andwf	??_sprintf& (0+255),f,b
  5110  000A26  B4D8               	btfsc	status,2,c
  5111  000A28  D008               	goto	l5868
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;doprnt.c: 1419: ((*sp++ = ('-')));
  5115  000A2A  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  5116  000A2E  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  5117  000A32  0E2D               	movlw	45
  5118  000A34  6EDF               	movwf	indf2,c
  5119                           
  5120                           ; BSR set to: 0
  5121  000A36  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  5122  000A38  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  5123  000A3A                     l5868:
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;doprnt.c: 1441: if(width)
  5127  000A3A  51CC               	movf	sprintf@width& (0+255),w,b
  5128  000A3C  11CD               	iorwf	(sprintf@width+1)& (0+255),w,b
  5129  000A3E  B4D8               	btfsc	status,2,c
  5130  000A40  D06F               	goto	l5896
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;doprnt.c: 1443: ((*sp++ = ('0')));
  5134  000A42  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  5135  000A46  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  5136  000A4A  0E30               	movlw	48
  5137  000A4C  6EDF               	movwf	indf2,c
  5138                           
  5139                           ; BSR set to: 0
  5140  000A4E  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  5141  000A50  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;doprnt.c: 1444: while(--width);
  5145  000A52  07CC               	decf	sprintf@width& (0+255),f,b
  5146  000A54  A0D8               	btfss	status,0,c
  5147  000A56  07CD               	decf	(sprintf@width+1)& (0+255),f,b
  5148  000A58  D7F0               	goto	l5868
  5149  000A5A                     l5876:
  5150                           
  5151                           ; BSR set to: 0
  5152                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
  5153  000A5A  51CC               	movf	sprintf@width& (0+255),w,b
  5154  000A5C  11CD               	iorwf	(sprintf@width+1)& (0+255),w,b
  5155  000A5E  B4D8               	btfsc	status,2,c
  5156  000A60  D00F               	goto	u7120
  5157  000A62                     u7110:
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;doprnt.c: 1456: ((*sp++ = (' ')));
  5161  000A62  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  5162  000A66  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  5163  000A6A  0E20               	movlw	32
  5164  000A6C  6EDF               	movwf	indf2,c
  5165                           
  5166                           ; BSR set to: 0
  5167  000A6E  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  5168  000A70  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  5169                           
  5170                           ; BSR set to: 0
  5171                           ;doprnt.c: 1457: while(--width);
  5172  000A72  07CC               	decf	sprintf@width& (0+255),f,b
  5173  000A74  A0D8               	btfss	status,0,c
  5174  000A76  07CD               	decf	(sprintf@width+1)& (0+255),f,b
  5175  000A78  51CC               	movf	sprintf@width& (0+255),w,b
  5176  000A7A  11CD               	iorwf	(sprintf@width+1)& (0+255),w,b
  5177  000A7C  A4D8               	btfss	status,2,c
  5178  000A7E  D7F1               	goto	u7110
  5179  000A80                     u7120:
  5180                           
  5181                           ; BSR set to: 0
  5182                           ;doprnt.c: 1464: if(flag & 0x03)
  5183  000A80  C0C7  F0AF         	movff	sprintf@flag,??_sprintf
  5184  000A84  0E03               	movlw	3
  5185  000A86  17AF               	andwf	??_sprintf& (0+255),f,b
  5186  000A88  B4D8               	btfsc	status,2,c
  5187  000A8A  D04A               	goto	l5896
  5188                           
  5189                           ; BSR set to: 0
  5190                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  5191  000A8C  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  5192  000A90  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  5193  000A94  0E2D               	movlw	45
  5194  000A96  6EDF               	movwf	indf2,c
  5195  000A98  D041               	goto	l5894
  5196  000A9A                     l5890:
  5197                           
  5198                           ; BSR set to: 0
  5199                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned int)prec]) % 10 + '0';
  5200  000A9A  C0CE  F0AF         	movff	sprintf@prec,??_sprintf
  5201  000A9E  C0CF  F0B0         	movff	sprintf@prec+1,??_sprintf+1
  5202  000AA2  90D8               	bcf	status,0,c
  5203  000AA4  37AF               	rlcf	??_sprintf& (0+255),f,b
  5204  000AA6  37B0               	rlcf	(??_sprintf+1)& (0+255),f,b
  5205  000AA8  90D8               	bcf	status,0,c
  5206  000AAA  37AF               	rlcf	??_sprintf& (0+255),f,b
  5207  000AAC  37B0               	rlcf	(??_sprintf+1)& (0+255),f,b
  5208  000AAE  0E27               	movlw	low _dpowers
  5209  000AB0  25AF               	addwf	??_sprintf& (0+255),w,b
  5210  000AB2  6EF6               	movwf	tblptrl,c
  5211  000AB4  0EFF               	movlw	high _dpowers
  5212  000AB6  21B0               	addwfc	(??_sprintf+1)& (0+255),w,b
  5213  000AB8  6EF7               	movwf	tblptrh,c
  5214  000ABA                     	if	0	;There are less than 3 active tblptr bytes
  5215  000ABA                     	endif
  5216  000ABA  0009               	tblrd		*+
  5217  000ABC  CFF5 F028          	movff	tablat,___lldiv@divisor
  5218  000AC0  0009               	tblrd		*+
  5219  000AC2  CFF5 F029          	movff	tablat,___lldiv@divisor+1
  5220  000AC6  0009               	tblrd		*+
  5221  000AC8  CFF5 F02A          	movff	tablat,___lldiv@divisor+2
  5222  000ACC  000A               	tblrd		*-
  5223  000ACE  CFF5 F02B          	movff	tablat,___lldiv@divisor+3
  5224  000AD2  C0C1  F024         	movff	sprintf@val,___lldiv@dividend
  5225  000AD6  C0C2  F025         	movff	sprintf@val+1,___lldiv@dividend+1
  5226  000ADA  C0C3  F026         	movff	sprintf@val+2,___lldiv@dividend+2
  5227  000ADE  C0C4  F027         	movff	sprintf@val+3,___lldiv@dividend+3
  5228  000AE2  EC44  F010         	call	___lldiv	;wreg free
  5229  000AE6  C024  F031         	movff	?___lldiv,___llmod@dividend
  5230  000AEA  C025  F032         	movff	?___lldiv+1,___llmod@dividend+1
  5231  000AEE  C026  F033         	movff	?___lldiv+2,___llmod@dividend+2
  5232  000AF2  C027  F034         	movff	?___lldiv+3,___llmod@dividend+3
  5233  000AF6  0E0A               	movlw	10
  5234  000AF8  6E35               	movwf	___llmod@divisor^0,c
  5235  000AFA  0E00               	movlw	0
  5236  000AFC  6E36               	movwf	(___llmod@divisor+1)^0,c
  5237  000AFE  0E00               	movlw	0
  5238  000B00  6E37               	movwf	(___llmod@divisor+2)^0,c
  5239  000B02  0E00               	movlw	0
  5240  000B04  6E38               	movwf	(___llmod@divisor+3)^0,c
  5241  000B06  EC9C  F011         	call	___llmod	;wreg free
  5242  000B0A  5031               	movf	?___llmod^0,w,c
  5243  000B0C  0F30               	addlw	48
  5244  000B0E  6FD0               	movwf	sprintf@c& (0+255),b
  5245                           
  5246                           ; BSR set to: 0
  5247                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
  5248  000B10  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  5249  000B14  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  5250  000B18  C0D0  FFDF         	movff	sprintf@c,indf2
  5251  000B1C                     l5894:
  5252                           
  5253                           ; BSR set to: 0
  5254  000B1C  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  5255  000B1E  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  5256  000B20                     l5896:
  5257                           
  5258                           ; BSR set to: 0
  5259  000B20  07CE               	decf	sprintf@prec& (0+255),f,b
  5260  000B22  A0D8               	btfss	status,0,c
  5261  000B24  07CF               	decf	(sprintf@prec+1)& (0+255),f,b
  5262  000B26  29CE               	incf	sprintf@prec& (0+255),w,b
  5263  000B28  E1B8               	bnz	l5890
  5264  000B2A  29CF               	incf	(sprintf@prec+1)& (0+255),w,b
  5265  000B2C  A4D8               	btfss	status,2,c
  5266  000B2E  D7B5               	goto	l5890
  5267  000B30                     u7140:
  5268                           
  5269                           ; BSR set to: 0
  5270  000B30  C0A7  FFF6         	movff	sprintf@f,tblptrl
  5271  000B34  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  5272  000B38  4BA7               	infsnz	sprintf@f& (0+255),f,b
  5273  000B3A  2BA8               	incf	(sprintf@f+1)& (0+255),f,b
  5274  000B3C                     	if	0	;tblptru may be non-zero
  5275  000B3C                     	endif
  5276  000B3C                     	if	0	;tblptru may be non-zero
  5277  000B3C                     	endif
  5278  000B3C  0008               	tblrd		*
  5279  000B3E  CFF5 F0D0          	movff	tablat,sprintf@c
  5280  000B42  51D0               	movf	sprintf@c& (0+255),w,b
  5281  000B44  A4D8               	btfss	status,2,c
  5282  000B46  EF0D  F000         	goto	l5532
  5283  000B4A                     u7150:
  5284                           
  5285                           ; BSR set to: 0
  5286                           ;doprnt.c: 1564: *sp = 0;
  5287  000B4A  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  5288  000B4E  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  5289  000B52  0E00               	movlw	0
  5290  000B54  6EDF               	movwf	indf2,c
  5291                           
  5292                           ; BSR set to: 0
  5293  000B56  0012               	return		;funcret
  5294  000B58                     __end_of_sprintf:
  5295                           	callstack 0
  5296                           
  5297 ;; *************** function _scale *****************
  5298 ;; Defined at:
  5299 ;;		line 433 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;  scl             1    wreg     char 
  5302 ;; Auto vars:     Size  Location     Type
  5303 ;;  scl             1   15[BANK0 ] char 
  5304 ;; Return value:  Size  Location     Type
  5305 ;;                  3    9[BANK0 ] char 
  5306 ;; Registers used:
  5307 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5308 ;; Tracked objects:
  5309 ;;		On entry : 3F/0
  5310 ;;		On exit  : 0/0
  5311 ;;		Unchanged: 0/0
  5312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5313 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5314 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5316 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5317 ;;Total ram usage:        7 bytes
  5318 ;; Hardware stack levels used:    1
  5319 ;; Hardware stack levels required when called:    7
  5320 ;; This function calls:
  5321 ;;		___awdiv
  5322 ;;		___awmod
  5323 ;;		___ftmul
  5324 ;; This function is called by:
  5325 ;;		_sprintf
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329                           	psect	text16
  5330  000B58                     __ptext16:
  5331                           	callstack 0
  5332  000B58                     _scale:
  5333                           	callstack 21
  5334                           
  5335                           ; BSR set to: 0
  5336                           ;incstack = 0
  5337                           ;scale@scl stored from wreg
  5338  000B58  6F8F               	movwf	scale@scl& (0+255),b
  5339                           
  5340                           ;doprnt.c: 436: if(scl < 0) {
  5341  000B5A  0100               	movlb	0	; () banked
  5342  000B5C  AF8F               	btfss	scale@scl& (0+255),7,b
  5343  000B5E  D0DC               	goto	l5234
  5344                           
  5345                           ; BSR set to: 0
  5346                           ;doprnt.c: 437: scl = -scl;
  5347  000B60  6D8F               	negf	scale@scl& (0+255),b
  5348                           
  5349                           ;doprnt.c: 438: if(scl>=110)
  5350  000B62  518F               	movf	scale@scl& (0+255),w,b
  5351  000B64  0A80               	xorlw	128
  5352  000B66  0F12               	addlw	-238
  5353  000B68  A0D8               	btfss	status,0,c
  5354  000B6A  D07B               	goto	l5224
  5355                           
  5356                           ; BSR set to: 0
  5357                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  5358  000B6C  0E00               	movlw	0
  5359  000B6E  6E2D               	movwf	(___awdiv@divisor+1)^0,c
  5360  000B70  0E0A               	movlw	10
  5361  000B72  6E2C               	movwf	___awdiv@divisor^0,c
  5362  000B74  0E00               	movlw	0
  5363  000B76  6E27               	movwf	(___awmod@divisor+1)^0,c
  5364  000B78  0E64               	movlw	100
  5365  000B7A  6E26               	movwf	___awmod@divisor^0,c
  5366  000B7C  518F               	movf	scale@scl& (0+255),w,b
  5367  000B7E  6E24               	movwf	___awmod@dividend^0,c
  5368  000B80  6A25               	clrf	(___awmod@dividend+1)^0,c
  5369  000B82  BE24               	btfsc	___awmod@dividend^0,7,c
  5370  000B84  0625               	decf	(___awmod@dividend+1)^0,f,c
  5371  000B86  ECF9  F010         	call	___awmod	;wreg free
  5372  000B8A  C024  F02A         	movff	?___awmod,___awdiv@dividend
  5373  000B8E  C025  F02B         	movff	?___awmod+1,___awdiv@dividend+1
  5374  000B92  EC02  F010         	call	___awdiv	;wreg free
  5375  000B96  0E09               	movlw	9
  5376  000B98  262A               	addwf	?___awdiv^0,f,c
  5377  000B9A  502A               	movf	?___awdiv^0,w,c
  5378  000B9C  0D03               	mullw	3
  5379  000B9E  0E00               	movlw	low __npowers_
  5380  000BA0  24F3               	addwf	243,w,c
  5381  000BA2  6EF6               	movwf	tblptrl,c
  5382  000BA4  0EFF               	movlw	high __npowers_
  5383  000BA6  20F4               	addwfc	244,w,c
  5384  000BA8  6EF7               	movwf	tblptrh,c
  5385  000BAA                     	if	0	;There are less than 3 active tblptr bytes
  5386  000BAA                     	endif
  5387  000BAA  0009               	tblrd		*+
  5388  000BAC  CFF5 F035          	movff	tablat,___ftmul@f2
  5389  000BB0  0009               	tblrd		*+
  5390  000BB2  CFF5 F036          	movff	tablat,___ftmul@f2+1
  5391  000BB6  000A               	tblrd		*-
  5392  000BB8  CFF5 F037          	movff	tablat,___ftmul@f2+2
  5393  000BBC  0E00               	movlw	0
  5394  000BBE  6E2D               	movwf	(___awdiv@divisor+1)^0,c
  5395  000BC0  0E64               	movlw	100
  5396  000BC2  6E2C               	movwf	___awdiv@divisor^0,c
  5397  000BC4  0100               	movlb	0	; () banked
  5398  000BC6  518F               	movf	scale@scl& (0+255),w,b
  5399  000BC8  6E2A               	movwf	___awdiv@dividend^0,c
  5400  000BCA  6A2B               	clrf	(___awdiv@dividend+1)^0,c
  5401  000BCC  BE2A               	btfsc	___awdiv@dividend^0,7,c
  5402  000BCE  062B               	decf	(___awdiv@dividend+1)^0,f,c
  5403  000BD0  EC02  F010         	call	___awdiv	;wreg free
  5404  000BD4  0E12               	movlw	18
  5405  000BD6  262A               	addwf	?___awdiv^0,f,c
  5406  000BD8  502A               	movf	?___awdiv^0,w,c
  5407  000BDA  0D03               	mullw	3
  5408  000BDC  0E00               	movlw	low __npowers_
  5409  000BDE  24F3               	addwf	243,w,c
  5410  000BE0  6EF6               	movwf	tblptrl,c
  5411  000BE2  0EFF               	movlw	high __npowers_
  5412  000BE4  20F4               	addwfc	244,w,c
  5413  000BE6  6EF7               	movwf	tblptrh,c
  5414  000BE8                     	if	0	;There are less than 3 active tblptr bytes
  5415  000BE8                     	endif
  5416  000BE8  0009               	tblrd		*+
  5417  000BEA  CFF5 F032          	movff	tablat,___ftmul@f1
  5418  000BEE  0009               	tblrd		*+
  5419  000BF0  CFF5 F033          	movff	tablat,___ftmul@f1+1
  5420  000BF4  000A               	tblrd		*-
  5421  000BF6  CFF5 F034          	movff	tablat,___ftmul@f1+2
  5422  000BFA  EC80  F00D         	call	___ftmul	;wreg free
  5423  000BFE  C032  F08C         	movff	?___ftmul,_scale$1844
  5424  000C02  C033  F08D         	movff	?___ftmul+1,_scale$1844+1
  5425  000C06  C034  F08E         	movff	?___ftmul+2,_scale$1844+2
  5426                           
  5427                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  5428  000C0A  C08C  F032         	movff	_scale$1844,___ftmul@f1
  5429  000C0E  C08D  F033         	movff	_scale$1844+1,___ftmul@f1+1
  5430  000C12  C08E  F034         	movff	_scale$1844+2,___ftmul@f1+2
  5431  000C16  0E00               	movlw	0
  5432  000C18  6E27               	movwf	(___awmod@divisor+1)^0,c
  5433  000C1A  0E0A               	movlw	10
  5434  000C1C  6E26               	movwf	___awmod@divisor^0,c
  5435  000C1E  0100               	movlb	0	; () banked
  5436  000C20  518F               	movf	scale@scl& (0+255),w,b
  5437  000C22  6E24               	movwf	___awmod@dividend^0,c
  5438  000C24  6A25               	clrf	(___awmod@dividend+1)^0,c
  5439  000C26  BE24               	btfsc	___awmod@dividend^0,7,c
  5440  000C28  0625               	decf	(___awmod@dividend+1)^0,f,c
  5441  000C2A  ECF9  F010         	call	___awmod	;wreg free
  5442  000C2E  5024               	movf	?___awmod^0,w,c
  5443  000C30  0D03               	mullw	3
  5444  000C32  0E00               	movlw	low __npowers_
  5445  000C34  24F3               	addwf	243,w,c
  5446  000C36  6EF6               	movwf	tblptrl,c
  5447  000C38  0EFF               	movlw	high __npowers_
  5448  000C3A  20F4               	addwfc	244,w,c
  5449  000C3C  6EF7               	movwf	tblptrh,c
  5450  000C3E                     	if	0	;There are less than 3 active tblptr bytes
  5451  000C3E                     	endif
  5452  000C3E  0009               	tblrd		*+
  5453  000C40  CFF5 F035          	movff	tablat,___ftmul@f2
  5454  000C44  0009               	tblrd		*+
  5455  000C46  CFF5 F036          	movff	tablat,___ftmul@f2+1
  5456  000C4A  000A               	tblrd		*-
  5457  000C4C  CFF5 F037          	movff	tablat,___ftmul@f2+2
  5458  000C50  EC80  F00D         	call	___ftmul	;wreg free
  5459  000C54  C032  F089         	movff	?___ftmul,?_scale
  5460  000C58  C033  F08A         	movff	?___ftmul+1,?_scale+1
  5461  000C5C  C034  F08B         	movff	?___ftmul+2,?_scale+2
  5462  000C60  0012               	return	
  5463  000C62                     l5224:
  5464                           
  5465                           ; BSR set to: 0
  5466                           ;doprnt.c: 440: else if(scl > 10)
  5467  000C62  518F               	movf	scale@scl& (0+255),w,b
  5468  000C64  0A80               	xorlw	128
  5469  000C66  0F75               	addlw	-139
  5470  000C68  A0D8               	btfss	status,0,c
  5471  000C6A  D044               	goto	l5230
  5472                           
  5473                           ; BSR set to: 0
  5474                           ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(
      +                          scl%10)];
  5475  000C6C  0E00               	movlw	0
  5476  000C6E  6E2D               	movwf	(___awdiv@divisor+1)^0,c
  5477  000C70  0E0A               	movlw	10
  5478  000C72  6E2C               	movwf	___awdiv@divisor^0,c
  5479  000C74  518F               	movf	scale@scl& (0+255),w,b
  5480  000C76  6E2A               	movwf	___awdiv@dividend^0,c
  5481  000C78  6A2B               	clrf	(___awdiv@dividend+1)^0,c
  5482  000C7A  BE2A               	btfsc	___awdiv@dividend^0,7,c
  5483  000C7C  062B               	decf	(___awdiv@dividend+1)^0,f,c
  5484  000C7E  EC02  F010         	call	___awdiv	;wreg free
  5485  000C82  0E09               	movlw	9
  5486  000C84  262A               	addwf	?___awdiv^0,f,c
  5487  000C86  502A               	movf	?___awdiv^0,w,c
  5488  000C88  0D03               	mullw	3
  5489  000C8A  0E00               	movlw	low __npowers_
  5490  000C8C  24F3               	addwf	243,w,c
  5491  000C8E  6EF6               	movwf	tblptrl,c
  5492  000C90  0EFF               	movlw	high __npowers_
  5493  000C92  20F4               	addwfc	244,w,c
  5494  000C94  6EF7               	movwf	tblptrh,c
  5495  000C96                     	if	0	;There are less than 3 active tblptr bytes
  5496  000C96                     	endif
  5497  000C96  0009               	tblrd		*+
  5498  000C98  CFF5 F032          	movff	tablat,___ftmul@f1
  5499  000C9C  0009               	tblrd		*+
  5500  000C9E  CFF5 F033          	movff	tablat,___ftmul@f1+1
  5501  000CA2  000A               	tblrd		*-
  5502  000CA4  CFF5 F034          	movff	tablat,___ftmul@f1+2
  5503  000CA8  0E00               	movlw	0
  5504  000CAA  6E27               	movwf	(___awmod@divisor+1)^0,c
  5505  000CAC  0E0A               	movlw	10
  5506  000CAE  6E26               	movwf	___awmod@divisor^0,c
  5507  000CB0  0100               	movlb	0	; () banked
  5508  000CB2  518F               	movf	scale@scl& (0+255),w,b
  5509  000CB4  6E24               	movwf	___awmod@dividend^0,c
  5510  000CB6  6A25               	clrf	(___awmod@dividend+1)^0,c
  5511  000CB8  BE24               	btfsc	___awmod@dividend^0,7,c
  5512  000CBA  0625               	decf	(___awmod@dividend+1)^0,f,c
  5513  000CBC  ECF9  F010         	call	___awmod	;wreg free
  5514  000CC0  5024               	movf	?___awmod^0,w,c
  5515  000CC2  0D03               	mullw	3
  5516  000CC4  0E00               	movlw	low __npowers_
  5517  000CC6  24F3               	addwf	243,w,c
  5518  000CC8  6EF6               	movwf	tblptrl,c
  5519  000CCA  0EFF               	movlw	high __npowers_
  5520  000CCC  20F4               	addwfc	244,w,c
  5521  000CCE  6EF7               	movwf	tblptrh,c
  5522  000CD0                     	if	0	;There are less than 3 active tblptr bytes
  5523  000CD0                     	endif
  5524  000CD0  0009               	tblrd		*+
  5525  000CD2  CFF5 F035          	movff	tablat,___ftmul@f2
  5526  000CD6  0009               	tblrd		*+
  5527  000CD8  CFF5 F036          	movff	tablat,___ftmul@f2+1
  5528  000CDC  000A               	tblrd		*-
  5529  000CDE  CFF5 F037          	movff	tablat,___ftmul@f2+2
  5530  000CE2  EC80  F00D         	call	___ftmul	;wreg free
  5531  000CE6  C032  F089         	movff	?___ftmul,?_scale
  5532  000CEA  C033  F08A         	movff	?___ftmul+1,?_scale+1
  5533  000CEE  C034  F08B         	movff	?___ftmul+2,?_scale+2
  5534  000CF2  0012               	return	
  5535  000CF4                     l5230:
  5536                           
  5537                           ; BSR set to: 0
  5538                           ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
  5539  000CF4  518F               	movf	scale@scl& (0+255),w,b
  5540  000CF6  0D03               	mullw	3
  5541  000CF8  0E00               	movlw	low __npowers_
  5542  000CFA  24F3               	addwf	243,w,c
  5543  000CFC  6EF6               	movwf	tblptrl,c
  5544  000CFE  0EFF               	movlw	high __npowers_
  5545  000D00  20F4               	addwfc	244,w,c
  5546  000D02  6EF7               	movwf	tblptrh,c
  5547  000D04                     	if	0	;There are less than 3 active tblptr bytes
  5548  000D04                     	endif
  5549  000D04  0009               	tblrd		*+
  5550  000D06  CFF5 F089          	movff	tablat,?_scale
  5551  000D0A  0009               	tblrd		*+
  5552  000D0C  CFF5 F08A          	movff	tablat,?_scale+1
  5553  000D10  000A               	tblrd		*-
  5554  000D12  CFF5 F08B          	movff	tablat,?_scale+2
  5555  000D16  0012               	return	
  5556  000D18                     l5234:
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;doprnt.c: 443: };doprnt.c: 444: if(scl>=110)
  5560  000D18  518F               	movf	scale@scl& (0+255),w,b
  5561  000D1A  0A80               	xorlw	128
  5562  000D1C  0F12               	addlw	-238
  5563  000D1E  A0D8               	btfss	status,0,c
  5564  000D20  D07B               	goto	l5242
  5565                           
  5566                           ; BSR set to: 0
  5567                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  5568  000D22  0E00               	movlw	0
  5569  000D24  6E2D               	movwf	(___awdiv@divisor+1)^0,c
  5570  000D26  0E0A               	movlw	10
  5571  000D28  6E2C               	movwf	___awdiv@divisor^0,c
  5572  000D2A  0E00               	movlw	0
  5573  000D2C  6E27               	movwf	(___awmod@divisor+1)^0,c
  5574  000D2E  0E64               	movlw	100
  5575  000D30  6E26               	movwf	___awmod@divisor^0,c
  5576  000D32  518F               	movf	scale@scl& (0+255),w,b
  5577  000D34  6E24               	movwf	___awmod@dividend^0,c
  5578  000D36  6A25               	clrf	(___awmod@dividend+1)^0,c
  5579  000D38  BE24               	btfsc	___awmod@dividend^0,7,c
  5580  000D3A  0625               	decf	(___awmod@dividend+1)^0,f,c
  5581  000D3C  ECF9  F010         	call	___awmod	;wreg free
  5582  000D40  C024  F02A         	movff	?___awmod,___awdiv@dividend
  5583  000D44  C025  F02B         	movff	?___awmod+1,___awdiv@dividend+1
  5584  000D48  EC02  F010         	call	___awdiv	;wreg free
  5585  000D4C  0E09               	movlw	9
  5586  000D4E  262A               	addwf	?___awdiv^0,f,c
  5587  000D50  502A               	movf	?___awdiv^0,w,c
  5588  000D52  0D03               	mullw	3
  5589  000D54  0ED9               	movlw	low __powers_
  5590  000D56  24F3               	addwf	243,w,c
  5591  000D58  6EF6               	movwf	tblptrl,c
  5592  000D5A  0EFE               	movlw	high __powers_
  5593  000D5C  20F4               	addwfc	244,w,c
  5594  000D5E  6EF7               	movwf	tblptrh,c
  5595  000D60                     	if	0	;There are less than 3 active tblptr bytes
  5596  000D60                     	endif
  5597  000D60  0009               	tblrd		*+
  5598  000D62  CFF5 F035          	movff	tablat,___ftmul@f2
  5599  000D66  0009               	tblrd		*+
  5600  000D68  CFF5 F036          	movff	tablat,___ftmul@f2+1
  5601  000D6C  000A               	tblrd		*-
  5602  000D6E  CFF5 F037          	movff	tablat,___ftmul@f2+2
  5603  000D72  0E00               	movlw	0
  5604  000D74  6E2D               	movwf	(___awdiv@divisor+1)^0,c
  5605  000D76  0E64               	movlw	100
  5606  000D78  6E2C               	movwf	___awdiv@divisor^0,c
  5607  000D7A  0100               	movlb	0	; () banked
  5608  000D7C  518F               	movf	scale@scl& (0+255),w,b
  5609  000D7E  6E2A               	movwf	___awdiv@dividend^0,c
  5610  000D80  6A2B               	clrf	(___awdiv@dividend+1)^0,c
  5611  000D82  BE2A               	btfsc	___awdiv@dividend^0,7,c
  5612  000D84  062B               	decf	(___awdiv@dividend+1)^0,f,c
  5613  000D86  EC02  F010         	call	___awdiv	;wreg free
  5614  000D8A  0E12               	movlw	18
  5615  000D8C  262A               	addwf	?___awdiv^0,f,c
  5616  000D8E  502A               	movf	?___awdiv^0,w,c
  5617  000D90  0D03               	mullw	3
  5618  000D92  0ED9               	movlw	low __powers_
  5619  000D94  24F3               	addwf	243,w,c
  5620  000D96  6EF6               	movwf	tblptrl,c
  5621  000D98  0EFE               	movlw	high __powers_
  5622  000D9A  20F4               	addwfc	244,w,c
  5623  000D9C  6EF7               	movwf	tblptrh,c
  5624  000D9E                     	if	0	;There are less than 3 active tblptr bytes
  5625  000D9E                     	endif
  5626  000D9E  0009               	tblrd		*+
  5627  000DA0  CFF5 F032          	movff	tablat,___ftmul@f1
  5628  000DA4  0009               	tblrd		*+
  5629  000DA6  CFF5 F033          	movff	tablat,___ftmul@f1+1
  5630  000DAA  000A               	tblrd		*-
  5631  000DAC  CFF5 F034          	movff	tablat,___ftmul@f1+2
  5632  000DB0  EC80  F00D         	call	___ftmul	;wreg free
  5633  000DB4  C032  F08C         	movff	?___ftmul,_scale$1844
  5634  000DB8  C033  F08D         	movff	?___ftmul+1,_scale$1844+1
  5635  000DBC  C034  F08E         	movff	?___ftmul+2,_scale$1844+2
  5636                           
  5637                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  5638  000DC0  C08C  F032         	movff	_scale$1844,___ftmul@f1
  5639  000DC4  C08D  F033         	movff	_scale$1844+1,___ftmul@f1+1
  5640  000DC8  C08E  F034         	movff	_scale$1844+2,___ftmul@f1+2
  5641  000DCC  0E00               	movlw	0
  5642  000DCE  6E27               	movwf	(___awmod@divisor+1)^0,c
  5643  000DD0  0E0A               	movlw	10
  5644  000DD2  6E26               	movwf	___awmod@divisor^0,c
  5645  000DD4  0100               	movlb	0	; () banked
  5646  000DD6  518F               	movf	scale@scl& (0+255),w,b
  5647  000DD8  6E24               	movwf	___awmod@dividend^0,c
  5648  000DDA  6A25               	clrf	(___awmod@dividend+1)^0,c
  5649  000DDC  BE24               	btfsc	___awmod@dividend^0,7,c
  5650  000DDE  0625               	decf	(___awmod@dividend+1)^0,f,c
  5651  000DE0  ECF9  F010         	call	___awmod	;wreg free
  5652  000DE4  5024               	movf	?___awmod^0,w,c
  5653  000DE6  0D03               	mullw	3
  5654  000DE8  0ED9               	movlw	low __powers_
  5655  000DEA  24F3               	addwf	243,w,c
  5656  000DEC  6EF6               	movwf	tblptrl,c
  5657  000DEE  0EFE               	movlw	high __powers_
  5658  000DF0  20F4               	addwfc	244,w,c
  5659  000DF2  6EF7               	movwf	tblptrh,c
  5660  000DF4                     	if	0	;There are less than 3 active tblptr bytes
  5661  000DF4                     	endif
  5662  000DF4  0009               	tblrd		*+
  5663  000DF6  CFF5 F035          	movff	tablat,___ftmul@f2
  5664  000DFA  0009               	tblrd		*+
  5665  000DFC  CFF5 F036          	movff	tablat,___ftmul@f2+1
  5666  000E00  000A               	tblrd		*-
  5667  000E02  CFF5 F037          	movff	tablat,___ftmul@f2+2
  5668  000E06  EC80  F00D         	call	___ftmul	;wreg free
  5669  000E0A  C032  F089         	movff	?___ftmul,?_scale
  5670  000E0E  C033  F08A         	movff	?___ftmul+1,?_scale+1
  5671  000E12  C034  F08B         	movff	?___ftmul+2,?_scale+2
  5672  000E16  0012               	return	
  5673  000E18                     l5242:
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;doprnt.c: 446: else if(scl > 10)
  5677  000E18  518F               	movf	scale@scl& (0+255),w,b
  5678  000E1A  0A80               	xorlw	128
  5679  000E1C  0F75               	addlw	-139
  5680  000E1E  A0D8               	btfss	status,0,c
  5681  000E20  D044               	goto	l5248
  5682                           
  5683                           ; BSR set to: 0
  5684                           ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(sc
      +                          l%10)];
  5685  000E22  0E00               	movlw	0
  5686  000E24  6E2D               	movwf	(___awdiv@divisor+1)^0,c
  5687  000E26  0E0A               	movlw	10
  5688  000E28  6E2C               	movwf	___awdiv@divisor^0,c
  5689  000E2A  518F               	movf	scale@scl& (0+255),w,b
  5690  000E2C  6E2A               	movwf	___awdiv@dividend^0,c
  5691  000E2E  6A2B               	clrf	(___awdiv@dividend+1)^0,c
  5692  000E30  BE2A               	btfsc	___awdiv@dividend^0,7,c
  5693  000E32  062B               	decf	(___awdiv@dividend+1)^0,f,c
  5694  000E34  EC02  F010         	call	___awdiv	;wreg free
  5695  000E38  0E09               	movlw	9
  5696  000E3A  262A               	addwf	?___awdiv^0,f,c
  5697  000E3C  502A               	movf	?___awdiv^0,w,c
  5698  000E3E  0D03               	mullw	3
  5699  000E40  0ED9               	movlw	low __powers_
  5700  000E42  24F3               	addwf	243,w,c
  5701  000E44  6EF6               	movwf	tblptrl,c
  5702  000E46  0EFE               	movlw	high __powers_
  5703  000E48  20F4               	addwfc	244,w,c
  5704  000E4A  6EF7               	movwf	tblptrh,c
  5705  000E4C                     	if	0	;There are less than 3 active tblptr bytes
  5706  000E4C                     	endif
  5707  000E4C  0009               	tblrd		*+
  5708  000E4E  CFF5 F032          	movff	tablat,___ftmul@f1
  5709  000E52  0009               	tblrd		*+
  5710  000E54  CFF5 F033          	movff	tablat,___ftmul@f1+1
  5711  000E58  000A               	tblrd		*-
  5712  000E5A  CFF5 F034          	movff	tablat,___ftmul@f1+2
  5713  000E5E  0E00               	movlw	0
  5714  000E60  6E27               	movwf	(___awmod@divisor+1)^0,c
  5715  000E62  0E0A               	movlw	10
  5716  000E64  6E26               	movwf	___awmod@divisor^0,c
  5717  000E66  0100               	movlb	0	; () banked
  5718  000E68  518F               	movf	scale@scl& (0+255),w,b
  5719  000E6A  6E24               	movwf	___awmod@dividend^0,c
  5720  000E6C  6A25               	clrf	(___awmod@dividend+1)^0,c
  5721  000E6E  BE24               	btfsc	___awmod@dividend^0,7,c
  5722  000E70  0625               	decf	(___awmod@dividend+1)^0,f,c
  5723  000E72  ECF9  F010         	call	___awmod	;wreg free
  5724  000E76  5024               	movf	?___awmod^0,w,c
  5725  000E78  0D03               	mullw	3
  5726  000E7A  0ED9               	movlw	low __powers_
  5727  000E7C  24F3               	addwf	243,w,c
  5728  000E7E  6EF6               	movwf	tblptrl,c
  5729  000E80  0EFE               	movlw	high __powers_
  5730  000E82  20F4               	addwfc	244,w,c
  5731  000E84  6EF7               	movwf	tblptrh,c
  5732  000E86                     	if	0	;There are less than 3 active tblptr bytes
  5733  000E86                     	endif
  5734  000E86  0009               	tblrd		*+
  5735  000E88  CFF5 F035          	movff	tablat,___ftmul@f2
  5736  000E8C  0009               	tblrd		*+
  5737  000E8E  CFF5 F036          	movff	tablat,___ftmul@f2+1
  5738  000E92  000A               	tblrd		*-
  5739  000E94  CFF5 F037          	movff	tablat,___ftmul@f2+2
  5740  000E98  EC80  F00D         	call	___ftmul	;wreg free
  5741  000E9C  C032  F089         	movff	?___ftmul,?_scale
  5742  000EA0  C033  F08A         	movff	?___ftmul+1,?_scale+1
  5743  000EA4  C034  F08B         	movff	?___ftmul+2,?_scale+2
  5744  000EA8  0012               	return	
  5745  000EAA                     l5248:
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;doprnt.c: 448: return _powers_[(unsigned char)scl];
  5749  000EAA  518F               	movf	scale@scl& (0+255),w,b
  5750  000EAC  0D03               	mullw	3
  5751  000EAE  0ED9               	movlw	low __powers_
  5752  000EB0  24F3               	addwf	243,w,c
  5753  000EB2  6EF6               	movwf	tblptrl,c
  5754  000EB4  0EFE               	movlw	high __powers_
  5755  000EB6  20F4               	addwfc	244,w,c
  5756  000EB8  6EF7               	movwf	tblptrh,c
  5757  000EBA                     	if	0	;There are less than 3 active tblptr bytes
  5758  000EBA                     	endif
  5759  000EBA  0009               	tblrd		*+
  5760  000EBC  CFF5 F089          	movff	tablat,?_scale
  5761  000EC0  0009               	tblrd		*+
  5762  000EC2  CFF5 F08A          	movff	tablat,?_scale+1
  5763  000EC6  000A               	tblrd		*-
  5764  000EC8  CFF5 F08B          	movff	tablat,?_scale+2
  5765  000ECC  0012               	return		;funcret
  5766  000ECE                     __end_of_scale:
  5767                           	callstack 0
  5768                           
  5769 ;; *************** function ___awmod *****************
  5770 ;; Defined at:
  5771 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awmod.c"
  5772 ;; Parameters:    Size  Location     Type
  5773 ;;  dividend        2   35[COMRAM] int 
  5774 ;;  divisor         2   37[COMRAM] int 
  5775 ;; Auto vars:     Size  Location     Type
  5776 ;;  sign            1   40[COMRAM] unsigned char 
  5777 ;;  counter         1   39[COMRAM] unsigned char 
  5778 ;; Return value:  Size  Location     Type
  5779 ;;                  2   35[COMRAM] int 
  5780 ;; Registers used:
  5781 ;;		wreg, status,2, status,0
  5782 ;; Tracked objects:
  5783 ;;		On entry : 3F/0
  5784 ;;		On exit  : 3F/0
  5785 ;;		Unchanged: 3F/0
  5786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5787 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5788 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5790 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5791 ;;Total ram usage:        6 bytes
  5792 ;; Hardware stack levels used:    1
  5793 ;; Hardware stack levels required when called:    5
  5794 ;; This function calls:
  5795 ;;		Nothing
  5796 ;; This function is called by:
  5797 ;;		_scale
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           	psect	text17
  5802  0021F2                     __ptext17:
  5803                           	callstack 0
  5804  0021F2                     ___awmod:
  5805                           	callstack 22
  5806                           
  5807                           ; BSR set to: 0
  5808                           
  5809                           ;incstack = 0
  5810  0021F2  0E00               	movlw	0
  5811  0021F4  6E29               	movwf	___awmod@sign^0,c
  5812                           
  5813                           ; BSR set to: 0
  5814  0021F6  AE25               	btfss	(___awmod@dividend+1)^0,7,c
  5815  0021F8  D006               	goto	l5112
  5816                           
  5817                           ; BSR set to: 0
  5818  0021FA  6C24               	negf	___awmod@dividend^0,c
  5819  0021FC  1E25               	comf	(___awmod@dividend+1)^0,f,c
  5820  0021FE  B0D8               	btfsc	status,0,c
  5821  002200  2A25               	incf	(___awmod@dividend+1)^0,f,c
  5822                           
  5823                           ; BSR set to: 0
  5824  002202  0E01               	movlw	1
  5825  002204  6E29               	movwf	___awmod@sign^0,c
  5826  002206                     l5112:
  5827                           
  5828                           ; BSR set to: 0
  5829  002206  AE27               	btfss	(___awmod@divisor+1)^0,7,c
  5830  002208  D004               	goto	l5116
  5831                           
  5832                           ; BSR set to: 0
  5833  00220A  6C26               	negf	___awmod@divisor^0,c
  5834  00220C  1E27               	comf	(___awmod@divisor+1)^0,f,c
  5835  00220E  B0D8               	btfsc	status,0,c
  5836  002210  2A27               	incf	(___awmod@divisor+1)^0,f,c
  5837  002212                     l5116:
  5838                           
  5839                           ; BSR set to: 0
  5840  002212  5026               	movf	___awmod@divisor^0,w,c
  5841  002214  1027               	iorwf	(___awmod@divisor+1)^0,w,c
  5842  002216  B4D8               	btfsc	status,2,c
  5843  002218  D018               	goto	l5132
  5844                           
  5845                           ; BSR set to: 0
  5846  00221A  0E01               	movlw	1
  5847  00221C  6E28               	movwf	___awmod@counter^0,c
  5848  00221E  D004               	goto	l5122
  5849  002220                     l5120:
  5850                           
  5851                           ; BSR set to: 0
  5852  002220  90D8               	bcf	status,0,c
  5853  002222  3626               	rlcf	___awmod@divisor^0,f,c
  5854  002224  3627               	rlcf	(___awmod@divisor+1)^0,f,c
  5855  002226  2A28               	incf	___awmod@counter^0,f,c
  5856  002228                     l5122:
  5857                           
  5858                           ; BSR set to: 0
  5859  002228  AE27               	btfss	(___awmod@divisor+1)^0,7,c
  5860  00222A  D7FA               	goto	l5120
  5861  00222C                     u5980:
  5862                           
  5863                           ; BSR set to: 0
  5864  00222C  5026               	movf	___awmod@divisor^0,w,c
  5865  00222E  5C24               	subwf	___awmod@dividend^0,w,c
  5866  002230  5027               	movf	(___awmod@divisor+1)^0,w,c
  5867  002232  5825               	subwfb	(___awmod@dividend+1)^0,w,c
  5868  002234  A0D8               	btfss	status,0,c
  5869  002236  D004               	goto	l5128
  5870                           
  5871                           ; BSR set to: 0
  5872  002238  5026               	movf	___awmod@divisor^0,w,c
  5873  00223A  5E24               	subwf	___awmod@dividend^0,f,c
  5874  00223C  5027               	movf	(___awmod@divisor+1)^0,w,c
  5875  00223E  5A25               	subwfb	(___awmod@dividend+1)^0,f,c
  5876  002240                     l5128:
  5877                           
  5878                           ; BSR set to: 0
  5879  002240  90D8               	bcf	status,0,c
  5880  002242  3227               	rrcf	(___awmod@divisor+1)^0,f,c
  5881  002244  3226               	rrcf	___awmod@divisor^0,f,c
  5882                           
  5883                           ; BSR set to: 0
  5884  002246  2E28               	decfsz	___awmod@counter^0,f,c
  5885  002248  D7F1               	goto	u5980
  5886  00224A                     l5132:
  5887                           
  5888                           ; BSR set to: 0
  5889  00224A  5029               	movf	___awmod@sign^0,w,c
  5890  00224C  B4D8               	btfsc	status,2,c
  5891  00224E  D004               	goto	l5136
  5892                           
  5893                           ; BSR set to: 0
  5894  002250  6C24               	negf	___awmod@dividend^0,c
  5895  002252  1E25               	comf	(___awmod@dividend+1)^0,f,c
  5896  002254  B0D8               	btfsc	status,0,c
  5897  002256  2A25               	incf	(___awmod@dividend+1)^0,f,c
  5898  002258                     l5136:
  5899                           
  5900                           ; BSR set to: 0
  5901  002258  C024  F024         	movff	___awmod@dividend,?___awmod
  5902  00225C  C025  F025         	movff	___awmod@dividend+1,?___awmod+1
  5903                           
  5904                           ; BSR set to: 0
  5905  002260  0012               	return		;funcret
  5906  002262                     __end_of___awmod:
  5907                           	callstack 0
  5908                           
  5909 ;; *************** function ___awdiv *****************
  5910 ;; Defined at:
  5911 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awdiv.c"
  5912 ;; Parameters:    Size  Location     Type
  5913 ;;  dividend        2   41[COMRAM] int 
  5914 ;;  divisor         2   43[COMRAM] int 
  5915 ;; Auto vars:     Size  Location     Type
  5916 ;;  quotient        2   47[COMRAM] int 
  5917 ;;  sign            1   46[COMRAM] unsigned char 
  5918 ;;  counter         1   45[COMRAM] unsigned char 
  5919 ;; Return value:  Size  Location     Type
  5920 ;;                  2   41[COMRAM] int 
  5921 ;; Registers used:
  5922 ;;		wreg, status,2, status,0
  5923 ;; Tracked objects:
  5924 ;;		On entry : 0/0
  5925 ;;		On exit  : 0/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5928 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5929 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5931 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5932 ;;Total ram usage:        8 bytes
  5933 ;; Hardware stack levels used:    1
  5934 ;; Hardware stack levels required when called:    5
  5935 ;; This function calls:
  5936 ;;		Nothing
  5937 ;; This function is called by:
  5938 ;;		_scale
  5939 ;;		_sprintf
  5940 ;; This function uses a non-reentrant model
  5941 ;;
  5942                           
  5943                           	psect	text18
  5944  002004                     __ptext18:
  5945                           	callstack 0
  5946  002004                     ___awdiv:
  5947                           	callstack 22
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;incstack = 0
  5951  002004  0E00               	movlw	0
  5952  002006  6E2F               	movwf	___awdiv@sign^0,c
  5953  002008  AE2D               	btfss	(___awdiv@divisor+1)^0,7,c
  5954  00200A  D006               	goto	l5068
  5955  00200C  6C2C               	negf	___awdiv@divisor^0,c
  5956  00200E  1E2D               	comf	(___awdiv@divisor+1)^0,f,c
  5957  002010  B0D8               	btfsc	status,0,c
  5958  002012  2A2D               	incf	(___awdiv@divisor+1)^0,f,c
  5959  002014  0E01               	movlw	1
  5960  002016  6E2F               	movwf	___awdiv@sign^0,c
  5961  002018                     l5068:
  5962  002018  AE2B               	btfss	(___awdiv@dividend+1)^0,7,c
  5963  00201A  D006               	goto	l5074
  5964  00201C  6C2A               	negf	___awdiv@dividend^0,c
  5965  00201E  1E2B               	comf	(___awdiv@dividend+1)^0,f,c
  5966  002020  B0D8               	btfsc	status,0,c
  5967  002022  2A2B               	incf	(___awdiv@dividend+1)^0,f,c
  5968  002024  0E01               	movlw	1
  5969  002026  1A2F               	xorwf	___awdiv@sign^0,f,c
  5970  002028                     l5074:
  5971  002028  0E00               	movlw	0
  5972  00202A  6E31               	movwf	(___awdiv@quotient+1)^0,c
  5973  00202C  0E00               	movlw	0
  5974  00202E  6E30               	movwf	___awdiv@quotient^0,c
  5975  002030  502C               	movf	___awdiv@divisor^0,w,c
  5976  002032  102D               	iorwf	(___awdiv@divisor+1)^0,w,c
  5977  002034  B4D8               	btfsc	status,2,c
  5978  002036  D01C               	goto	l5096
  5979  002038  0E01               	movlw	1
  5980  00203A  6E2E               	movwf	___awdiv@counter^0,c
  5981  00203C  D004               	goto	l5082
  5982  00203E                     l5080:
  5983  00203E  90D8               	bcf	status,0,c
  5984  002040  362C               	rlcf	___awdiv@divisor^0,f,c
  5985  002042  362D               	rlcf	(___awdiv@divisor+1)^0,f,c
  5986  002044  2A2E               	incf	___awdiv@counter^0,f,c
  5987  002046                     l5082:
  5988  002046  AE2D               	btfss	(___awdiv@divisor+1)^0,7,c
  5989  002048  D7FA               	goto	l5080
  5990  00204A                     u5920:
  5991  00204A  90D8               	bcf	status,0,c
  5992  00204C  3630               	rlcf	___awdiv@quotient^0,f,c
  5993  00204E  3631               	rlcf	(___awdiv@quotient+1)^0,f,c
  5994  002050  502C               	movf	___awdiv@divisor^0,w,c
  5995  002052  5C2A               	subwf	___awdiv@dividend^0,w,c
  5996  002054  502D               	movf	(___awdiv@divisor+1)^0,w,c
  5997  002056  582B               	subwfb	(___awdiv@dividend+1)^0,w,c
  5998  002058  A0D8               	btfss	status,0,c
  5999  00205A  D005               	goto	l5092
  6000  00205C  502C               	movf	___awdiv@divisor^0,w,c
  6001  00205E  5E2A               	subwf	___awdiv@dividend^0,f,c
  6002  002060  502D               	movf	(___awdiv@divisor+1)^0,w,c
  6003  002062  5A2B               	subwfb	(___awdiv@dividend+1)^0,f,c
  6004  002064  8030               	bsf	___awdiv@quotient^0,0,c
  6005  002066                     l5092:
  6006  002066  90D8               	bcf	status,0,c
  6007  002068  322D               	rrcf	(___awdiv@divisor+1)^0,f,c
  6008  00206A  322C               	rrcf	___awdiv@divisor^0,f,c
  6009  00206C  2E2E               	decfsz	___awdiv@counter^0,f,c
  6010  00206E  D7ED               	goto	u5920
  6011  002070                     l5096:
  6012  002070  502F               	movf	___awdiv@sign^0,w,c
  6013  002072  B4D8               	btfsc	status,2,c
  6014  002074  D004               	goto	l5100
  6015  002076  6C30               	negf	___awdiv@quotient^0,c
  6016  002078  1E31               	comf	(___awdiv@quotient+1)^0,f,c
  6017  00207A  B0D8               	btfsc	status,0,c
  6018  00207C  2A31               	incf	(___awdiv@quotient+1)^0,f,c
  6019  00207E                     l5100:
  6020  00207E  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  6021  002082  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  6022  002086  0012               	return		;funcret
  6023  002088                     __end_of___awdiv:
  6024                           	callstack 0
  6025                           
  6026 ;; *************** function _isdigit *****************
  6027 ;; Defined at:
  6028 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\isdigit.c"
  6029 ;; Parameters:    Size  Location     Type
  6030 ;;  c               1    wreg     unsigned char 
  6031 ;; Auto vars:     Size  Location     Type
  6032 ;;  c               1   37[COMRAM] unsigned char 
  6033 ;; Return value:  Size  Location     Type
  6034 ;;		None               void
  6035 ;; Registers used:
  6036 ;;		wreg, status,2, status,0
  6037 ;; Tracked objects:
  6038 ;;		On entry : 3F/0
  6039 ;;		On exit  : 0/0
  6040 ;;		Unchanged: 0/0
  6041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6043 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6044 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6045 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6046 ;;Total ram usage:        3 bytes
  6047 ;; Hardware stack levels used:    1
  6048 ;; Hardware stack levels required when called:    5
  6049 ;; This function calls:
  6050 ;;		Nothing
  6051 ;; This function is called by:
  6052 ;;		_sprintf
  6053 ;; This function uses a non-reentrant model
  6054 ;;
  6055                           
  6056                           	psect	text19
  6057  002A62                     __ptext19:
  6058                           	callstack 0
  6059  002A62                     _isdigit:
  6060                           	callstack 23
  6061                           
  6062                           ;incstack = 0
  6063                           ;isdigit@c stored from wreg
  6064  002A62  6E26               	movwf	isdigit@c^0,c
  6065  002A64  0E00               	movlw	0
  6066  002A66  6E25               	movwf	_isdigit$1593^0,c
  6067  002A68  0E3A               	movlw	58
  6068  002A6A  6026               	cpfslt	isdigit@c^0,c
  6069  002A6C  D005               	goto	l5260
  6070  002A6E  0E2F               	movlw	47
  6071  002A70  6426               	cpfsgt	isdigit@c^0,c
  6072  002A72  D002               	goto	l5260
  6073  002A74  0E01               	movlw	1
  6074  002A76  6E25               	movwf	_isdigit$1593^0,c
  6075  002A78                     l5260:
  6076  002A78  C025  F024         	movff	_isdigit$1593,??_isdigit
  6077  002A7C  3024               	rrcf	??_isdigit^0,w,c
  6078  002A7E  0012               	return		;funcret
  6079  002A80                     __end_of_isdigit:
  6080                           	callstack 0
  6081                           
  6082 ;; *************** function _fround *****************
  6083 ;; Defined at:
  6084 ;;		line 417 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c"
  6085 ;; Parameters:    Size  Location     Type
  6086 ;;  prec            1    wreg     unsigned char 
  6087 ;; Auto vars:     Size  Location     Type
  6088 ;;  prec            1   18[BANK0 ] unsigned char 
  6089 ;; Return value:  Size  Location     Type
  6090 ;;                  3    9[BANK0 ] unsigned char 
  6091 ;; Registers used:
  6092 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6093 ;; Tracked objects:
  6094 ;;		On entry : 3F/0
  6095 ;;		On exit  : 0/0
  6096 ;;		Unchanged: 0/0
  6097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6098 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6099 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6100 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6101 ;;      Totals:         1      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6102 ;;Total ram usage:       11 bytes
  6103 ;; Hardware stack levels used:    1
  6104 ;; Hardware stack levels required when called:    7
  6105 ;; This function calls:
  6106 ;;		___ftmul
  6107 ;;		___lbdiv
  6108 ;;		___lbmod
  6109 ;; This function is called by:
  6110 ;;		_sprintf
  6111 ;; This function uses a non-reentrant model
  6112 ;;
  6113                           
  6114                           	psect	text20
  6115  0013C0                     __ptext20:
  6116                           	callstack 0
  6117  0013C0                     _fround:
  6118                           	callstack 21
  6119                           
  6120                           ;incstack = 0
  6121                           ;fround@prec stored from wreg
  6122  0013C0  6F92               	movwf	fround@prec& (0+255),b
  6123                           
  6124                           ;doprnt.c: 421: if(prec>=110)
  6125  0013C2  0E6D               	movlw	109
  6126  0013C4  0100               	movlb	0	; () banked
  6127  0013C6  6592               	cpfsgt	fround@prec& (0+255),b
  6128  0013C8  D07E               	goto	l5204
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  6132  0013CA  0E00               	movlw	0
  6133  0013CC  6E35               	movwf	___ftmul@f2^0,c
  6134  0013CE  0E00               	movlw	0
  6135  0013D0  6E36               	movwf	(___ftmul@f2+1)^0,c
  6136  0013D2  0E3F               	movlw	63
  6137  0013D4  6E37               	movwf	(___ftmul@f2+2)^0,c
  6138  0013D6  0E64               	movlw	100
  6139  0013D8  6E28               	movwf	___lbdiv@divisor^0,c
  6140  0013DA  5192               	movf	fround@prec& (0+255),w,b
  6141  0013DC  EC13  F014         	call	___lbdiv
  6142  0013E0  6E38               	movwf	??_fround^0,c
  6143  0013E2  5038               	movf	??_fround^0,w,c
  6144  0013E4  0D03               	mullw	3
  6145  0013E6  0E36               	movlw	54
  6146  0013E8  26F3               	addwf	243,f,c
  6147  0013EA  0E00               	movlw	0
  6148  0013EC  22F4               	addwfc	244,f,c
  6149  0013EE  0E00               	movlw	low __npowers_
  6150  0013F0  24F3               	addwf	243,w,c
  6151  0013F2  6EF6               	movwf	tblptrl,c
  6152  0013F4  0EFF               	movlw	high __npowers_
  6153  0013F6  20F4               	addwfc	244,w,c
  6154  0013F8  6EF7               	movwf	tblptrh,c
  6155  0013FA                     	if	0	;There are less than 3 active tblptr bytes
  6156  0013FA                     	endif
  6157  0013FA  0009               	tblrd		*+
  6158  0013FC  CFF5 F032          	movff	tablat,___ftmul@f1
  6159  001400  0009               	tblrd		*+
  6160  001402  CFF5 F033          	movff	tablat,___ftmul@f1+1
  6161  001406  000A               	tblrd		*-
  6162  001408  CFF5 F034          	movff	tablat,___ftmul@f1+2
  6163  00140C  EC80  F00D         	call	___ftmul	;wreg free
  6164  001410  C032  F08F         	movff	?___ftmul,_fround$1842
  6165  001414  C033  F090         	movff	?___ftmul+1,_fround$1842+1
  6166  001418  C034  F091         	movff	?___ftmul+2,_fround$1842+2
  6167                           
  6168                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  6169  00141C  0E0A               	movlw	10
  6170  00141E  6E28               	movwf	___lbdiv@divisor^0,c
  6171  001420  0E64               	movlw	100
  6172  001422  6E24               	movwf	___lbmod@divisor^0,c
  6173  001424  0100               	movlb	0	; () banked
  6174  001426  5192               	movf	fround@prec& (0+255),w,b
  6175  001428  ECB2  F014         	call	___lbmod
  6176  00142C  EC13  F014         	call	___lbdiv
  6177  001430  6E38               	movwf	??_fround^0,c
  6178  001432  5038               	movf	??_fround^0,w,c
  6179  001434  0D03               	mullw	3
  6180  001436  0E1B               	movlw	27
  6181  001438  26F3               	addwf	243,f,c
  6182  00143A  0E00               	movlw	0
  6183  00143C  22F4               	addwfc	244,f,c
  6184  00143E  0E00               	movlw	low __npowers_
  6185  001440  24F3               	addwf	243,w,c
  6186  001442  6EF6               	movwf	tblptrl,c
  6187  001444  0EFF               	movlw	high __npowers_
  6188  001446  20F4               	addwfc	244,w,c
  6189  001448  6EF7               	movwf	tblptrh,c
  6190  00144A                     	if	0	;There are less than 3 active tblptr bytes
  6191  00144A                     	endif
  6192  00144A  0009               	tblrd		*+
  6193  00144C  CFF5 F035          	movff	tablat,___ftmul@f2
  6194  001450  0009               	tblrd		*+
  6195  001452  CFF5 F036          	movff	tablat,___ftmul@f2+1
  6196  001456  000A               	tblrd		*-
  6197  001458  CFF5 F037          	movff	tablat,___ftmul@f2+2
  6198  00145C  C08F  F032         	movff	_fround$1842,___ftmul@f1
  6199  001460  C090  F033         	movff	_fround$1842+1,___ftmul@f1+1
  6200  001464  C091  F034         	movff	_fround$1842+2,___ftmul@f1+2
  6201  001468  EC80  F00D         	call	___ftmul	;wreg free
  6202  00146C  C032  F08C         	movff	?___ftmul,_fround$1843
  6203  001470  C033  F08D         	movff	?___ftmul+1,_fround$1843+1
  6204  001474  C034  F08E         	movff	?___ftmul+2,_fround$1843+2
  6205                           
  6206                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  6207  001478  C08C  F032         	movff	_fround$1843,___ftmul@f1
  6208  00147C  C08D  F033         	movff	_fround$1843+1,___ftmul@f1+1
  6209  001480  C08E  F034         	movff	_fround$1843+2,___ftmul@f1+2
  6210  001484  0E0A               	movlw	10
  6211  001486  6E24               	movwf	___lbmod@divisor^0,c
  6212  001488  0100               	movlb	0	; () banked
  6213  00148A  5192               	movf	fround@prec& (0+255),w,b
  6214  00148C  ECB2  F014         	call	___lbmod
  6215  001490  6E38               	movwf	??_fround^0,c
  6216  001492  5038               	movf	??_fround^0,w,c
  6217  001494  0D03               	mullw	3
  6218  001496  0E00               	movlw	low __npowers_
  6219  001498  24F3               	addwf	243,w,c
  6220  00149A  6EF6               	movwf	tblptrl,c
  6221  00149C  0EFF               	movlw	high __npowers_
  6222  00149E  20F4               	addwfc	244,w,c
  6223  0014A0  6EF7               	movwf	tblptrh,c
  6224  0014A2                     	if	0	;There are less than 3 active tblptr bytes
  6225  0014A2                     	endif
  6226  0014A2  0009               	tblrd		*+
  6227  0014A4  CFF5 F035          	movff	tablat,___ftmul@f2
  6228  0014A8  0009               	tblrd		*+
  6229  0014AA  CFF5 F036          	movff	tablat,___ftmul@f2+1
  6230  0014AE  000A               	tblrd		*-
  6231  0014B0  CFF5 F037          	movff	tablat,___ftmul@f2+2
  6232  0014B4  EC80  F00D         	call	___ftmul	;wreg free
  6233  0014B8  C032  F089         	movff	?___ftmul,?_fround
  6234  0014BC  C033  F08A         	movff	?___ftmul+1,?_fround+1
  6235  0014C0  C034  F08B         	movff	?___ftmul+2,?_fround+2
  6236  0014C4  0012               	return	
  6237  0014C6                     l5204:
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;doprnt.c: 423: else if(prec > 10)
  6241  0014C6  0E0A               	movlw	10
  6242  0014C8  6592               	cpfsgt	fround@prec& (0+255),b
  6243  0014CA  D050               	goto	l5210
  6244                           
  6245                           ; BSR set to: 0
  6246                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  6247  0014CC  0E00               	movlw	0
  6248  0014CE  6E35               	movwf	___ftmul@f2^0,c
  6249  0014D0  0E00               	movlw	0
  6250  0014D2  6E36               	movwf	(___ftmul@f2+1)^0,c
  6251  0014D4  0E3F               	movlw	63
  6252  0014D6  6E37               	movwf	(___ftmul@f2+2)^0,c
  6253  0014D8  0E0A               	movlw	10
  6254  0014DA  6E28               	movwf	___lbdiv@divisor^0,c
  6255  0014DC  5192               	movf	fround@prec& (0+255),w,b
  6256  0014DE  EC13  F014         	call	___lbdiv
  6257  0014E2  6E38               	movwf	??_fround^0,c
  6258  0014E4  5038               	movf	??_fround^0,w,c
  6259  0014E6  0D03               	mullw	3
  6260  0014E8  0E1B               	movlw	27
  6261  0014EA  26F3               	addwf	243,f,c
  6262  0014EC  0E00               	movlw	0
  6263  0014EE  22F4               	addwfc	244,f,c
  6264  0014F0  0E00               	movlw	low __npowers_
  6265  0014F2  24F3               	addwf	243,w,c
  6266  0014F4  6EF6               	movwf	tblptrl,c
  6267  0014F6  0EFF               	movlw	high __npowers_
  6268  0014F8  20F4               	addwfc	244,w,c
  6269  0014FA  6EF7               	movwf	tblptrh,c
  6270  0014FC                     	if	0	;There are less than 3 active tblptr bytes
  6271  0014FC                     	endif
  6272  0014FC  0009               	tblrd		*+
  6273  0014FE  CFF5 F032          	movff	tablat,___ftmul@f1
  6274  001502  0009               	tblrd		*+
  6275  001504  CFF5 F033          	movff	tablat,___ftmul@f1+1
  6276  001508  000A               	tblrd		*-
  6277  00150A  CFF5 F034          	movff	tablat,___ftmul@f1+2
  6278  00150E  EC80  F00D         	call	___ftmul	;wreg free
  6279  001512  C032  F08F         	movff	?___ftmul,_fround$1842
  6280  001516  C033  F090         	movff	?___ftmul+1,_fround$1842+1
  6281  00151A  C034  F091         	movff	?___ftmul+2,_fround$1842+2
  6282                           
  6283                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  6284  00151E  C08F  F032         	movff	_fround$1842,___ftmul@f1
  6285  001522  C090  F033         	movff	_fround$1842+1,___ftmul@f1+1
  6286  001526  C091  F034         	movff	_fround$1842+2,___ftmul@f1+2
  6287  00152A  0E0A               	movlw	10
  6288  00152C  6E24               	movwf	___lbmod@divisor^0,c
  6289  00152E  0100               	movlb	0	; () banked
  6290  001530  5192               	movf	fround@prec& (0+255),w,b
  6291  001532  ECB2  F014         	call	___lbmod
  6292  001536  6E38               	movwf	??_fround^0,c
  6293  001538  5038               	movf	??_fround^0,w,c
  6294  00153A  0D03               	mullw	3
  6295  00153C  0E00               	movlw	low __npowers_
  6296  00153E  24F3               	addwf	243,w,c
  6297  001540  6EF6               	movwf	tblptrl,c
  6298  001542  0EFF               	movlw	high __npowers_
  6299  001544  20F4               	addwfc	244,w,c
  6300  001546  6EF7               	movwf	tblptrh,c
  6301  001548                     	if	0	;There are less than 3 active tblptr bytes
  6302  001548                     	endif
  6303  001548  0009               	tblrd		*+
  6304  00154A  CFF5 F035          	movff	tablat,___ftmul@f2
  6305  00154E  0009               	tblrd		*+
  6306  001550  CFF5 F036          	movff	tablat,___ftmul@f2+1
  6307  001554  000A               	tblrd		*-
  6308  001556  CFF5 F037          	movff	tablat,___ftmul@f2+2
  6309  00155A  EC80  F00D         	call	___ftmul	;wreg free
  6310  00155E  C032  F089         	movff	?___ftmul,?_fround
  6311  001562  C033  F08A         	movff	?___ftmul+1,?_fround+1
  6312  001566  C034  F08B         	movff	?___ftmul+2,?_fround+2
  6313  00156A  0012               	return	
  6314  00156C                     l5210:
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;doprnt.c: 425: return 0.5 * _npowers_[prec];
  6318  00156C  5192               	movf	fround@prec& (0+255),w,b
  6319  00156E  0D03               	mullw	3
  6320  001570  0E00               	movlw	low __npowers_
  6321  001572  24F3               	addwf	243,w,c
  6322  001574  6EF6               	movwf	tblptrl,c
  6323  001576  0EFF               	movlw	high __npowers_
  6324  001578  20F4               	addwfc	244,w,c
  6325  00157A  6EF7               	movwf	tblptrh,c
  6326  00157C                     	if	0	;There are less than 3 active tblptr bytes
  6327  00157C                     	endif
  6328  00157C  0009               	tblrd		*+
  6329  00157E  CFF5 F032          	movff	tablat,___ftmul@f1
  6330  001582  0009               	tblrd		*+
  6331  001584  CFF5 F033          	movff	tablat,___ftmul@f1+1
  6332  001588  000A               	tblrd		*-
  6333  00158A  CFF5 F034          	movff	tablat,___ftmul@f1+2
  6334  00158E  0E00               	movlw	0
  6335  001590  6E35               	movwf	___ftmul@f2^0,c
  6336  001592  0E00               	movlw	0
  6337  001594  6E36               	movwf	(___ftmul@f2+1)^0,c
  6338  001596  0E3F               	movlw	63
  6339  001598  6E37               	movwf	(___ftmul@f2+2)^0,c
  6340  00159A  EC80  F00D         	call	___ftmul	;wreg free
  6341  00159E  C032  F089         	movff	?___ftmul,?_fround
  6342  0015A2  C033  F08A         	movff	?___ftmul+1,?_fround+1
  6343  0015A6  C034  F08B         	movff	?___ftmul+2,?_fround+2
  6344  0015AA  0012               	return		;funcret
  6345  0015AC                     __end_of_fround:
  6346                           	callstack 0
  6347                           
  6348 ;; *************** function ___lbmod *****************
  6349 ;; Defined at:
  6350 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lbmod.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;  dividend        1    wreg     unsigned char 
  6353 ;;  divisor         1   35[COMRAM] unsigned char 
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;  dividend        1   36[COMRAM] unsigned char 
  6356 ;;  rem             1   38[COMRAM] unsigned char 
  6357 ;;  counter         1   37[COMRAM] unsigned char 
  6358 ;; Return value:  Size  Location     Type
  6359 ;;                  1    wreg      unsigned char 
  6360 ;; Registers used:
  6361 ;;		wreg, status,2, status,0
  6362 ;; Tracked objects:
  6363 ;;		On entry : 3F/0
  6364 ;;		On exit  : 0/0
  6365 ;;		Unchanged: 0/0
  6366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6367 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6370 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6371 ;;Total ram usage:        4 bytes
  6372 ;; Hardware stack levels used:    1
  6373 ;; Hardware stack levels required when called:    5
  6374 ;; This function calls:
  6375 ;;		Nothing
  6376 ;; This function is called by:
  6377 ;;		_fround
  6378 ;; This function uses a non-reentrant model
  6379 ;;
  6380                           
  6381                           	psect	text21
  6382  002964                     __ptext21:
  6383                           	callstack 0
  6384  002964                     ___lbmod:
  6385                           	callstack 22
  6386                           
  6387                           ;incstack = 0
  6388                           ;___lbmod@dividend stored from wreg
  6389  002964  6E25               	movwf	___lbmod@dividend^0,c
  6390  002966  0E08               	movlw	8
  6391  002968  6E26               	movwf	___lbmod@counter^0,c
  6392  00296A  0E00               	movlw	0
  6393  00296C  6E27               	movwf	___lbmod@rem^0,c
  6394  00296E                     l5168:
  6395  00296E  90D8               	bcf	status,0,c
  6396  002970  3425               	rlcf	___lbmod@dividend^0,w,c
  6397  002972  3427               	rlcf	___lbmod@rem^0,w,c
  6398  002974  6E27               	movwf	___lbmod@rem^0,c
  6399  002976  90D8               	bcf	status,0,c
  6400  002978  3625               	rlcf	___lbmod@dividend^0,f,c
  6401  00297A  5024               	movf	___lbmod@divisor^0,w,c
  6402  00297C  5C27               	subwf	___lbmod@rem^0,w,c
  6403  00297E  A0D8               	btfss	status,0,c
  6404  002980  D002               	goto	l5176
  6405  002982  5024               	movf	___lbmod@divisor^0,w,c
  6406  002984  5E27               	subwf	___lbmod@rem^0,f,c
  6407  002986                     l5176:
  6408  002986  2E26               	decfsz	___lbmod@counter^0,f,c
  6409  002988  D7F2               	goto	l5168
  6410  00298A  5027               	movf	___lbmod@rem^0,w,c
  6411  00298C  0012               	return		;funcret
  6412  00298E                     __end_of___lbmod:
  6413                           	callstack 0
  6414                           
  6415 ;; *************** function ___lbdiv *****************
  6416 ;; Defined at:
  6417 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lbdiv.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;  dividend        1    wreg     unsigned char 
  6420 ;;  divisor         1   39[COMRAM] unsigned char 
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;  dividend        1   40[COMRAM] unsigned char 
  6423 ;;  quotient        1   42[COMRAM] unsigned char 
  6424 ;;  counter         1   41[COMRAM] unsigned char 
  6425 ;; Return value:  Size  Location     Type
  6426 ;;                  1    wreg      unsigned char 
  6427 ;; Registers used:
  6428 ;;		wreg, status,2, status,0
  6429 ;; Tracked objects:
  6430 ;;		On entry : 0/0
  6431 ;;		On exit  : 0/0
  6432 ;;		Unchanged: 0/0
  6433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6434 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6435 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6437 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6438 ;;Total ram usage:        4 bytes
  6439 ;; Hardware stack levels used:    1
  6440 ;; Hardware stack levels required when called:    5
  6441 ;; This function calls:
  6442 ;;		Nothing
  6443 ;; This function is called by:
  6444 ;;		_fround
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           	psect	text22
  6449  002826                     __ptext22:
  6450                           	callstack 0
  6451  002826                     ___lbdiv:
  6452                           	callstack 22
  6453                           
  6454                           ;incstack = 0
  6455                           ;___lbdiv@dividend stored from wreg
  6456  002826  6E29               	movwf	___lbdiv@dividend^0,c
  6457  002828  0E00               	movlw	0
  6458  00282A  6E2B               	movwf	___lbdiv@quotient^0,c
  6459  00282C  5028               	movf	___lbdiv@divisor^0,w,c
  6460  00282E  B4D8               	btfsc	status,2,c
  6461  002830  D015               	goto	l5162
  6462  002832  0E01               	movlw	1
  6463  002834  6E2A               	movwf	___lbdiv@counter^0,c
  6464  002836  D003               	goto	l5150
  6465  002838                     l5146:
  6466  002838  90D8               	bcf	status,0,c
  6467  00283A  3628               	rlcf	___lbdiv@divisor^0,f,c
  6468  00283C  2A2A               	incf	___lbdiv@counter^0,f,c
  6469  00283E                     l5150:
  6470  00283E  AE28               	btfss	___lbdiv@divisor^0,7,c
  6471  002840  D7FB               	goto	l5146
  6472  002842                     u6020:
  6473  002842  90D8               	bcf	status,0,c
  6474  002844  362B               	rlcf	___lbdiv@quotient^0,f,c
  6475  002846  5028               	movf	___lbdiv@divisor^0,w,c
  6476  002848  5C29               	subwf	___lbdiv@dividend^0,w,c
  6477  00284A  A0D8               	btfss	status,0,c
  6478  00284C  D003               	goto	l5158
  6479  00284E  5028               	movf	___lbdiv@divisor^0,w,c
  6480  002850  5E29               	subwf	___lbdiv@dividend^0,f,c
  6481  002852  802B               	bsf	___lbdiv@quotient^0,0,c
  6482  002854                     l5158:
  6483  002854  90D8               	bcf	status,0,c
  6484  002856  3228               	rrcf	___lbdiv@divisor^0,f,c
  6485  002858  2E2A               	decfsz	___lbdiv@counter^0,f,c
  6486  00285A  D7F3               	goto	u6020
  6487  00285C                     l5162:
  6488  00285C  502B               	movf	___lbdiv@quotient^0,w,c
  6489  00285E  0012               	return		;funcret
  6490  002860                     __end_of___lbdiv:
  6491                           	callstack 0
  6492                           
  6493 ;; *************** function ___ftmul *****************
  6494 ;; Defined at:
  6495 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftmul.c"
  6496 ;; Parameters:    Size  Location     Type
  6497 ;;  f1              3   49[COMRAM] float 
  6498 ;;  f2              3   52[COMRAM] float 
  6499 ;; Auto vars:     Size  Location     Type
  6500 ;;  f3_as_produc    3    4[BANK0 ] unsigned um
  6501 ;;  sign            1    8[BANK0 ] unsigned char 
  6502 ;;  cntr            1    7[BANK0 ] unsigned char 
  6503 ;;  exp             1    3[BANK0 ] unsigned char 
  6504 ;; Return value:  Size  Location     Type
  6505 ;;                  3   49[COMRAM] float 
  6506 ;; Registers used:
  6507 ;;		wreg, status,2, status,0, cstack
  6508 ;; Tracked objects:
  6509 ;;		On entry : 0/0
  6510 ;;		On exit  : 0/0
  6511 ;;		Unchanged: 0/0
  6512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6513 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6514 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6515 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6516 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6517 ;;Total ram usage:       15 bytes
  6518 ;; Hardware stack levels used:    1
  6519 ;; Hardware stack levels required when called:    6
  6520 ;; This function calls:
  6521 ;;		___ftpack
  6522 ;; This function is called by:
  6523 ;;		_main
  6524 ;;		_fround
  6525 ;;		_scale
  6526 ;;		_sprintf
  6527 ;; This function uses a non-reentrant model
  6528 ;;
  6529                           
  6530                           	psect	text23
  6531  001B00                     __ptext23:
  6532                           	callstack 0
  6533  001B00                     ___ftmul:
  6534                           	callstack 21
  6535                           
  6536                           ;incstack = 0
  6537  001B00  C034  F080         	movff	___ftmul@f1+2,??___ftmul
  6538  001B04  0100               	movlb	0	; () banked
  6539  001B06  6B81               	clrf	(??___ftmul+1)& (0+255),b
  6540  001B08  6B82               	clrf	(??___ftmul+2)& (0+255),b
  6541  001B0A  3433               	rlcf	(___ftmul@f1+1)^0,w,c
  6542  001B0C  3780               	rlcf	??___ftmul& (0+255),f,b
  6543  001B0E  E301               	bnc	u5831
  6544  001B10  8181               	bsf	(??___ftmul+1)& (0+255),0,b
  6545  001B12                     u5831:
  6546  001B12  5180               	movf	??___ftmul& (0+255),w,b
  6547  001B14  6F83               	movwf	___ftmul@exp& (0+255),b
  6548  001B16  5183               	movf	___ftmul@exp& (0+255),w,b
  6549  001B18  A4D8               	btfss	status,2,c
  6550  001B1A  D007               	goto	l5018
  6551                           
  6552                           ; BSR set to: 0
  6553  001B1C  0E00               	movlw	0
  6554  001B1E  6E32               	movwf	?___ftmul^0,c
  6555  001B20  0E00               	movlw	0
  6556  001B22  6E33               	movwf	(?___ftmul+1)^0,c
  6557  001B24  0E00               	movlw	0
  6558  001B26  6E34               	movwf	(?___ftmul+2)^0,c
  6559  001B28  0012               	return	
  6560  001B2A                     l5018:
  6561                           
  6562                           ; BSR set to: 0
  6563  001B2A  C037  F080         	movff	___ftmul@f2+2,??___ftmul
  6564  001B2E  6B81               	clrf	(??___ftmul+1)& (0+255),b
  6565  001B30  6B82               	clrf	(??___ftmul+2)& (0+255),b
  6566  001B32  3436               	rlcf	(___ftmul@f2+1)^0,w,c
  6567  001B34  3780               	rlcf	??___ftmul& (0+255),f,b
  6568  001B36  E301               	bnc	u5851
  6569  001B38  8181               	bsf	(??___ftmul+1)& (0+255),0,b
  6570  001B3A                     u5851:
  6571  001B3A  5180               	movf	??___ftmul& (0+255),w,b
  6572  001B3C  6F88               	movwf	___ftmul@sign& (0+255),b
  6573  001B3E  5188               	movf	___ftmul@sign& (0+255),w,b
  6574  001B40  A4D8               	btfss	status,2,c
  6575  001B42  D007               	goto	l5024
  6576                           
  6577                           ; BSR set to: 0
  6578  001B44  0E00               	movlw	0
  6579  001B46  6E32               	movwf	?___ftmul^0,c
  6580  001B48  0E00               	movlw	0
  6581  001B4A  6E33               	movwf	(?___ftmul+1)^0,c
  6582  001B4C  0E00               	movlw	0
  6583  001B4E  6E34               	movwf	(?___ftmul+2)^0,c
  6584  001B50  0012               	return	
  6585  001B52                     l5024:
  6586                           
  6587                           ; BSR set to: 0
  6588  001B52  5188               	movf	___ftmul@sign& (0+255),w,b
  6589  001B54  0F7B               	addlw	123
  6590  001B56  2783               	addwf	___ftmul@exp& (0+255),f,b
  6591                           
  6592                           ; BSR set to: 0
  6593  001B58  C034  F088         	movff	___ftmul@f1+2,___ftmul@sign
  6594  001B5C  5037               	movf	(___ftmul@f2+2)^0,w,c
  6595  001B5E  1B88               	xorwf	___ftmul@sign& (0+255),f,b
  6596  001B60  0E80               	movlw	128
  6597  001B62  1788               	andwf	___ftmul@sign& (0+255),f,b
  6598                           
  6599                           ; BSR set to: 0
  6600  001B64  8E33               	bsf	(___ftmul@f1+1)^0,7,c
  6601                           
  6602                           ; BSR set to: 0
  6603  001B66  8E36               	bsf	(___ftmul@f2+1)^0,7,c
  6604                           
  6605                           ; BSR set to: 0
  6606  001B68  0EFF               	movlw	255
  6607  001B6A  1635               	andwf	___ftmul@f2^0,f,c
  6608  001B6C  0EFF               	movlw	255
  6609  001B6E  1636               	andwf	(___ftmul@f2+1)^0,f,c
  6610  001B70  0E00               	movlw	0
  6611  001B72  1637               	andwf	(___ftmul@f2+2)^0,f,c
  6612                           
  6613                           ; BSR set to: 0
  6614  001B74  0E00               	movlw	0
  6615  001B76  6F84               	movwf	___ftmul@f3_as_product& (0+255),b
  6616  001B78  0E00               	movlw	0
  6617  001B7A  6F85               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  6618  001B7C  0E00               	movlw	0
  6619  001B7E  6F86               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  6620                           
  6621                           ; BSR set to: 0
  6622  001B80  0E07               	movlw	7
  6623  001B82  6F87               	movwf	___ftmul@cntr& (0+255),b
  6624  001B84                     l5038:
  6625                           
  6626                           ; BSR set to: 0
  6627  001B84  A032               	btfss	___ftmul@f1^0,0,c
  6628  001B86  D006               	goto	l5042
  6629                           
  6630                           ; BSR set to: 0
  6631  001B88  5035               	movf	___ftmul@f2^0,w,c
  6632  001B8A  2784               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6633  001B8C  5036               	movf	(___ftmul@f2+1)^0,w,c
  6634  001B8E  2385               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6635  001B90  5037               	movf	(___ftmul@f2+2)^0,w,c
  6636  001B92  2386               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6637  001B94                     l5042:
  6638                           
  6639                           ; BSR set to: 0
  6640  001B94  90D8               	bcf	status,0,c
  6641  001B96  3234               	rrcf	(___ftmul@f1+2)^0,f,c
  6642  001B98  3233               	rrcf	(___ftmul@f1+1)^0,f,c
  6643  001B9A  3232               	rrcf	___ftmul@f1^0,f,c
  6644  001B9C  90D8               	bcf	status,0,c
  6645  001B9E  3635               	rlcf	___ftmul@f2^0,f,c
  6646  001BA0  3636               	rlcf	(___ftmul@f2+1)^0,f,c
  6647  001BA2  3637               	rlcf	(___ftmul@f2+2)^0,f,c
  6648                           
  6649                           ; BSR set to: 0
  6650  001BA4  2F87               	decfsz	___ftmul@cntr& (0+255),f,b
  6651  001BA6  D7EE               	goto	l5038
  6652                           
  6653                           ; BSR set to: 0
  6654  001BA8  0E09               	movlw	9
  6655  001BAA  6F87               	movwf	___ftmul@cntr& (0+255),b
  6656  001BAC                     l5048:
  6657                           
  6658                           ; BSR set to: 0
  6659  001BAC  A032               	btfss	___ftmul@f1^0,0,c
  6660  001BAE  D006               	goto	l5052
  6661                           
  6662                           ; BSR set to: 0
  6663  001BB0  5035               	movf	___ftmul@f2^0,w,c
  6664  001BB2  2784               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6665  001BB4  5036               	movf	(___ftmul@f2+1)^0,w,c
  6666  001BB6  2385               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6667  001BB8  5037               	movf	(___ftmul@f2+2)^0,w,c
  6668  001BBA  2386               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6669  001BBC                     l5052:
  6670                           
  6671                           ; BSR set to: 0
  6672  001BBC  90D8               	bcf	status,0,c
  6673  001BBE  3234               	rrcf	(___ftmul@f1+2)^0,f,c
  6674  001BC0  3233               	rrcf	(___ftmul@f1+1)^0,f,c
  6675  001BC2  3232               	rrcf	___ftmul@f1^0,f,c
  6676  001BC4  90D8               	bcf	status,0,c
  6677  001BC6  3386               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  6678  001BC8  3385               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  6679  001BCA  3384               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  6680                           
  6681                           ; BSR set to: 0
  6682  001BCC  2F87               	decfsz	___ftmul@cntr& (0+255),f,b
  6683  001BCE  D7EE               	goto	l5048
  6684                           
  6685                           ; BSR set to: 0
  6686  001BD0  C084  F024         	movff	___ftmul@f3_as_product,___ftpack@arg
  6687  001BD4  C085  F025         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6688  001BD8  C086  F026         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6689  001BDC  C083  F027         	movff	___ftmul@exp,___ftpack@exp
  6690  001BE0  C088  F028         	movff	___ftmul@sign,___ftpack@sign
  6691  001BE4  EC54  F00F         	call	___ftpack	;wreg free
  6692  001BE8  C024  F032         	movff	?___ftpack,?___ftmul
  6693  001BEC  C025  F033         	movff	?___ftpack+1,?___ftmul+1
  6694  001BF0  C026  F034         	movff	?___ftpack+2,?___ftmul+2
  6695  001BF4  0012               	return		;funcret
  6696  001BF6                     __end_of___ftmul:
  6697                           	callstack 0
  6698                           
  6699 ;; *************** function __tdiv_to_l_ *****************
  6700 ;; Defined at:
  6701 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftdivl.c"
  6702 ;; Parameters:    Size  Location     Type
  6703 ;;  f1              3   35[COMRAM] float 
  6704 ;;  f2              3   38[COMRAM] float 
  6705 ;; Auto vars:     Size  Location     Type
  6706 ;;  quot            4   44[COMRAM] unsigned long 
  6707 ;;  exp1            1   49[COMRAM] unsigned char 
  6708 ;;  cntr            1   48[COMRAM] unsigned char 
  6709 ;; Return value:  Size  Location     Type
  6710 ;;                  4   35[COMRAM] unsigned long 
  6711 ;; Registers used:
  6712 ;;		wreg, status,2, status,0
  6713 ;; Tracked objects:
  6714 ;;		On entry : 0/0
  6715 ;;		On exit  : 0/0
  6716 ;;		Unchanged: 0/0
  6717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6718 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6719 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6720 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6721 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6722 ;;Total ram usage:       15 bytes
  6723 ;; Hardware stack levels used:    1
  6724 ;; Hardware stack levels required when called:    5
  6725 ;; This function calls:
  6726 ;;		Nothing
  6727 ;; This function is called by:
  6728 ;;		_sprintf
  6729 ;; This function uses a non-reentrant model
  6730 ;;
  6731                           
  6732                           	psect	text24
  6733  001A02                     __ptext24:
  6734                           	callstack 0
  6735  001A02                     __tdiv_to_l_:
  6736                           	callstack 23
  6737                           
  6738                           ;incstack = 0
  6739  001A02  C026  F02A         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6740  001A06  6A2B               	clrf	(??__tdiv_to_l_+1)^0,c
  6741  001A08  6A2C               	clrf	(??__tdiv_to_l_+2)^0,c
  6742  001A0A  3425               	rlcf	(__tdiv_to_l_@f1+1)^0,w,c
  6743  001A0C  362A               	rlcf	??__tdiv_to_l_^0,f,c
  6744  001A0E  E301               	bnc	u6141
  6745  001A10  802B               	bsf	(??__tdiv_to_l_+1)^0,0,c
  6746  001A12                     u6141:
  6747  001A12  502A               	movf	??__tdiv_to_l_^0,w,c
  6748  001A14  6E32               	movwf	__tdiv_to_l_@exp1^0,c
  6749  001A16  5032               	movf	__tdiv_to_l_@exp1^0,w,c
  6750  001A18  A4D8               	btfss	status,2,c
  6751  001A1A  D009               	goto	l5270
  6752  001A1C                     u6150:
  6753  001A1C  0E00               	movlw	0
  6754  001A1E  6E24               	movwf	?__tdiv_to_l_^0,c
  6755  001A20  0E00               	movlw	0
  6756  001A22  6E25               	movwf	(?__tdiv_to_l_+1)^0,c
  6757  001A24  0E00               	movlw	0
  6758  001A26  6E26               	movwf	(?__tdiv_to_l_+2)^0,c
  6759  001A28  0E00               	movlw	0
  6760  001A2A  6E27               	movwf	(?__tdiv_to_l_+3)^0,c
  6761  001A2C  0012               	return	
  6762  001A2E                     l5270:
  6763  001A2E  C029  F02A         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6764  001A32  6A2B               	clrf	(??__tdiv_to_l_+1)^0,c
  6765  001A34  6A2C               	clrf	(??__tdiv_to_l_+2)^0,c
  6766  001A36  3428               	rlcf	(__tdiv_to_l_@f2+1)^0,w,c
  6767  001A38  362A               	rlcf	??__tdiv_to_l_^0,f,c
  6768  001A3A  E301               	bnc	u6161
  6769  001A3C  802B               	bsf	(??__tdiv_to_l_+1)^0,0,c
  6770  001A3E                     u6161:
  6771  001A3E  502A               	movf	??__tdiv_to_l_^0,w,c
  6772  001A40  6E31               	movwf	__tdiv_to_l_@cntr^0,c
  6773  001A42  5031               	movf	__tdiv_to_l_@cntr^0,w,c
  6774  001A44  B4D8               	btfsc	status,2,c
  6775  001A46  D7EA               	goto	u6150
  6776  001A48  8E25               	bsf	(__tdiv_to_l_@f1+1)^0,7,c
  6777  001A4A  0EFF               	movlw	255
  6778  001A4C  1624               	andwf	__tdiv_to_l_@f1^0,f,c
  6779  001A4E  0EFF               	movlw	255
  6780  001A50  1625               	andwf	(__tdiv_to_l_@f1+1)^0,f,c
  6781  001A52  0E00               	movlw	0
  6782  001A54  1626               	andwf	(__tdiv_to_l_@f1+2)^0,f,c
  6783  001A56  8E28               	bsf	(__tdiv_to_l_@f2+1)^0,7,c
  6784  001A58  0EFF               	movlw	255
  6785  001A5A  1627               	andwf	__tdiv_to_l_@f2^0,f,c
  6786  001A5C  0EFF               	movlw	255
  6787  001A5E  1628               	andwf	(__tdiv_to_l_@f2+1)^0,f,c
  6788  001A60  0E00               	movlw	0
  6789  001A62  1629               	andwf	(__tdiv_to_l_@f2+2)^0,f,c
  6790  001A64  0E00               	movlw	0
  6791  001A66  6E2D               	movwf	__tdiv_to_l_@quot^0,c
  6792  001A68  0E00               	movlw	0
  6793  001A6A  6E2E               	movwf	(__tdiv_to_l_@quot+1)^0,c
  6794  001A6C  0E00               	movlw	0
  6795  001A6E  6E2F               	movwf	(__tdiv_to_l_@quot+2)^0,c
  6796  001A70  0E00               	movlw	0
  6797  001A72  6E30               	movwf	(__tdiv_to_l_@quot+3)^0,c
  6798  001A74  0E7F               	movlw	127
  6799  001A76  5E32               	subwf	__tdiv_to_l_@exp1^0,f,c
  6800  001A78  5031               	movf	__tdiv_to_l_@cntr^0,w,c
  6801  001A7A  0F98               	addlw	152
  6802  001A7C  5E32               	subwf	__tdiv_to_l_@exp1^0,f,c
  6803  001A7E  0E18               	movlw	24
  6804  001A80  6E31               	movwf	__tdiv_to_l_@cntr^0,c
  6805  001A82                     l915:
  6806  001A82  90D8               	bcf	status,0,c
  6807  001A84  362D               	rlcf	__tdiv_to_l_@quot^0,f,c
  6808  001A86  362E               	rlcf	(__tdiv_to_l_@quot+1)^0,f,c
  6809  001A88  362F               	rlcf	(__tdiv_to_l_@quot+2)^0,f,c
  6810  001A8A  3630               	rlcf	(__tdiv_to_l_@quot+3)^0,f,c
  6811  001A8C  5027               	movf	__tdiv_to_l_@f2^0,w,c
  6812  001A8E  5C24               	subwf	__tdiv_to_l_@f1^0,w,c
  6813  001A90  5028               	movf	(__tdiv_to_l_@f2+1)^0,w,c
  6814  001A92  5825               	subwfb	(__tdiv_to_l_@f1+1)^0,w,c
  6815  001A94  5029               	movf	(__tdiv_to_l_@f2+2)^0,w,c
  6816  001A96  5826               	subwfb	(__tdiv_to_l_@f1+2)^0,w,c
  6817  001A98  A0D8               	btfss	status,0,c
  6818  001A9A  D007               	goto	l916
  6819  001A9C  5027               	movf	__tdiv_to_l_@f2^0,w,c
  6820  001A9E  5E24               	subwf	__tdiv_to_l_@f1^0,f,c
  6821  001AA0  5028               	movf	(__tdiv_to_l_@f2+1)^0,w,c
  6822  001AA2  5A25               	subwfb	(__tdiv_to_l_@f1+1)^0,f,c
  6823  001AA4  5029               	movf	(__tdiv_to_l_@f2+2)^0,w,c
  6824  001AA6  5A26               	subwfb	(__tdiv_to_l_@f1+2)^0,f,c
  6825  001AA8  802D               	bsf	__tdiv_to_l_@quot^0,0,c
  6826  001AAA                     l916:
  6827  001AAA  90D8               	bcf	status,0,c
  6828  001AAC  3624               	rlcf	__tdiv_to_l_@f1^0,f,c
  6829  001AAE  3625               	rlcf	(__tdiv_to_l_@f1+1)^0,f,c
  6830  001AB0  3626               	rlcf	(__tdiv_to_l_@f1+2)^0,f,c
  6831  001AB2  2E31               	decfsz	__tdiv_to_l_@cntr^0,f,c
  6832  001AB4  D7E6               	goto	l915
  6833  001AB6  AE32               	btfss	__tdiv_to_l_@exp1^0,7,c
  6834  001AB8  D00D               	goto	l5310
  6835  001ABA  5032               	movf	__tdiv_to_l_@exp1^0,w,c
  6836  001ABC  0A80               	xorlw	128
  6837  001ABE  0F97               	addlw	151
  6838  001AC0  A0D8               	btfss	status,0,c
  6839  001AC2  D7AC               	goto	u6150
  6840  001AC4                     l5306:
  6841  001AC4  90D8               	bcf	status,0,c
  6842  001AC6  3230               	rrcf	(__tdiv_to_l_@quot+3)^0,f,c
  6843  001AC8  322F               	rrcf	(__tdiv_to_l_@quot+2)^0,f,c
  6844  001ACA  322E               	rrcf	(__tdiv_to_l_@quot+1)^0,f,c
  6845  001ACC  322D               	rrcf	__tdiv_to_l_@quot^0,f,c
  6846  001ACE  3E32               	incfsz	__tdiv_to_l_@exp1^0,f,c
  6847  001AD0  D7F9               	goto	l5306
  6848  001AD2  D00D               	goto	u6220
  6849  001AD4                     l5310:
  6850  001AD4  0E17               	movlw	23
  6851  001AD6  6432               	cpfsgt	__tdiv_to_l_@exp1^0,c
  6852  001AD8  D007               	goto	l5318
  6853  001ADA  D7A0               	goto	u6150
  6854  001ADC                     l5316:
  6855  001ADC  90D8               	bcf	status,0,c
  6856  001ADE  362D               	rlcf	__tdiv_to_l_@quot^0,f,c
  6857  001AE0  362E               	rlcf	(__tdiv_to_l_@quot+1)^0,f,c
  6858  001AE2  362F               	rlcf	(__tdiv_to_l_@quot+2)^0,f,c
  6859  001AE4  3630               	rlcf	(__tdiv_to_l_@quot+3)^0,f,c
  6860  001AE6  0632               	decf	__tdiv_to_l_@exp1^0,f,c
  6861  001AE8                     l5318:
  6862  001AE8  5032               	movf	__tdiv_to_l_@exp1^0,w,c
  6863  001AEA  A4D8               	btfss	status,2,c
  6864  001AEC  D7F7               	goto	l5316
  6865  001AEE                     u6220:
  6866  001AEE  C02D  F024         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6867  001AF2  C02E  F025         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6868  001AF6  C02F  F026         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6869  001AFA  C030  F027         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6870  001AFE  0012               	return		;funcret
  6871  001B00                     __end_of__tdiv_to_l_:
  6872                           	callstack 0
  6873                           
  6874 ;; *************** function __div_to_l_ *****************
  6875 ;; Defined at:
  6876 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\fldivl.c"
  6877 ;; Parameters:    Size  Location     Type
  6878 ;;  f1              3   35[COMRAM] unsigned long 
  6879 ;;  f2              3   38[COMRAM] unsigned long 
  6880 ;; Auto vars:     Size  Location     Type
  6881 ;;  quot            4   41[COMRAM] unsigned long 
  6882 ;;  exp1            1   46[COMRAM] unsigned char 
  6883 ;;  cntr            1   45[COMRAM] unsigned char 
  6884 ;; Return value:  Size  Location     Type
  6885 ;;                  4   35[COMRAM] unsigned long 
  6886 ;; Registers used:
  6887 ;;		wreg, status,2, status,0
  6888 ;; Tracked objects:
  6889 ;;		On entry : 0/0
  6890 ;;		On exit  : 0/0
  6891 ;;		Unchanged: 0/0
  6892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6893 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6894 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6896 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6897 ;;Total ram usage:       12 bytes
  6898 ;; Hardware stack levels used:    1
  6899 ;; Hardware stack levels required when called:    5
  6900 ;; This function calls:
  6901 ;;		Nothing
  6902 ;; This function is called by:
  6903 ;;		_sprintf
  6904 ;; This function uses a non-reentrant model
  6905 ;;
  6906                           
  6907                           	psect	text25
  6908  001BF6                     __ptext25:
  6909                           	callstack 0
  6910  001BF6                     __div_to_l_:
  6911                           	callstack 23
  6912                           
  6913                           ;incstack = 0
  6914  001BF6  3426               	rlcf	(__div_to_l_@f1+2)^0,w,c
  6915  001BF8  3427               	rlcf	(__div_to_l_@f1+3)^0,w,c
  6916  001BFA  6E2F               	movwf	__div_to_l_@exp1^0,c
  6917  001BFC  502F               	movf	__div_to_l_@exp1^0,w,c
  6918  001BFE  A4D8               	btfss	status,2,c
  6919  001C00  D009               	goto	l5326
  6920  001C02                     u6230:
  6921  001C02  0E00               	movlw	0
  6922  001C04  6E24               	movwf	?__div_to_l_^0,c
  6923  001C06  0E00               	movlw	0
  6924  001C08  6E25               	movwf	(?__div_to_l_+1)^0,c
  6925  001C0A  0E00               	movlw	0
  6926  001C0C  6E26               	movwf	(?__div_to_l_+2)^0,c
  6927  001C0E  0E00               	movlw	0
  6928  001C10  6E27               	movwf	(?__div_to_l_+3)^0,c
  6929  001C12  0012               	return	
  6930  001C14                     l5326:
  6931  001C14  3429               	rlcf	(__div_to_l_@f2+2)^0,w,c
  6932  001C16  342A               	rlcf	(__div_to_l_@f2+3)^0,w,c
  6933  001C18  6E2E               	movwf	__div_to_l_@cntr^0,c
  6934  001C1A  502E               	movf	__div_to_l_@cntr^0,w,c
  6935  001C1C  B4D8               	btfsc	status,2,c
  6936  001C1E  D7F1               	goto	u6230
  6937  001C20  8E26               	bsf	(__div_to_l_@f1+2)^0,7,c
  6938  001C22  0EFF               	movlw	255
  6939  001C24  1624               	andwf	__div_to_l_@f1^0,f,c
  6940  001C26  0EFF               	movlw	255
  6941  001C28  1625               	andwf	(__div_to_l_@f1+1)^0,f,c
  6942  001C2A  0EFF               	movlw	255
  6943  001C2C  1626               	andwf	(__div_to_l_@f1+2)^0,f,c
  6944  001C2E  0E00               	movlw	0
  6945  001C30  1627               	andwf	(__div_to_l_@f1+3)^0,f,c
  6946  001C32  8E29               	bsf	(__div_to_l_@f2+2)^0,7,c
  6947  001C34  0EFF               	movlw	255
  6948  001C36  1627               	andwf	__div_to_l_@f2^0,f,c
  6949  001C38  0EFF               	movlw	255
  6950  001C3A  1628               	andwf	(__div_to_l_@f2+1)^0,f,c
  6951  001C3C  0EFF               	movlw	255
  6952  001C3E  1629               	andwf	(__div_to_l_@f2+2)^0,f,c
  6953  001C40  0E00               	movlw	0
  6954  001C42  162A               	andwf	(__div_to_l_@f2+3)^0,f,c
  6955  001C44  0E00               	movlw	0
  6956  001C46  6E2A               	movwf	__div_to_l_@quot^0,c
  6957  001C48  0E00               	movlw	0
  6958  001C4A  6E2B               	movwf	(__div_to_l_@quot+1)^0,c
  6959  001C4C  0E00               	movlw	0
  6960  001C4E  6E2C               	movwf	(__div_to_l_@quot+2)^0,c
  6961  001C50  0E00               	movlw	0
  6962  001C52  6E2D               	movwf	(__div_to_l_@quot+3)^0,c
  6963  001C54  0E7F               	movlw	127
  6964  001C56  5E2F               	subwf	__div_to_l_@exp1^0,f,c
  6965  001C58  502E               	movf	__div_to_l_@cntr^0,w,c
  6966  001C5A  0FA0               	addlw	160
  6967  001C5C  5E2F               	subwf	__div_to_l_@exp1^0,f,c
  6968  001C5E  0E20               	movlw	32
  6969  001C60  6E2E               	movwf	__div_to_l_@cntr^0,c
  6970  001C62                     l5346:
  6971  001C62  90D8               	bcf	status,0,c
  6972  001C64  362A               	rlcf	__div_to_l_@quot^0,f,c
  6973  001C66  362B               	rlcf	(__div_to_l_@quot+1)^0,f,c
  6974  001C68  362C               	rlcf	(__div_to_l_@quot+2)^0,f,c
  6975  001C6A  362D               	rlcf	(__div_to_l_@quot+3)^0,f,c
  6976  001C6C  5027               	movf	__div_to_l_@f2^0,w,c
  6977  001C6E  5C24               	subwf	__div_to_l_@f1^0,w,c
  6978  001C70  5028               	movf	(__div_to_l_@f2+1)^0,w,c
  6979  001C72  5825               	subwfb	(__div_to_l_@f1+1)^0,w,c
  6980  001C74  5029               	movf	(__div_to_l_@f2+2)^0,w,c
  6981  001C76  5826               	subwfb	(__div_to_l_@f1+2)^0,w,c
  6982  001C78  502A               	movf	(__div_to_l_@f2+3)^0,w,c
  6983  001C7A  5827               	subwfb	(__div_to_l_@f1+3)^0,w,c
  6984  001C7C  A0D8               	btfss	status,0,c
  6985  001C7E  D009               	goto	l5354
  6986  001C80  5027               	movf	__div_to_l_@f2^0,w,c
  6987  001C82  5E24               	subwf	__div_to_l_@f1^0,f,c
  6988  001C84  5028               	movf	(__div_to_l_@f2+1)^0,w,c
  6989  001C86  5A25               	subwfb	(__div_to_l_@f1+1)^0,f,c
  6990  001C88  5029               	movf	(__div_to_l_@f2+2)^0,w,c
  6991  001C8A  5A26               	subwfb	(__div_to_l_@f1+2)^0,f,c
  6992  001C8C  502A               	movf	(__div_to_l_@f2+3)^0,w,c
  6993  001C8E  5A27               	subwfb	(__div_to_l_@f1+3)^0,f,c
  6994  001C90  802A               	bsf	__div_to_l_@quot^0,0,c
  6995  001C92                     l5354:
  6996  001C92  90D8               	bcf	status,0,c
  6997  001C94  3624               	rlcf	__div_to_l_@f1^0,f,c
  6998  001C96  3625               	rlcf	(__div_to_l_@f1+1)^0,f,c
  6999  001C98  3626               	rlcf	(__div_to_l_@f1+2)^0,f,c
  7000  001C9A  3627               	rlcf	(__div_to_l_@f1+3)^0,f,c
  7001  001C9C  2E2E               	decfsz	__div_to_l_@cntr^0,f,c
  7002  001C9E  D7E1               	goto	l5346
  7003  001CA0  AE2F               	btfss	__div_to_l_@exp1^0,7,c
  7004  001CA2  D00D               	goto	l5370
  7005  001CA4  502F               	movf	__div_to_l_@exp1^0,w,c
  7006  001CA6  0A80               	xorlw	128
  7007  001CA8  0F9F               	addlw	159
  7008  001CAA  A0D8               	btfss	status,0,c
  7009  001CAC  D7AA               	goto	u6230
  7010  001CAE                     l5366:
  7011  001CAE  90D8               	bcf	status,0,c
  7012  001CB0  322D               	rrcf	(__div_to_l_@quot+3)^0,f,c
  7013  001CB2  322C               	rrcf	(__div_to_l_@quot+2)^0,f,c
  7014  001CB4  322B               	rrcf	(__div_to_l_@quot+1)^0,f,c
  7015  001CB6  322A               	rrcf	__div_to_l_@quot^0,f,c
  7016  001CB8  3E2F               	incfsz	__div_to_l_@exp1^0,f,c
  7017  001CBA  D7F9               	goto	l5366
  7018  001CBC  D00D               	goto	u6290
  7019  001CBE                     l5370:
  7020  001CBE  0E1F               	movlw	31
  7021  001CC0  642F               	cpfsgt	__div_to_l_@exp1^0,c
  7022  001CC2  D007               	goto	l5378
  7023  001CC4  D79E               	goto	u6230
  7024  001CC6                     l5376:
  7025  001CC6  90D8               	bcf	status,0,c
  7026  001CC8  362A               	rlcf	__div_to_l_@quot^0,f,c
  7027  001CCA  362B               	rlcf	(__div_to_l_@quot+1)^0,f,c
  7028  001CCC  362C               	rlcf	(__div_to_l_@quot+2)^0,f,c
  7029  001CCE  362D               	rlcf	(__div_to_l_@quot+3)^0,f,c
  7030  001CD0  062F               	decf	__div_to_l_@exp1^0,f,c
  7031  001CD2                     l5378:
  7032  001CD2  502F               	movf	__div_to_l_@exp1^0,w,c
  7033  001CD4  A4D8               	btfss	status,2,c
  7034  001CD6  D7F7               	goto	l5376
  7035  001CD8                     u6290:
  7036  001CD8  C02A  F024         	movff	__div_to_l_@quot,?__div_to_l_
  7037  001CDC  C02B  F025         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7038  001CE0  C02C  F026         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7039  001CE4  C02D  F027         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7040  001CE8  0012               	return		;funcret
  7041  001CEA                     __end_of__div_to_l_:
  7042                           	callstack 0
  7043                           
  7044 ;; *************** function ___wmul *****************
  7045 ;; Defined at:
  7046 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\Umul16.c"
  7047 ;; Parameters:    Size  Location     Type
  7048 ;;  multiplier      2   35[COMRAM] unsigned int 
  7049 ;;  multiplicand    2   37[COMRAM] unsigned int 
  7050 ;; Auto vars:     Size  Location     Type
  7051 ;;  product         2   39[COMRAM] unsigned int 
  7052 ;; Return value:  Size  Location     Type
  7053 ;;                  2   35[COMRAM] unsigned int 
  7054 ;; Registers used:
  7055 ;;		wreg, status,2, status,0, prodl, prodh
  7056 ;; Tracked objects:
  7057 ;;		On entry : 0/0
  7058 ;;		On exit  : 0/0
  7059 ;;		Unchanged: 0/0
  7060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7061 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7062 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7064 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7065 ;;Total ram usage:        6 bytes
  7066 ;; Hardware stack levels used:    1
  7067 ;; Hardware stack levels required when called:    5
  7068 ;; This function calls:
  7069 ;;		Nothing
  7070 ;; This function is called by:
  7071 ;;		_read_adc_voltage
  7072 ;;		_sprintf
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           	psect	text26
  7077  00298E                     __ptext26:
  7078                           	callstack 0
  7079  00298E                     ___wmul:
  7080                           	callstack 24
  7081                           
  7082                           ;incstack = 0
  7083  00298E  5024               	movf	___wmul@multiplier^0,w,c
  7084  002990  0226               	mulwf	___wmul@multiplicand^0,c
  7085  002992  CFF3 F028          	movff	prodl,___wmul@product
  7086  002996  CFF4 F029          	movff	prodh,___wmul@product+1
  7087  00299A  5024               	movf	___wmul@multiplier^0,w,c
  7088  00299C  0227               	mulwf	(___wmul@multiplicand+1)^0,c
  7089  00299E  50F3               	movf	243,w,c
  7090  0029A0  2629               	addwf	(___wmul@product+1)^0,f,c
  7091  0029A2  5025               	movf	(___wmul@multiplier+1)^0,w,c
  7092  0029A4  0226               	mulwf	___wmul@multiplicand^0,c
  7093  0029A6  50F3               	movf	243,w,c
  7094  0029A8  2629               	addwf	(___wmul@product+1)^0,f,c
  7095  0029AA  C028  F024         	movff	___wmul@product,?___wmul
  7096  0029AE  C029  F025         	movff	___wmul@product+1,?___wmul+1
  7097  0029B2  0012               	return		;funcret
  7098  0029B4                     __end_of___wmul:
  7099                           	callstack 0
  7100                           
  7101 ;; *************** function ___lltoft *****************
  7102 ;; Defined at:
  7103 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lltoft.c"
  7104 ;; Parameters:    Size  Location     Type
  7105 ;;  c               4   43[COMRAM] unsigned long 
  7106 ;; Auto vars:     Size  Location     Type
  7107 ;;  exp             1   51[COMRAM] unsigned char 
  7108 ;; Return value:  Size  Location     Type
  7109 ;;                  3   43[COMRAM] float 
  7110 ;; Registers used:
  7111 ;;		wreg, status,2, status,0, cstack
  7112 ;; Tracked objects:
  7113 ;;		On entry : 3F/0
  7114 ;;		On exit  : 0/0
  7115 ;;		Unchanged: 0/0
  7116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7117 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7118 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7119 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7120 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7121 ;;Total ram usage:        9 bytes
  7122 ;; Hardware stack levels used:    1
  7123 ;; Hardware stack levels required when called:    6
  7124 ;; This function calls:
  7125 ;;		___ftpack
  7126 ;; This function is called by:
  7127 ;;		_sprintf
  7128 ;; This function uses a non-reentrant model
  7129 ;;
  7130                           
  7131                           	psect	text27
  7132  0024BE                     __ptext27:
  7133                           	callstack 0
  7134  0024BE                     ___lltoft:
  7135                           	callstack 22
  7136                           
  7137                           ; BSR set to: 0
  7138                           
  7139                           ;incstack = 0
  7140  0024BE  0E8E               	movlw	142
  7141  0024C0  6E34               	movwf	___lltoft@exp^0,c
  7142  0024C2  D006               	goto	l5504
  7143  0024C4                     l5502:
  7144                           
  7145                           ; BSR set to: 0
  7146  0024C4  90D8               	bcf	status,0,c
  7147  0024C6  322F               	rrcf	(___lltoft@c+3)^0,f,c
  7148  0024C8  322E               	rrcf	(___lltoft@c+2)^0,f,c
  7149  0024CA  322D               	rrcf	(___lltoft@c+1)^0,f,c
  7150  0024CC  322C               	rrcf	___lltoft@c^0,f,c
  7151  0024CE  2A34               	incf	___lltoft@exp^0,f,c
  7152  0024D0                     l5504:
  7153                           
  7154                           ; BSR set to: 0
  7155  0024D0  0E00               	movlw	0
  7156  0024D2  142C               	andwf	___lltoft@c^0,w,c
  7157  0024D4  6E30               	movwf	??___lltoft^0,c
  7158  0024D6  0E00               	movlw	0
  7159  0024D8  142D               	andwf	(___lltoft@c+1)^0,w,c
  7160  0024DA  6E31               	movwf	(??___lltoft+1)^0,c
  7161  0024DC  0E00               	movlw	0
  7162  0024DE  142E               	andwf	(___lltoft@c+2)^0,w,c
  7163  0024E0  6E32               	movwf	(??___lltoft+2)^0,c
  7164  0024E2  0EFF               	movlw	255
  7165  0024E4  142F               	andwf	(___lltoft@c+3)^0,w,c
  7166  0024E6  6E33               	movwf	(??___lltoft+3)^0,c
  7167  0024E8  5030               	movf	??___lltoft^0,w,c
  7168  0024EA  1031               	iorwf	(??___lltoft+1)^0,w,c
  7169  0024EC  1032               	iorwf	(??___lltoft+2)^0,w,c
  7170  0024EE  1033               	iorwf	(??___lltoft+3)^0,w,c
  7171  0024F0  A4D8               	btfss	status,2,c
  7172  0024F2  D7E8               	goto	l5502
  7173                           
  7174                           ; BSR set to: 0
  7175  0024F4  C02C  F024         	movff	___lltoft@c,___ftpack@arg
  7176  0024F8  C02D  F025         	movff	___lltoft@c+1,___ftpack@arg+1
  7177  0024FC  C02E  F026         	movff	___lltoft@c+2,___ftpack@arg+2
  7178  002500  C034  F027         	movff	___lltoft@exp,___ftpack@exp
  7179  002504  0E00               	movlw	0
  7180  002506  6E28               	movwf	___ftpack@sign^0,c
  7181  002508  EC54  F00F         	call	___ftpack	;wreg free
  7182  00250C  C024  F02C         	movff	?___ftpack,?___lltoft
  7183  002510  C025  F02D         	movff	?___ftpack+1,?___lltoft+1
  7184  002514  C026  F02E         	movff	?___ftpack+2,?___lltoft+2
  7185  002518  0012               	return		;funcret
  7186  00251A                     __end_of___lltoft:
  7187                           	callstack 0
  7188                           
  7189 ;; *************** function ___llmod *****************
  7190 ;; Defined at:
  7191 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\llmod.c"
  7192 ;; Parameters:    Size  Location     Type
  7193 ;;  dividend        4   48[COMRAM] unsigned long 
  7194 ;;  divisor         4   52[COMRAM] unsigned long 
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;  counter         1    0[BANK0 ] unsigned char 
  7197 ;; Return value:  Size  Location     Type
  7198 ;;                  4   48[COMRAM] unsigned long 
  7199 ;; Registers used:
  7200 ;;		wreg, status,2, status,0
  7201 ;; Tracked objects:
  7202 ;;		On entry : 3F/0
  7203 ;;		On exit  : 3F/0
  7204 ;;		Unchanged: 0/0
  7205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7206 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7209 ;;      Totals:         8       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;Total ram usage:        9 bytes
  7211 ;; Hardware stack levels used:    1
  7212 ;; Hardware stack levels required when called:    5
  7213 ;; This function calls:
  7214 ;;		Nothing
  7215 ;; This function is called by:
  7216 ;;		_sprintf
  7217 ;; This function uses a non-reentrant model
  7218 ;;
  7219                           
  7220                           	psect	text28
  7221  002338                     __ptext28:
  7222                           	callstack 0
  7223  002338                     ___llmod:
  7224                           	callstack 23
  7225                           
  7226                           ; BSR set to: 0
  7227                           
  7228                           ;incstack = 0
  7229  002338  5035               	movf	___llmod@divisor^0,w,c
  7230  00233A  1036               	iorwf	(___llmod@divisor+1)^0,w,c
  7231  00233C  1037               	iorwf	(___llmod@divisor+2)^0,w,c
  7232  00233E  1038               	iorwf	(___llmod@divisor+3)^0,w,c
  7233  002340  B4D8               	btfsc	status,2,c
  7234  002342  D024               	goto	l992
  7235                           
  7236                           ; BSR set to: 0
  7237  002344  0E01               	movlw	1
  7238  002346  6F80               	movwf	___llmod@counter& (0+255),b
  7239  002348  D006               	goto	l5490
  7240  00234A                     l5488:
  7241                           
  7242                           ; BSR set to: 0
  7243  00234A  90D8               	bcf	status,0,c
  7244  00234C  3635               	rlcf	___llmod@divisor^0,f,c
  7245  00234E  3636               	rlcf	(___llmod@divisor+1)^0,f,c
  7246  002350  3637               	rlcf	(___llmod@divisor+2)^0,f,c
  7247  002352  3638               	rlcf	(___llmod@divisor+3)^0,f,c
  7248  002354  2B80               	incf	___llmod@counter& (0+255),f,b
  7249  002356                     l5490:
  7250                           
  7251                           ; BSR set to: 0
  7252  002356  AE38               	btfss	(___llmod@divisor+3)^0,7,c
  7253  002358  D7F8               	goto	l5488
  7254  00235A                     u6470:
  7255                           
  7256                           ; BSR set to: 0
  7257  00235A  5035               	movf	___llmod@divisor^0,w,c
  7258  00235C  5C31               	subwf	___llmod@dividend^0,w,c
  7259  00235E  5036               	movf	(___llmod@divisor+1)^0,w,c
  7260  002360  5832               	subwfb	(___llmod@dividend+1)^0,w,c
  7261  002362  5037               	movf	(___llmod@divisor+2)^0,w,c
  7262  002364  5833               	subwfb	(___llmod@dividend+2)^0,w,c
  7263  002366  5038               	movf	(___llmod@divisor+3)^0,w,c
  7264  002368  5834               	subwfb	(___llmod@dividend+3)^0,w,c
  7265  00236A  A0D8               	btfss	status,0,c
  7266  00236C  D008               	goto	l5496
  7267                           
  7268                           ; BSR set to: 0
  7269  00236E  5035               	movf	___llmod@divisor^0,w,c
  7270  002370  5E31               	subwf	___llmod@dividend^0,f,c
  7271  002372  5036               	movf	(___llmod@divisor+1)^0,w,c
  7272  002374  5A32               	subwfb	(___llmod@dividend+1)^0,f,c
  7273  002376  5037               	movf	(___llmod@divisor+2)^0,w,c
  7274  002378  5A33               	subwfb	(___llmod@dividend+2)^0,f,c
  7275  00237A  5038               	movf	(___llmod@divisor+3)^0,w,c
  7276  00237C  5A34               	subwfb	(___llmod@dividend+3)^0,f,c
  7277  00237E                     l5496:
  7278                           
  7279                           ; BSR set to: 0
  7280  00237E  90D8               	bcf	status,0,c
  7281  002380  3238               	rrcf	(___llmod@divisor+3)^0,f,c
  7282  002382  3237               	rrcf	(___llmod@divisor+2)^0,f,c
  7283  002384  3236               	rrcf	(___llmod@divisor+1)^0,f,c
  7284  002386  3235               	rrcf	___llmod@divisor^0,f,c
  7285                           
  7286                           ; BSR set to: 0
  7287  002388  2F80               	decfsz	___llmod@counter& (0+255),f,b
  7288  00238A  D7E7               	goto	u6470
  7289  00238C                     l992:
  7290                           
  7291                           ; BSR set to: 0
  7292  00238C  C031  F031         	movff	___llmod@dividend,?___llmod
  7293  002390  C032  F032         	movff	___llmod@dividend+1,?___llmod+1
  7294  002394  C033  F033         	movff	___llmod@dividend+2,?___llmod+2
  7295  002398  C034  F034         	movff	___llmod@dividend+3,?___llmod+3
  7296                           
  7297                           ; BSR set to: 0
  7298  00239C  0012               	return		;funcret
  7299  00239E                     __end_of___llmod:
  7300                           	callstack 0
  7301                           
  7302 ;; *************** function ___lldiv *****************
  7303 ;; Defined at:
  7304 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\__lldiv.c"
  7305 ;; Parameters:    Size  Location     Type
  7306 ;;  dividend        4   35[COMRAM] unsigned long 
  7307 ;;  divisor         4   39[COMRAM] unsigned long 
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;  quotient        4   43[COMRAM] unsigned long 
  7310 ;;  counter         1   47[COMRAM] unsigned char 
  7311 ;; Return value:  Size  Location     Type
  7312 ;;                  4   35[COMRAM] unsigned long 
  7313 ;; Registers used:
  7314 ;;		wreg, status,2, status,0
  7315 ;; Tracked objects:
  7316 ;;		On entry : 3F/0
  7317 ;;		On exit  : 3F/0
  7318 ;;		Unchanged: 3F/0
  7319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7320 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7321 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7323 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7324 ;;Total ram usage:       13 bytes
  7325 ;; Hardware stack levels used:    1
  7326 ;; Hardware stack levels required when called:    5
  7327 ;; This function calls:
  7328 ;;		Nothing
  7329 ;; This function is called by:
  7330 ;;		_sprintf
  7331 ;; This function uses a non-reentrant model
  7332 ;;
  7333                           
  7334                           	psect	text29
  7335  002088                     __ptext29:
  7336                           	callstack 0
  7337  002088                     ___lldiv:
  7338                           	callstack 23
  7339                           
  7340                           ; BSR set to: 0
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;incstack = 0
  7344  002088  0E00               	movlw	0
  7345  00208A  6E2C               	movwf	___lldiv@quotient^0,c
  7346  00208C  0E00               	movlw	0
  7347  00208E  6E2D               	movwf	(___lldiv@quotient+1)^0,c
  7348  002090  0E00               	movlw	0
  7349  002092  6E2E               	movwf	(___lldiv@quotient+2)^0,c
  7350  002094  0E00               	movlw	0
  7351  002096  6E2F               	movwf	(___lldiv@quotient+3)^0,c
  7352                           
  7353                           ; BSR set to: 0
  7354  002098  5028               	movf	___lldiv@divisor^0,w,c
  7355  00209A  1029               	iorwf	(___lldiv@divisor+1)^0,w,c
  7356  00209C  102A               	iorwf	(___lldiv@divisor+2)^0,w,c
  7357  00209E  102B               	iorwf	(___lldiv@divisor+3)^0,w,c
  7358  0020A0  B4D8               	btfsc	status,2,c
  7359  0020A2  D02A               	goto	l577
  7360                           
  7361                           ; BSR set to: 0
  7362  0020A4  0E01               	movlw	1
  7363  0020A6  6E30               	movwf	___lldiv@counter^0,c
  7364  0020A8  D006               	goto	l5394
  7365  0020AA                     l5392:
  7366                           
  7367                           ; BSR set to: 0
  7368  0020AA  90D8               	bcf	status,0,c
  7369  0020AC  3628               	rlcf	___lldiv@divisor^0,f,c
  7370  0020AE  3629               	rlcf	(___lldiv@divisor+1)^0,f,c
  7371  0020B0  362A               	rlcf	(___lldiv@divisor+2)^0,f,c
  7372  0020B2  362B               	rlcf	(___lldiv@divisor+3)^0,f,c
  7373  0020B4  2A30               	incf	___lldiv@counter^0,f,c
  7374  0020B6                     l5394:
  7375                           
  7376                           ; BSR set to: 0
  7377  0020B6  AE2B               	btfss	(___lldiv@divisor+3)^0,7,c
  7378  0020B8  D7F8               	goto	l5392
  7379  0020BA                     u6310:
  7380                           
  7381                           ; BSR set to: 0
  7382  0020BA  90D8               	bcf	status,0,c
  7383  0020BC  362C               	rlcf	___lldiv@quotient^0,f,c
  7384  0020BE  362D               	rlcf	(___lldiv@quotient+1)^0,f,c
  7385  0020C0  362E               	rlcf	(___lldiv@quotient+2)^0,f,c
  7386  0020C2  362F               	rlcf	(___lldiv@quotient+3)^0,f,c
  7387                           
  7388                           ; BSR set to: 0
  7389  0020C4  5028               	movf	___lldiv@divisor^0,w,c
  7390  0020C6  5C24               	subwf	___lldiv@dividend^0,w,c
  7391  0020C8  5029               	movf	(___lldiv@divisor+1)^0,w,c
  7392  0020CA  5825               	subwfb	(___lldiv@dividend+1)^0,w,c
  7393  0020CC  502A               	movf	(___lldiv@divisor+2)^0,w,c
  7394  0020CE  5826               	subwfb	(___lldiv@dividend+2)^0,w,c
  7395  0020D0  502B               	movf	(___lldiv@divisor+3)^0,w,c
  7396  0020D2  5827               	subwfb	(___lldiv@dividend+3)^0,w,c
  7397  0020D4  A0D8               	btfss	status,0,c
  7398  0020D6  D009               	goto	l5404
  7399                           
  7400                           ; BSR set to: 0
  7401  0020D8  5028               	movf	___lldiv@divisor^0,w,c
  7402  0020DA  5E24               	subwf	___lldiv@dividend^0,f,c
  7403  0020DC  5029               	movf	(___lldiv@divisor+1)^0,w,c
  7404  0020DE  5A25               	subwfb	(___lldiv@dividend+1)^0,f,c
  7405  0020E0  502A               	movf	(___lldiv@divisor+2)^0,w,c
  7406  0020E2  5A26               	subwfb	(___lldiv@dividend+2)^0,f,c
  7407  0020E4  502B               	movf	(___lldiv@divisor+3)^0,w,c
  7408  0020E6  5A27               	subwfb	(___lldiv@dividend+3)^0,f,c
  7409                           
  7410                           ; BSR set to: 0
  7411  0020E8  802C               	bsf	___lldiv@quotient^0,0,c
  7412  0020EA                     l5404:
  7413                           
  7414                           ; BSR set to: 0
  7415  0020EA  90D8               	bcf	status,0,c
  7416  0020EC  322B               	rrcf	(___lldiv@divisor+3)^0,f,c
  7417  0020EE  322A               	rrcf	(___lldiv@divisor+2)^0,f,c
  7418  0020F0  3229               	rrcf	(___lldiv@divisor+1)^0,f,c
  7419  0020F2  3228               	rrcf	___lldiv@divisor^0,f,c
  7420                           
  7421                           ; BSR set to: 0
  7422  0020F4  2E30               	decfsz	___lldiv@counter^0,f,c
  7423  0020F6  D7E1               	goto	u6310
  7424  0020F8                     l577:
  7425                           
  7426                           ; BSR set to: 0
  7427  0020F8  C02C  F024         	movff	___lldiv@quotient,?___lldiv
  7428  0020FC  C02D  F025         	movff	___lldiv@quotient+1,?___lldiv+1
  7429  002100  C02E  F026         	movff	___lldiv@quotient+2,?___lldiv+2
  7430  002104  C02F  F027         	movff	___lldiv@quotient+3,?___lldiv+3
  7431                           
  7432                           ; BSR set to: 0
  7433  002108  0012               	return		;funcret
  7434  00210A                     __end_of___lldiv:
  7435                           	callstack 0
  7436                           
  7437 ;; *************** function ___fttol *****************
  7438 ;; Defined at:
  7439 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\fttol.c"
  7440 ;; Parameters:    Size  Location     Type
  7441 ;;  f1              3   16[BANK0 ] float 
  7442 ;; Auto vars:     Size  Location     Type
  7443 ;;  lval            4   26[BANK0 ] unsigned long 
  7444 ;;  exp1            1   30[BANK0 ] unsigned char 
  7445 ;;  sign1           1   25[BANK0 ] unsigned char 
  7446 ;; Return value:  Size  Location     Type
  7447 ;;                  4   16[BANK0 ] long 
  7448 ;; Registers used:
  7449 ;;		wreg, status,2, status,0
  7450 ;; Tracked objects:
  7451 ;;		On entry : 0/0
  7452 ;;		On exit  : 3F/0
  7453 ;;		Unchanged: 0/0
  7454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7455 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7456 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7457 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7458 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7459 ;;Total ram usage:       15 bytes
  7460 ;; Hardware stack levels used:    1
  7461 ;; Hardware stack levels required when called:    5
  7462 ;; This function calls:
  7463 ;;		Nothing
  7464 ;; This function is called by:
  7465 ;;		_sprintf
  7466 ;; This function uses a non-reentrant model
  7467 ;;
  7468                           
  7469                           	psect	text30
  7470  001DD2                     __ptext30:
  7471                           	callstack 0
  7472  001DD2                     ___fttol:
  7473                           	callstack 23
  7474                           
  7475                           ; BSR set to: 0
  7476                           ;incstack = 0
  7477  001DD2  C092  F094         	movff	___fttol@f1+2,??___fttol
  7478  001DD6  0100               	movlb	0	; () banked
  7479  001DD8  6B95               	clrf	(??___fttol+1)& (0+255),b
  7480  001DDA  6B96               	clrf	(??___fttol+2)& (0+255),b
  7481  001DDC  3591               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7482  001DDE  3794               	rlcf	??___fttol& (0+255),f,b
  7483  001DE0  E301               	bnc	u6381
  7484  001DE2  8195               	bsf	(??___fttol+1)& (0+255),0,b
  7485  001DE4                     u6381:
  7486  001DE4  5194               	movf	??___fttol& (0+255),w,b
  7487  001DE6  6F9E               	movwf	___fttol@exp1& (0+255),b
  7488  001DE8  519E               	movf	___fttol@exp1& (0+255),w,b
  7489  001DEA  A4D8               	btfss	status,2,c
  7490  001DEC  D009               	goto	l5444
  7491  001DEE                     u6390:
  7492                           
  7493                           ; BSR set to: 0
  7494  001DEE  0E00               	movlw	0
  7495  001DF0  6F90               	movwf	?___fttol& (0+255),b
  7496  001DF2  0E00               	movlw	0
  7497  001DF4  6F91               	movwf	(?___fttol+1)& (0+255),b
  7498  001DF6  0E00               	movlw	0
  7499  001DF8  6F92               	movwf	(?___fttol+2)& (0+255),b
  7500  001DFA  0E00               	movlw	0
  7501  001DFC  6F93               	movwf	(?___fttol+3)& (0+255),b
  7502  001DFE  0012               	return	
  7503  001E00                     l5444:
  7504                           
  7505                           ; BSR set to: 0
  7506  001E00  0E17               	movlw	23
  7507  001E02  6F94               	movwf	??___fttol& (0+255),b
  7508  001E04  C090  F095         	movff	___fttol@f1,??___fttol+1
  7509  001E08  C091  F096         	movff	___fttol@f1+1,??___fttol+2
  7510  001E0C  C092  F097         	movff	___fttol@f1+2,??___fttol+3
  7511  001E10  2994               	incf	??___fttol& (0+255),w,b
  7512  001E12  6F98               	movwf	(??___fttol+4)& (0+255),b
  7513  001E14  D004               	goto	u6400
  7514  001E16                     u6405:
  7515  001E16  90D8               	bcf	status,0,c
  7516  001E18  3397               	rrcf	(??___fttol+3)& (0+255),f,b
  7517  001E1A  3396               	rrcf	(??___fttol+2)& (0+255),f,b
  7518  001E1C  3395               	rrcf	(??___fttol+1)& (0+255),f,b
  7519  001E1E                     u6400:
  7520  001E1E  2F98               	decfsz	(??___fttol+4)& (0+255),f,b
  7521  001E20  D7FA               	goto	u6405
  7522  001E22  0100               	movlb	0	; () banked
  7523  001E24  5195               	movf	(??___fttol+1)& (0+255),w,b
  7524  001E26  6F99               	movwf	___fttol@sign1& (0+255),b
  7525                           
  7526                           ; BSR set to: 0
  7527  001E28  8F91               	bsf	(___fttol@f1+1)& (0+255),7,b
  7528                           
  7529                           ; BSR set to: 0
  7530  001E2A  0EFF               	movlw	255
  7531  001E2C  1790               	andwf	___fttol@f1& (0+255),f,b
  7532  001E2E  0EFF               	movlw	255
  7533  001E30  1791               	andwf	(___fttol@f1+1)& (0+255),f,b
  7534  001E32  0E00               	movlw	0
  7535  001E34  1792               	andwf	(___fttol@f1+2)& (0+255),f,b
  7536                           
  7537                           ; BSR set to: 0
  7538  001E36  5190               	movf	___fttol@f1& (0+255),w,b
  7539  001E38  6F9A               	movwf	___fttol@lval& (0+255),b
  7540  001E3A  5191               	movf	(___fttol@f1+1)& (0+255),w,b
  7541  001E3C  6F9B               	movwf	(___fttol@lval+1)& (0+255),b
  7542  001E3E  5192               	movf	(___fttol@f1+2)& (0+255),w,b
  7543  001E40  6F9C               	movwf	(___fttol@lval+2)& (0+255),b
  7544  001E42  6B9D               	clrf	(___fttol@lval+3)& (0+255),b
  7545                           
  7546                           ; BSR set to: 0
  7547  001E44  0E8E               	movlw	142
  7548  001E46  5F9E               	subwf	___fttol@exp1& (0+255),f,b
  7549                           
  7550                           ; BSR set to: 0
  7551  001E48  AF9E               	btfss	___fttol@exp1& (0+255),7,b
  7552  001E4A  D00D               	goto	l5466
  7553                           
  7554                           ; BSR set to: 0
  7555  001E4C  519E               	movf	___fttol@exp1& (0+255),w,b
  7556  001E4E  0A80               	xorlw	128
  7557  001E50  0F8F               	addlw	143
  7558  001E52  A0D8               	btfss	status,0,c
  7559  001E54  D7CC               	goto	u6390
  7560  001E56                     l5462:
  7561                           
  7562                           ; BSR set to: 0
  7563  001E56  90D8               	bcf	status,0,c
  7564  001E58  339D               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7565  001E5A  339C               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7566  001E5C  339B               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7567  001E5E  339A               	rrcf	___fttol@lval& (0+255),f,b
  7568                           
  7569                           ; BSR set to: 0
  7570  001E60  3F9E               	incfsz	___fttol@exp1& (0+255),f,b
  7571  001E62  D7F9               	goto	l5462
  7572  001E64  D00D               	goto	u6440
  7573  001E66                     l5466:
  7574                           
  7575                           ; BSR set to: 0
  7576  001E66  0E17               	movlw	23
  7577  001E68  659E               	cpfsgt	___fttol@exp1& (0+255),b
  7578  001E6A  D007               	goto	l5474
  7579  001E6C  D7C0               	goto	u6390
  7580  001E6E                     l5472:
  7581                           
  7582                           ; BSR set to: 0
  7583  001E6E  90D8               	bcf	status,0,c
  7584  001E70  379A               	rlcf	___fttol@lval& (0+255),f,b
  7585  001E72  379B               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7586  001E74  379C               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7587  001E76  379D               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7588  001E78  079E               	decf	___fttol@exp1& (0+255),f,b
  7589  001E7A                     l5474:
  7590                           
  7591                           ; BSR set to: 0
  7592  001E7A  519E               	movf	___fttol@exp1& (0+255),w,b
  7593  001E7C  A4D8               	btfss	status,2,c
  7594  001E7E  D7F7               	goto	l5472
  7595  001E80                     u6440:
  7596                           
  7597                           ; BSR set to: 0
  7598  001E80  5199               	movf	___fttol@sign1& (0+255),w,b
  7599  001E82  B4D8               	btfsc	status,2,c
  7600  001E84  D008               	goto	l5480
  7601                           
  7602                           ; BSR set to: 0
  7603  001E86  1F9D               	comf	(___fttol@lval+3)& (0+255),f,b
  7604  001E88  1F9C               	comf	(___fttol@lval+2)& (0+255),f,b
  7605  001E8A  1F9B               	comf	(___fttol@lval+1)& (0+255),f,b
  7606  001E8C  6D9A               	negf	___fttol@lval& (0+255),b
  7607  001E8E  0E00               	movlw	0
  7608  001E90  239B               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7609  001E92  239C               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7610  001E94  239D               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7611  001E96                     l5480:
  7612                           
  7613                           ; BSR set to: 0
  7614  001E96  C09A  F090         	movff	___fttol@lval,?___fttol
  7615  001E9A  C09B  F091         	movff	___fttol@lval+1,?___fttol+1
  7616  001E9E  C09C  F092         	movff	___fttol@lval+2,?___fttol+2
  7617  001EA2  C09D  F093         	movff	___fttol@lval+3,?___fttol+3
  7618                           
  7619                           ; BSR set to: 0
  7620  001EA6  0012               	return		;funcret
  7621  001EA8                     __end_of___fttol:
  7622                           	callstack 0
  7623                           
  7624 ;; *************** function ___ftsub *****************
  7625 ;; Defined at:
  7626 ;;		line 19 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftsub.c"
  7627 ;; Parameters:    Size  Location     Type
  7628 ;;  f1              3   31[BANK0 ] float 
  7629 ;;  f2              3   34[BANK0 ] float 
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;		None
  7632 ;; Return value:  Size  Location     Type
  7633 ;;                  3   31[BANK0 ] float 
  7634 ;; Registers used:
  7635 ;;		wreg, status,2, status,0, cstack
  7636 ;; Tracked objects:
  7637 ;;		On entry : 0/0
  7638 ;;		On exit  : 0/0
  7639 ;;		Unchanged: 0/0
  7640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7641 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7644 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7645 ;;Total ram usage:        6 bytes
  7646 ;; Hardware stack levels used:    1
  7647 ;; Hardware stack levels required when called:    7
  7648 ;; This function calls:
  7649 ;;		___ftadd
  7650 ;; This function is called by:
  7651 ;;		_sprintf
  7652 ;; This function uses a non-reentrant model
  7653 ;;
  7654                           
  7655                           	psect	text31
  7656  0026EA                     __ptext31:
  7657                           	callstack 0
  7658  0026EA                     ___ftsub:
  7659                           	callstack 21
  7660                           
  7661                           ; BSR set to: 0
  7662                           ;incstack = 0
  7663  0026EA  0100               	movlb	0	; () banked
  7664  0026EC  51A2               	movf	___ftsub@f2& (0+255),w,b
  7665  0026EE  11A3               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7666  0026F0  11A4               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7667  0026F2  B4D8               	btfsc	status,2,c
  7668  0026F4  D006               	goto	l5412
  7669                           
  7670                           ; BSR set to: 0
  7671  0026F6  0E00               	movlw	0
  7672  0026F8  1BA2               	xorwf	___ftsub@f2& (0+255),f,b
  7673  0026FA  0E00               	movlw	0
  7674  0026FC  1BA3               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7675  0026FE  0E80               	movlw	128
  7676  002700  1BA4               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7677  002702                     l5412:
  7678                           
  7679                           ; BSR set to: 0
  7680  002702  C09F  F093         	movff	___ftsub@f1,___ftadd@f1
  7681  002706  C0A0  F094         	movff	___ftsub@f1+1,___ftadd@f1+1
  7682  00270A  C0A1  F095         	movff	___ftsub@f1+2,___ftadd@f1+2
  7683  00270E  C0A2  F096         	movff	___ftsub@f2,___ftadd@f2
  7684  002712  C0A3  F097         	movff	___ftsub@f2+1,___ftadd@f2+1
  7685  002716  C0A4  F098         	movff	___ftsub@f2+2,___ftadd@f2+2
  7686  00271A  ECD6  F00A         	call	___ftadd	;wreg free
  7687  00271E  C093  F09F         	movff	?___ftadd,?___ftsub
  7688  002722  C094  F0A0         	movff	?___ftadd+1,?___ftsub+1
  7689  002726  C095  F0A1         	movff	?___ftadd+2,?___ftsub+2
  7690  00272A  0012               	return		;funcret
  7691  00272C                     __end_of___ftsub:
  7692                           	callstack 0
  7693                           
  7694 ;; *************** function ___ftadd *****************
  7695 ;; Defined at:
  7696 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftadd.c"
  7697 ;; Parameters:    Size  Location     Type
  7698 ;;  f1              3   19[BANK0 ] float 
  7699 ;;  f2              3   22[BANK0 ] float 
  7700 ;; Auto vars:     Size  Location     Type
  7701 ;;  exp1            1   30[BANK0 ] unsigned char 
  7702 ;;  exp2            1   29[BANK0 ] unsigned char 
  7703 ;;  sign            1   28[BANK0 ] unsigned char 
  7704 ;; Return value:  Size  Location     Type
  7705 ;;                  3   19[BANK0 ] float 
  7706 ;; Registers used:
  7707 ;;		wreg, status,2, status,0, cstack
  7708 ;; Tracked objects:
  7709 ;;		On entry : 0/0
  7710 ;;		On exit  : 0/0
  7711 ;;		Unchanged: 0/0
  7712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7713 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7714 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7715 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7716 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7717 ;;Total ram usage:       12 bytes
  7718 ;; Hardware stack levels used:    1
  7719 ;; Hardware stack levels required when called:    6
  7720 ;; This function calls:
  7721 ;;		___ftpack
  7722 ;; This function is called by:
  7723 ;;		_sprintf
  7724 ;;		___ftsub
  7725 ;; This function uses a non-reentrant model
  7726 ;;
  7727                           
  7728                           	psect	text32
  7729  0015AC                     __ptext32:
  7730                           	callstack 0
  7731  0015AC                     ___ftadd:
  7732                           	callstack 21
  7733                           
  7734                           ;incstack = 0
  7735  0015AC  C095  F099         	movff	___ftadd@f1+2,??___ftadd
  7736  0015B0  0100               	movlb	0	; () banked
  7737  0015B2  6B9A               	clrf	(??___ftadd+1)& (0+255),b
  7738  0015B4  6B9B               	clrf	(??___ftadd+2)& (0+255),b
  7739  0015B6  3594               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  7740  0015B8  3799               	rlcf	??___ftadd& (0+255),f,b
  7741  0015BA  E301               	bnc	u5621
  7742  0015BC  819A               	bsf	(??___ftadd+1)& (0+255),0,b
  7743  0015BE                     u5621:
  7744  0015BE  5199               	movf	??___ftadd& (0+255),w,b
  7745  0015C0  6F9E               	movwf	___ftadd@exp1& (0+255),b
  7746  0015C2  C098  F099         	movff	___ftadd@f2+2,??___ftadd
  7747  0015C6  6B9A               	clrf	(??___ftadd+1)& (0+255),b
  7748  0015C8  6B9B               	clrf	(??___ftadd+2)& (0+255),b
  7749  0015CA  3597               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  7750  0015CC  3799               	rlcf	??___ftadd& (0+255),f,b
  7751  0015CE  E301               	bnc	u5631
  7752  0015D0  819A               	bsf	(??___ftadd+1)& (0+255),0,b
  7753  0015D2                     u5631:
  7754  0015D2  5199               	movf	??___ftadd& (0+255),w,b
  7755  0015D4  6F9D               	movwf	___ftadd@exp2& (0+255),b
  7756                           
  7757                           ; BSR set to: 0
  7758  0015D6  519E               	movf	___ftadd@exp1& (0+255),w,b
  7759  0015D8  B4D8               	btfsc	status,2,c
  7760  0015DA  D00A               	goto	u5660
  7761                           
  7762                           ; BSR set to: 0
  7763  0015DC  519D               	movf	___ftadd@exp2& (0+255),w,b
  7764  0015DE  5D9E               	subwf	___ftadd@exp1& (0+255),w,b
  7765  0015E0  B0D8               	btfsc	status,0,c
  7766  0015E2  D00D               	goto	l4950
  7767                           
  7768                           ; BSR set to: 0
  7769  0015E4  519E               	movf	___ftadd@exp1& (0+255),w,b
  7770  0015E6  5D9D               	subwf	___ftadd@exp2& (0+255),w,b
  7771  0015E8  6F99               	movwf	??___ftadd& (0+255),b
  7772  0015EA  0E18               	movlw	24
  7773  0015EC  6599               	cpfsgt	??___ftadd& (0+255),b
  7774  0015EE  D007               	goto	l4950
  7775  0015F0                     u5660:
  7776                           
  7777                           ; BSR set to: 0
  7778  0015F0  C096  F093         	movff	___ftadd@f2,?___ftadd
  7779  0015F4  C097  F094         	movff	___ftadd@f2+1,?___ftadd+1
  7780  0015F8  C098  F095         	movff	___ftadd@f2+2,?___ftadd+2
  7781  0015FC  0012               	return	
  7782  0015FE                     l4950:
  7783                           
  7784                           ; BSR set to: 0
  7785  0015FE  519D               	movf	___ftadd@exp2& (0+255),w,b
  7786  001600  B4D8               	btfsc	status,2,c
  7787  001602  D00A               	goto	u5690
  7788                           
  7789                           ; BSR set to: 0
  7790  001604  519E               	movf	___ftadd@exp1& (0+255),w,b
  7791  001606  5D9D               	subwf	___ftadd@exp2& (0+255),w,b
  7792  001608  B0D8               	btfsc	status,0,c
  7793  00160A  D00D               	goto	l4956
  7794                           
  7795                           ; BSR set to: 0
  7796  00160C  519D               	movf	___ftadd@exp2& (0+255),w,b
  7797  00160E  5D9E               	subwf	___ftadd@exp1& (0+255),w,b
  7798  001610  6F99               	movwf	??___ftadd& (0+255),b
  7799  001612  0E18               	movlw	24
  7800  001614  6599               	cpfsgt	??___ftadd& (0+255),b
  7801  001616  D007               	goto	l4956
  7802  001618                     u5690:
  7803                           
  7804                           ; BSR set to: 0
  7805  001618  C093  F093         	movff	___ftadd@f1,?___ftadd
  7806  00161C  C094  F094         	movff	___ftadd@f1+1,?___ftadd+1
  7807  001620  C095  F095         	movff	___ftadd@f1+2,?___ftadd+2
  7808  001624  0012               	return	
  7809  001626                     l4956:
  7810                           
  7811                           ; BSR set to: 0
  7812  001626  0E06               	movlw	6
  7813  001628  6F9C               	movwf	___ftadd@sign& (0+255),b
  7814                           
  7815                           ; BSR set to: 0
  7816  00162A  BF95               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  7817                           
  7818                           ; BSR set to: 0
  7819  00162C  8F9C               	bsf	___ftadd@sign& (0+255),7,b
  7820                           
  7821                           ; BSR set to: 0
  7822  00162E  BF98               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  7823                           
  7824                           ; BSR set to: 0
  7825  001630  8D9C               	bsf	___ftadd@sign& (0+255),6,b
  7826                           
  7827                           ; BSR set to: 0
  7828  001632  8F94               	bsf	(___ftadd@f1+1)& (0+255),7,b
  7829                           
  7830                           ; BSR set to: 0
  7831  001634  0EFF               	movlw	255
  7832  001636  1793               	andwf	___ftadd@f1& (0+255),f,b
  7833  001638  0EFF               	movlw	255
  7834  00163A  1794               	andwf	(___ftadd@f1+1)& (0+255),f,b
  7835  00163C  0E00               	movlw	0
  7836  00163E  1795               	andwf	(___ftadd@f1+2)& (0+255),f,b
  7837  001640  8F97               	bsf	(___ftadd@f2+1)& (0+255),7,b
  7838                           
  7839                           ; BSR set to: 0
  7840  001642  0EFF               	movlw	255
  7841  001644  1796               	andwf	___ftadd@f2& (0+255),f,b
  7842  001646  0EFF               	movlw	255
  7843  001648  1797               	andwf	(___ftadd@f2+1)& (0+255),f,b
  7844  00164A  0E00               	movlw	0
  7845  00164C  1798               	andwf	(___ftadd@f2+2)& (0+255),f,b
  7846                           
  7847                           ; BSR set to: 0
  7848  00164E  519D               	movf	___ftadd@exp2& (0+255),w,b
  7849  001650  5D9E               	subwf	___ftadd@exp1& (0+255),w,b
  7850  001652  B0D8               	btfsc	status,0,c
  7851  001654  D01B               	goto	l4982
  7852  001656                     u5720:
  7853                           
  7854                           ; BSR set to: 0
  7855  001656  90D8               	bcf	status,0,c
  7856  001658  3796               	rlcf	___ftadd@f2& (0+255),f,b
  7857  00165A  3797               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  7858  00165C  3798               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  7859  00165E  079D               	decf	___ftadd@exp2& (0+255),f,b
  7860                           
  7861                           ; BSR set to: 0
  7862  001660  519E               	movf	___ftadd@exp1& (0+255),w,b
  7863  001662  199D               	xorwf	___ftadd@exp2& (0+255),w,b
  7864  001664  B4D8               	btfsc	status,2,c
  7865  001666  D00D               	goto	l4980
  7866                           
  7867                           ; BSR set to: 0
  7868  001668  079C               	decf	___ftadd@sign& (0+255),f,b
  7869  00166A  C09C  F099         	movff	___ftadd@sign,??___ftadd
  7870  00166E  0E07               	movlw	7
  7871  001670  1799               	andwf	??___ftadd& (0+255),f,b
  7872  001672  B4D8               	btfsc	status,2,c
  7873  001674  D006               	goto	l4980
  7874  001676  D7EF               	goto	u5720
  7875  001678                     l4978:
  7876                           
  7877                           ; BSR set to: 0
  7878  001678  90D8               	bcf	status,0,c
  7879  00167A  3395               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  7880  00167C  3394               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  7881  00167E  3393               	rrcf	___ftadd@f1& (0+255),f,b
  7882  001680  2B9E               	incf	___ftadd@exp1& (0+255),f,b
  7883  001682                     l4980:
  7884                           
  7885                           ; BSR set to: 0
  7886  001682  519D               	movf	___ftadd@exp2& (0+255),w,b
  7887  001684  199E               	xorwf	___ftadd@exp1& (0+255),w,b
  7888  001686  B4D8               	btfsc	status,2,c
  7889  001688  D01F               	goto	u5790
  7890  00168A  D7F6               	goto	l4978
  7891  00168C                     l4982:
  7892                           
  7893                           ; BSR set to: 0
  7894  00168C  519E               	movf	___ftadd@exp1& (0+255),w,b
  7895  00168E  5D9D               	subwf	___ftadd@exp2& (0+255),w,b
  7896  001690  B0D8               	btfsc	status,0,c
  7897  001692  D01A               	goto	u5790
  7898  001694                     u5760:
  7899                           
  7900                           ; BSR set to: 0
  7901  001694  90D8               	bcf	status,0,c
  7902  001696  3793               	rlcf	___ftadd@f1& (0+255),f,b
  7903  001698  3794               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  7904  00169A  3795               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  7905  00169C  079E               	decf	___ftadd@exp1& (0+255),f,b
  7906                           
  7907                           ; BSR set to: 0
  7908  00169E  519E               	movf	___ftadd@exp1& (0+255),w,b
  7909  0016A0  199D               	xorwf	___ftadd@exp2& (0+255),w,b
  7910  0016A2  B4D8               	btfsc	status,2,c
  7911  0016A4  D00D               	goto	l4992
  7912                           
  7913                           ; BSR set to: 0
  7914  0016A6  079C               	decf	___ftadd@sign& (0+255),f,b
  7915  0016A8  C09C  F099         	movff	___ftadd@sign,??___ftadd
  7916  0016AC  0E07               	movlw	7
  7917  0016AE  1799               	andwf	??___ftadd& (0+255),f,b
  7918  0016B0  B4D8               	btfsc	status,2,c
  7919  0016B2  D006               	goto	l4992
  7920  0016B4  D7EF               	goto	u5760
  7921  0016B6                     l4990:
  7922                           
  7923                           ; BSR set to: 0
  7924  0016B6  90D8               	bcf	status,0,c
  7925  0016B8  3398               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  7926  0016BA  3397               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  7927  0016BC  3396               	rrcf	___ftadd@f2& (0+255),f,b
  7928  0016BE  2B9D               	incf	___ftadd@exp2& (0+255),f,b
  7929  0016C0                     l4992:
  7930                           
  7931                           ; BSR set to: 0
  7932  0016C0  519D               	movf	___ftadd@exp2& (0+255),w,b
  7933  0016C2  199E               	xorwf	___ftadd@exp1& (0+255),w,b
  7934  0016C4  A4D8               	btfss	status,2,c
  7935  0016C6  D7F7               	goto	l4990
  7936  0016C8                     u5790:
  7937                           
  7938                           ; BSR set to: 0
  7939  0016C8  AF9C               	btfss	___ftadd@sign& (0+255),7,b
  7940  0016CA  D00C               	goto	l897
  7941                           
  7942                           ; BSR set to: 0
  7943  0016CC  0EFF               	movlw	255
  7944  0016CE  1B93               	xorwf	___ftadd@f1& (0+255),f,b
  7945  0016D0  0EFF               	movlw	255
  7946  0016D2  1B94               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  7947  0016D4  0EFF               	movlw	255
  7948  0016D6  1B95               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  7949  0016D8  0E01               	movlw	1
  7950  0016DA  2793               	addwf	___ftadd@f1& (0+255),f,b
  7951  0016DC  0E00               	movlw	0
  7952  0016DE  2394               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  7953  0016E0  0E00               	movlw	0
  7954  0016E2  2395               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  7955  0016E4                     l897:
  7956                           
  7957                           ; BSR set to: 0
  7958  0016E4  AD9C               	btfss	___ftadd@sign& (0+255),6,b
  7959  0016E6  D00C               	goto	l4998
  7960                           
  7961                           ; BSR set to: 0
  7962  0016E8  0EFF               	movlw	255
  7963  0016EA  1B96               	xorwf	___ftadd@f2& (0+255),f,b
  7964  0016EC  0EFF               	movlw	255
  7965  0016EE  1B97               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7966  0016F0  0EFF               	movlw	255
  7967  0016F2  1B98               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7968  0016F4  0E01               	movlw	1
  7969  0016F6  2796               	addwf	___ftadd@f2& (0+255),f,b
  7970  0016F8  0E00               	movlw	0
  7971  0016FA  2397               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7972  0016FC  0E00               	movlw	0
  7973  0016FE  2398               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7974  001700                     l4998:
  7975                           
  7976                           ; BSR set to: 0
  7977  001700  0E00               	movlw	0
  7978  001702  6F9C               	movwf	___ftadd@sign& (0+255),b
  7979                           
  7980                           ; BSR set to: 0
  7981  001704  5193               	movf	___ftadd@f1& (0+255),w,b
  7982  001706  2796               	addwf	___ftadd@f2& (0+255),f,b
  7983  001708  5194               	movf	(___ftadd@f1+1)& (0+255),w,b
  7984  00170A  2397               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7985  00170C  5195               	movf	(___ftadd@f1+2)& (0+255),w,b
  7986  00170E  2398               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7987                           
  7988                           ; BSR set to: 0
  7989  001710  AF98               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7990  001712  D00E               	goto	l5008
  7991                           
  7992                           ; BSR set to: 0
  7993  001714  0EFF               	movlw	255
  7994  001716  1B96               	xorwf	___ftadd@f2& (0+255),f,b
  7995  001718  0EFF               	movlw	255
  7996  00171A  1B97               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7997  00171C  0EFF               	movlw	255
  7998  00171E  1B98               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7999  001720  0E01               	movlw	1
  8000  001722  2796               	addwf	___ftadd@f2& (0+255),f,b
  8001  001724  0E00               	movlw	0
  8002  001726  2397               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8003  001728  0E00               	movlw	0
  8004  00172A  2398               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8005                           
  8006                           ; BSR set to: 0
  8007  00172C  0E01               	movlw	1
  8008  00172E  6F9C               	movwf	___ftadd@sign& (0+255),b
  8009  001730                     l5008:
  8010                           
  8011                           ; BSR set to: 0
  8012  001730  C096  F024         	movff	___ftadd@f2,___ftpack@arg
  8013  001734  C097  F025         	movff	___ftadd@f2+1,___ftpack@arg+1
  8014  001738  C098  F026         	movff	___ftadd@f2+2,___ftpack@arg+2
  8015  00173C  C09E  F027         	movff	___ftadd@exp1,___ftpack@exp
  8016  001740  C09C  F028         	movff	___ftadd@sign,___ftpack@sign
  8017  001744  EC54  F00F         	call	___ftpack	;wreg free
  8018  001748  C024  F093         	movff	?___ftpack,?___ftadd
  8019  00174C  C025  F094         	movff	?___ftpack+1,?___ftadd+1
  8020  001750  C026  F095         	movff	?___ftpack+2,?___ftadd+2
  8021  001754  0012               	return		;funcret
  8022  001756                     __end_of___ftadd:
  8023                           	callstack 0
  8024                           
  8025 ;; *************** function ___ftpack *****************
  8026 ;; Defined at:
  8027 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\float.c"
  8028 ;; Parameters:    Size  Location     Type
  8029 ;;  arg             3   35[COMRAM] unsigned um
  8030 ;;  exp             1   38[COMRAM] unsigned char 
  8031 ;;  sign            1   39[COMRAM] unsigned char 
  8032 ;; Auto vars:     Size  Location     Type
  8033 ;;		None
  8034 ;; Return value:  Size  Location     Type
  8035 ;;                  3   35[COMRAM] float 
  8036 ;; Registers used:
  8037 ;;		wreg, status,2, status,0
  8038 ;; Tracked objects:
  8039 ;;		On entry : 0/0
  8040 ;;		On exit  : 0/0
  8041 ;;		Unchanged: 0/0
  8042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8043 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8045 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8046 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8047 ;;Total ram usage:        8 bytes
  8048 ;; Hardware stack levels used:    1
  8049 ;; Hardware stack levels required when called:    5
  8050 ;; This function calls:
  8051 ;;		Nothing
  8052 ;; This function is called by:
  8053 ;;		___awtoft
  8054 ;;		___ftadd
  8055 ;;		___ftdiv
  8056 ;;		___ftmul
  8057 ;;		___lltoft
  8058 ;; This function uses a non-reentrant model
  8059 ;;
  8060                           
  8061                           	psect	text33
  8062  001EA8                     __ptext33:
  8063                           	callstack 0
  8064  001EA8                     ___ftpack:
  8065                           	callstack 23
  8066                           
  8067                           ;incstack = 0
  8068  001EA8  5027               	movf	___ftpack@exp^0,w,c
  8069  001EAA  B4D8               	btfsc	status,2,c
  8070  001EAC  D005               	goto	u5540
  8071  001EAE  5024               	movf	___ftpack@arg^0,w,c
  8072  001EB0  1025               	iorwf	(___ftpack@arg+1)^0,w,c
  8073  001EB2  1026               	iorwf	(___ftpack@arg+2)^0,w,c
  8074  001EB4  A4D8               	btfss	status,2,c
  8075  001EB6  D00C               	goto	l4892
  8076  001EB8                     u5540:
  8077  001EB8  0E00               	movlw	0
  8078  001EBA  6E24               	movwf	?___ftpack^0,c
  8079  001EBC  0E00               	movlw	0
  8080  001EBE  6E25               	movwf	(?___ftpack+1)^0,c
  8081  001EC0  0E00               	movlw	0
  8082  001EC2  6E26               	movwf	(?___ftpack+2)^0,c
  8083  001EC4  0012               	return	
  8084  001EC6                     l4890:
  8085  001EC6  2A27               	incf	___ftpack@exp^0,f,c
  8086  001EC8  90D8               	bcf	status,0,c
  8087  001ECA  3226               	rrcf	(___ftpack@arg+2)^0,f,c
  8088  001ECC  3225               	rrcf	(___ftpack@arg+1)^0,f,c
  8089  001ECE  3224               	rrcf	___ftpack@arg^0,f,c
  8090  001ED0                     l4892:
  8091  001ED0  0E00               	movlw	0
  8092  001ED2  1424               	andwf	___ftpack@arg^0,w,c
  8093  001ED4  6E29               	movwf	??___ftpack^0,c
  8094  001ED6  0E00               	movlw	0
  8095  001ED8  1425               	andwf	(___ftpack@arg+1)^0,w,c
  8096  001EDA  6E2A               	movwf	(??___ftpack+1)^0,c
  8097  001EDC  0EFE               	movlw	254
  8098  001EDE  1426               	andwf	(___ftpack@arg+2)^0,w,c
  8099  001EE0  6E2B               	movwf	(??___ftpack+2)^0,c
  8100  001EE2  5029               	movf	??___ftpack^0,w,c
  8101  001EE4  102A               	iorwf	(??___ftpack+1)^0,w,c
  8102  001EE6  102B               	iorwf	(??___ftpack+2)^0,w,c
  8103  001EE8  B4D8               	btfsc	status,2,c
  8104  001EEA  D00C               	goto	l4898
  8105  001EEC  D7EC               	goto	l4890
  8106  001EEE                     l4894:
  8107  001EEE  2A27               	incf	___ftpack@exp^0,f,c
  8108  001EF0  0E01               	movlw	1
  8109  001EF2  2624               	addwf	___ftpack@arg^0,f,c
  8110  001EF4  0E00               	movlw	0
  8111  001EF6  2225               	addwfc	(___ftpack@arg+1)^0,f,c
  8112  001EF8  0E00               	movlw	0
  8113  001EFA  2226               	addwfc	(___ftpack@arg+2)^0,f,c
  8114  001EFC  90D8               	bcf	status,0,c
  8115  001EFE  3226               	rrcf	(___ftpack@arg+2)^0,f,c
  8116  001F00  3225               	rrcf	(___ftpack@arg+1)^0,f,c
  8117  001F02  3224               	rrcf	___ftpack@arg^0,f,c
  8118  001F04                     l4898:
  8119  001F04  0E00               	movlw	0
  8120  001F06  1424               	andwf	___ftpack@arg^0,w,c
  8121  001F08  6E29               	movwf	??___ftpack^0,c
  8122  001F0A  0E00               	movlw	0
  8123  001F0C  1425               	andwf	(___ftpack@arg+1)^0,w,c
  8124  001F0E  6E2A               	movwf	(??___ftpack+1)^0,c
  8125  001F10  0EFF               	movlw	255
  8126  001F12  1426               	andwf	(___ftpack@arg+2)^0,w,c
  8127  001F14  6E2B               	movwf	(??___ftpack+2)^0,c
  8128  001F16  5029               	movf	??___ftpack^0,w,c
  8129  001F18  102A               	iorwf	(??___ftpack+1)^0,w,c
  8130  001F1A  102B               	iorwf	(??___ftpack+2)^0,w,c
  8131  001F1C  B4D8               	btfsc	status,2,c
  8132  001F1E  D006               	goto	l4902
  8133  001F20  D7E6               	goto	l4894
  8134  001F22                     l4900:
  8135  001F22  0627               	decf	___ftpack@exp^0,f,c
  8136  001F24  90D8               	bcf	status,0,c
  8137  001F26  3624               	rlcf	___ftpack@arg^0,f,c
  8138  001F28  3625               	rlcf	(___ftpack@arg+1)^0,f,c
  8139  001F2A  3626               	rlcf	(___ftpack@arg+2)^0,f,c
  8140  001F2C                     l4902:
  8141  001F2C  BE25               	btfsc	(___ftpack@arg+1)^0,7,c
  8142  001F2E  D003               	goto	u5580
  8143  001F30  0E02               	movlw	2
  8144  001F32  6027               	cpfslt	___ftpack@exp^0,c
  8145  001F34  D7F6               	goto	l4900
  8146  001F36                     u5580:
  8147  001F36  A027               	btfss	___ftpack@exp^0,0,c
  8148  001F38  9E25               	bcf	(___ftpack@arg+1)^0,7,c
  8149  001F3A  90D8               	bcf	status,0,c
  8150  001F3C  3227               	rrcf	___ftpack@exp^0,f,c
  8151  001F3E  5027               	movf	___ftpack@exp^0,w,c
  8152  001F40  1226               	iorwf	(___ftpack@arg+2)^0,f,c
  8153  001F42  5028               	movf	___ftpack@sign^0,w,c
  8154  001F44  A4D8               	btfss	status,2,c
  8155  001F46  8E26               	bsf	(___ftpack@arg+2)^0,7,c
  8156  001F48  C024  F024         	movff	___ftpack@arg,?___ftpack
  8157  001F4C  C025  F025         	movff	___ftpack@arg+1,?___ftpack+1
  8158  001F50  C026  F026         	movff	___ftpack@arg+2,?___ftpack+2
  8159  001F54  0012               	return		;funcret
  8160  001F56                     __end_of___ftpack:
  8161                           	callstack 0
  8162                           
  8163 ;; *************** function ___ftneg *****************
  8164 ;; Defined at:
  8165 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftneg.c"
  8166 ;; Parameters:    Size  Location     Type
  8167 ;;  f1              3   35[COMRAM] float 
  8168 ;; Auto vars:     Size  Location     Type
  8169 ;;		None
  8170 ;; Return value:  Size  Location     Type
  8171 ;;                  3   35[COMRAM] float 
  8172 ;; Registers used:
  8173 ;;		wreg, status,2, status,0
  8174 ;; Tracked objects:
  8175 ;;		On entry : 3F/0
  8176 ;;		On exit  : 3F/0
  8177 ;;		Unchanged: 3F/0
  8178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8179 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8182 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8183 ;;Total ram usage:        3 bytes
  8184 ;; Hardware stack levels used:    1
  8185 ;; Hardware stack levels required when called:    5
  8186 ;; This function calls:
  8187 ;;		Nothing
  8188 ;; This function is called by:
  8189 ;;		_sprintf
  8190 ;; This function uses a non-reentrant model
  8191 ;;
  8192                           
  8193                           	psect	text34
  8194  0029DA                     __ptext34:
  8195                           	callstack 0
  8196  0029DA                     ___ftneg:
  8197                           	callstack 23
  8198                           
  8199                           ; BSR set to: 0
  8200                           
  8201                           ;incstack = 0
  8202  0029DA  5024               	movf	___ftneg@f1^0,w,c
  8203  0029DC  1025               	iorwf	(___ftneg@f1+1)^0,w,c
  8204  0029DE  1026               	iorwf	(___ftneg@f1+2)^0,w,c
  8205  0029E0  B4D8               	btfsc	status,2,c
  8206  0029E2  D006               	goto	l947
  8207                           
  8208                           ; BSR set to: 0
  8209  0029E4  0E00               	movlw	0
  8210  0029E6  1A24               	xorwf	___ftneg@f1^0,f,c
  8211  0029E8  0E00               	movlw	0
  8212  0029EA  1A25               	xorwf	(___ftneg@f1+1)^0,f,c
  8213  0029EC  0E80               	movlw	128
  8214  0029EE  1A26               	xorwf	(___ftneg@f1+2)^0,f,c
  8215  0029F0                     l947:
  8216                           
  8217                           ; BSR set to: 0
  8218  0029F0  C024  F024         	movff	___ftneg@f1,?___ftneg
  8219  0029F4  C025  F025         	movff	___ftneg@f1+1,?___ftneg+1
  8220  0029F8  C026  F026         	movff	___ftneg@f1+2,?___ftneg+2
  8221                           
  8222                           ; BSR set to: 0
  8223  0029FC  0012               	return		;funcret
  8224  0029FE                     __end_of___ftneg:
  8225                           	callstack 0
  8226                           
  8227 ;; *************** function ___ftge *****************
  8228 ;; Defined at:
  8229 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftge.c"
  8230 ;; Parameters:    Size  Location     Type
  8231 ;;  ff1             3   35[COMRAM] float 
  8232 ;;  ff2             3   38[COMRAM] float 
  8233 ;; Auto vars:     Size  Location     Type
  8234 ;;		None
  8235 ;; Return value:  Size  Location     Type
  8236 ;;		None               void
  8237 ;; Registers used:
  8238 ;;		wreg, status,2, status,0
  8239 ;; Tracked objects:
  8240 ;;		On entry : 0/0
  8241 ;;		On exit  : 0/0
  8242 ;;		Unchanged: 0/0
  8243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8244 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8246 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8247 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8248 ;;Total ram usage:        9 bytes
  8249 ;; Hardware stack levels used:    1
  8250 ;; Hardware stack levels required when called:    5
  8251 ;; This function calls:
  8252 ;;		Nothing
  8253 ;; This function is called by:
  8254 ;;		_sprintf
  8255 ;; This function uses a non-reentrant model
  8256 ;;
  8257                           
  8258                           	psect	text35
  8259  00210A                     __ptext35:
  8260                           	callstack 0
  8261  00210A                     ___ftge:
  8262                           	callstack 23
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;incstack = 0
  8266  00210A  AE26               	btfss	(___ftge@ff1+2)^0,7,c
  8267  00210C  D00F               	goto	l5420
  8268  00210E  0E00               	movlw	0
  8269  002110  6E2A               	movwf	??___ftge^0,c
  8270  002112  0E00               	movlw	0
  8271  002114  6E2B               	movwf	(??___ftge+1)^0,c
  8272  002116  0E80               	movlw	128
  8273  002118  6E2C               	movwf	(??___ftge+2)^0,c
  8274  00211A  5024               	movf	___ftge@ff1^0,w,c
  8275  00211C  5C2A               	subwf	??___ftge^0,w,c
  8276  00211E  6E24               	movwf	___ftge@ff1^0,c
  8277  002120  5025               	movf	(___ftge@ff1+1)^0,w,c
  8278  002122  582B               	subwfb	(??___ftge+1)^0,w,c
  8279  002124  6E25               	movwf	(___ftge@ff1+1)^0,c
  8280  002126  5026               	movf	(___ftge@ff1+2)^0,w,c
  8281  002128  582C               	subwfb	(??___ftge+2)^0,w,c
  8282  00212A  6E26               	movwf	(___ftge@ff1+2)^0,c
  8283  00212C                     l5420:
  8284  00212C  AE29               	btfss	(___ftge@ff2+2)^0,7,c
  8285  00212E  D00F               	goto	l5424
  8286  002130  0E00               	movlw	0
  8287  002132  6E2A               	movwf	??___ftge^0,c
  8288  002134  0E00               	movlw	0
  8289  002136  6E2B               	movwf	(??___ftge+1)^0,c
  8290  002138  0E80               	movlw	128
  8291  00213A  6E2C               	movwf	(??___ftge+2)^0,c
  8292  00213C  5027               	movf	___ftge@ff2^0,w,c
  8293  00213E  5C2A               	subwf	??___ftge^0,w,c
  8294  002140  6E27               	movwf	___ftge@ff2^0,c
  8295  002142  5028               	movf	(___ftge@ff2+1)^0,w,c
  8296  002144  582B               	subwfb	(??___ftge+1)^0,w,c
  8297  002146  6E28               	movwf	(___ftge@ff2+1)^0,c
  8298  002148  5029               	movf	(___ftge@ff2+2)^0,w,c
  8299  00214A  582C               	subwfb	(??___ftge+2)^0,w,c
  8300  00214C  6E29               	movwf	(___ftge@ff2+2)^0,c
  8301  00214E                     l5424:
  8302  00214E  0E00               	movlw	0
  8303  002150  1A24               	xorwf	___ftge@ff1^0,f,c
  8304  002152  0E00               	movlw	0
  8305  002154  1A25               	xorwf	(___ftge@ff1+1)^0,f,c
  8306  002156  0E80               	movlw	128
  8307  002158  1A26               	xorwf	(___ftge@ff1+2)^0,f,c
  8308  00215A  0E00               	movlw	0
  8309  00215C  1A27               	xorwf	___ftge@ff2^0,f,c
  8310  00215E  0E00               	movlw	0
  8311  002160  1A28               	xorwf	(___ftge@ff2+1)^0,f,c
  8312  002162  0E80               	movlw	128
  8313  002164  1A29               	xorwf	(___ftge@ff2+2)^0,f,c
  8314  002166  5027               	movf	___ftge@ff2^0,w,c
  8315  002168  5C24               	subwf	___ftge@ff1^0,w,c
  8316  00216A  5028               	movf	(___ftge@ff2+1)^0,w,c
  8317  00216C  5825               	subwfb	(___ftge@ff1+1)^0,w,c
  8318  00216E  5029               	movf	(___ftge@ff2+2)^0,w,c
  8319  002170  5826               	subwfb	(___ftge@ff1+2)^0,w,c
  8320  002172  B0D8               	btfsc	status,0,c
  8321  002174  D002               	goto	l5430
  8322  002176  90D8               	bcf	status,0,c
  8323  002178  0012               	return	
  8324  00217A                     l5430:
  8325  00217A  80D8               	bsf	status,0,c
  8326  00217C  0012               	return		;funcret
  8327  00217E                     __end_of___ftge:
  8328                           	callstack 0
  8329                           
  8330 ;; *************** function _lcd_puts *****************
  8331 ;; Defined at:
  8332 ;;		line 120 in file "lcd_x8.c"
  8333 ;; Parameters:    Size  Location     Type
  8334 ;;  s               2   49[COMRAM] PTR unsigned char 
  8335 ;;		 -> display@LCD(64), display@Buffer(32), display@LCDP(64), display@Buffer2(32), 
  8336 ;;		 -> display@Buffer1(32), 
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;		None
  8339 ;; Return value:  Size  Location     Type
  8340 ;;                  1    wreg      void 
  8341 ;; Registers used:
  8342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8343 ;; Tracked objects:
  8344 ;;		On entry : 0/0
  8345 ;;		On exit  : 0/0
  8346 ;;		Unchanged: 0/0
  8347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8348 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8351 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8352 ;;Total ram usage:        2 bytes
  8353 ;; Hardware stack levels used:    1
  8354 ;; Hardware stack levels required when called:   10
  8355 ;; This function calls:
  8356 ;;		_lcd_putc
  8357 ;; This function is called by:
  8358 ;;		_display
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           	psect	text36
  8363  0029FE                     __ptext36:
  8364                           	callstack 0
  8365  0029FE                     _lcd_puts:
  8366                           	callstack 19
  8367                           
  8368                           ;lcd_x8.c: 121: while (*s) {
  8369                           
  8370                           ;incstack = 0
  8371  0029FE  D009               	goto	l5516
  8372  002A00                     l5512:
  8373                           
  8374                           ;lcd_x8.c: 122: lcd_putc(*s);
  8375  002A00  C032  FFD9         	movff	lcd_puts@s,fsr2l
  8376  002A04  C033  FFDA         	movff	lcd_puts@s+1,fsr2h
  8377  002A08  50DF               	movf	indf2,w,c
  8378  002A0A  EC8D  F012         	call	_lcd_putc
  8379                           
  8380                           ;lcd_x8.c: 123: s++;
  8381  002A0E  4A32               	infsnz	lcd_puts@s^0,f,c
  8382  002A10  2A33               	incf	(lcd_puts@s+1)^0,f,c
  8383  002A12                     l5516:
  8384  002A12  C032  FFD9         	movff	lcd_puts@s,fsr2l
  8385  002A16  C033  FFDA         	movff	lcd_puts@s+1,fsr2h
  8386  002A1A  50DF               	movf	indf2,w,c
  8387  002A1C  B4D8               	btfsc	status,2,c
  8388  002A1E  0012               	return	
  8389  002A20  D7EF               	goto	l5512
  8390  002A22                     __end_of_lcd_puts:
  8391                           	callstack 0
  8392                           
  8393 ;; *************** function _lcd_putc *****************
  8394 ;; Defined at:
  8395 ;;		line 106 in file "lcd_x8.c"
  8396 ;; Parameters:    Size  Location     Type
  8397 ;;  c               1    wreg     unsigned char 
  8398 ;; Auto vars:     Size  Location     Type
  8399 ;;  c               1   48[COMRAM] unsigned char 
  8400 ;; Return value:  Size  Location     Type
  8401 ;;                  1    wreg      void 
  8402 ;; Registers used:
  8403 ;;		wreg, status,2, status,0, cstack
  8404 ;; Tracked objects:
  8405 ;;		On entry : 0/0
  8406 ;;		On exit  : 0/0
  8407 ;;		Unchanged: 0/0
  8408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8410 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8412 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8413 ;;Total ram usage:        1 bytes
  8414 ;; Hardware stack levels used:    1
  8415 ;; Hardware stack levels required when called:    9
  8416 ;; This function calls:
  8417 ;;		_delay_ms
  8418 ;;		_lcd_gotoxy
  8419 ;;		_lcd_send_byte
  8420 ;; This function is called by:
  8421 ;;		_lcd_puts
  8422 ;; This function uses a non-reentrant model
  8423 ;;
  8424                           
  8425                           	psect	text37
  8426  00251A                     __ptext37:
  8427                           	callstack 0
  8428  00251A                     _lcd_putc:
  8429                           	callstack 19
  8430                           
  8431                           ;incstack = 0
  8432                           ;lcd_putc@c stored from wreg
  8433  00251A  6E31               	movwf	lcd_putc@c^0,c
  8434                           
  8435                           ;lcd_x8.c: 107: switch (c) {
  8436  00251C  D01E               	goto	l5194
  8437  00251E                     l5184:
  8438  00251E  0E01               	movlw	1
  8439  002520  6E2C               	movwf	lcd_send_byte@n^0,c
  8440  002522  0E00               	movlw	0
  8441  002524  EC30  F014         	call	_lcd_send_byte
  8442                           
  8443                           ;lcd_x8.c: 109: delay_ms(2);
  8444  002528  0E00               	movlw	0
  8445  00252A  6E25               	movwf	(delay_ms@n+1)^0,c
  8446  00252C  0E02               	movlw	2
  8447  00252E  6E24               	movwf	delay_ms@n^0,c
  8448  002530  ECDA  F014         	call	_delay_ms	;wreg free
  8449                           
  8450                           ;lcd_x8.c: 110: break;
  8451  002534  0012               	return	
  8452  002536                     l5186:
  8453  002536  0E02               	movlw	2
  8454  002538  6E2E               	movwf	lcd_gotoxy@y^0,c
  8455  00253A  0E01               	movlw	1
  8456  00253C  EC96  F013         	call	_lcd_gotoxy
  8457                           
  8458                           ;lcd_x8.c: 112: break;
  8459  002540  0012               	return	
  8460  002542                     l5188:
  8461  002542  0E10               	movlw	16
  8462  002544  6E2C               	movwf	lcd_send_byte@n^0,c
  8463  002546  0E00               	movlw	0
  8464  002548  EC30  F014         	call	_lcd_send_byte
  8465                           
  8466                           ;lcd_x8.c: 114: break;
  8467  00254C  0012               	return	
  8468  00254E                     l5190:
  8469  00254E  C031  F02C         	movff	lcd_putc@c,lcd_send_byte@n
  8470  002552  0E01               	movlw	1
  8471  002554  EC30  F014         	call	_lcd_send_byte
  8472                           
  8473                           ;lcd_x8.c: 116: break;
  8474  002558  0012               	return	
  8475  00255A                     l5194:
  8476  00255A  5031               	movf	lcd_putc@c^0,w,c
  8477                           
  8478                           ; Switch size 1, requested type "simple"
  8479                           ; Number of cases is 3, Range of values is 8 to 12
  8480                           ; switch strategies available:
  8481                           ; Name         Instructions Cycles
  8482                           ; simple_byte           10     6 (average)
  8483                           ;	Chosen strategy is simple_byte
  8484  00255C  0A08               	xorlw	8	; case 8
  8485  00255E  B4D8               	btfsc	status,2,c
  8486  002560  D7F0               	goto	l5188
  8487  002562  0A02               	xorlw	2	; case 10
  8488  002564  B4D8               	btfsc	status,2,c
  8489  002566  D7E7               	goto	l5186
  8490  002568  0A06               	xorlw	6	; case 12
  8491  00256A  B4D8               	btfsc	status,2,c
  8492  00256C  D7D8               	goto	l5184
  8493  00256E  D7EF               	goto	l5190
  8494  002570                     __end_of_lcd_putc:
  8495                           	callstack 0
  8496                           
  8497 ;; *************** function _lcd_gotoxy *****************
  8498 ;; Defined at:
  8499 ;;		line 89 in file "lcd_x8.c"
  8500 ;; Parameters:    Size  Location     Type
  8501 ;;  x               1    wreg     unsigned char 
  8502 ;;  y               1   45[COMRAM] unsigned char 
  8503 ;; Auto vars:     Size  Location     Type
  8504 ;;  x               1   46[COMRAM] unsigned char 
  8505 ;;  address         1   47[COMRAM] unsigned char 
  8506 ;; Return value:  Size  Location     Type
  8507 ;;                  1    wreg      void 
  8508 ;; Registers used:
  8509 ;;		wreg, status,2, status,0, cstack
  8510 ;; Tracked objects:
  8511 ;;		On entry : 0/0
  8512 ;;		On exit  : 0/0
  8513 ;;		Unchanged: 0/0
  8514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8515 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8516 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8518 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8519 ;;Total ram usage:        3 bytes
  8520 ;; Hardware stack levels used:    1
  8521 ;; Hardware stack levels required when called:    8
  8522 ;; This function calls:
  8523 ;;		_lcd_send_byte
  8524 ;; This function is called by:
  8525 ;;		_lcd_putc
  8526 ;;		_display
  8527 ;; This function uses a non-reentrant model
  8528 ;;
  8529                           
  8530                           	psect	text38
  8531  00272C                     __ptext38:
  8532                           	callstack 0
  8533  00272C                     _lcd_gotoxy:
  8534                           	callstack 19
  8535                           
  8536                           ;incstack = 0
  8537                           ;lcd_gotoxy@x stored from wreg
  8538  00272C  6E2F               	movwf	lcd_gotoxy@x^0,c
  8539                           
  8540                           ;lcd_x8.c: 90: unsigned char address;;lcd_x8.c: 92: switch (y) {
  8541  00272E  D009               	goto	l4936
  8542  002730                     l4926:
  8543  002730  0E80               	movlw	128
  8544  002732  D005               	goto	L4
  8545  002734                     l4928:
  8546  002734  0EC0               	movlw	192
  8547  002736  D003               	goto	L4
  8548  002738                     l4930:
  8549  002738  0E90               	movlw	144
  8550  00273A  D001               	goto	L4
  8551  00273C                     l4932:
  8552  00273C  0ED0               	movlw	208
  8553  00273E                     L4:
  8554  00273E  6E30               	movwf	lcd_gotoxy@address^0,c
  8555                           
  8556                           ;lcd_x8.c: 100: break;
  8557  002740  D00D               	goto	l4938
  8558  002742                     l4936:
  8559  002742  502E               	movf	lcd_gotoxy@y^0,w,c
  8560                           
  8561                           ; Switch size 1, requested type "simple"
  8562                           ; Number of cases is 4, Range of values is 1 to 4
  8563                           ; switch strategies available:
  8564                           ; Name         Instructions Cycles
  8565                           ; simple_byte           13     7 (average)
  8566                           ;	Chosen strategy is simple_byte
  8567  002744  0A01               	xorlw	1	; case 1
  8568  002746  B4D8               	btfsc	status,2,c
  8569  002748  D7F3               	goto	l4926
  8570  00274A  0A03               	xorlw	3	; case 2
  8571  00274C  B4D8               	btfsc	status,2,c
  8572  00274E  D7F2               	goto	l4928
  8573  002750  0A01               	xorlw	1	; case 3
  8574  002752  B4D8               	btfsc	status,2,c
  8575  002754  D7F1               	goto	l4930
  8576  002756  0A07               	xorlw	7	; case 4
  8577  002758  B4D8               	btfsc	status,2,c
  8578  00275A  D7F0               	goto	l4932
  8579  00275C                     l4938:
  8580                           
  8581                           ;lcd_x8.c: 102: address += x - 1;
  8582  00275C  042F               	decf	lcd_gotoxy@x^0,w,c
  8583  00275E  2630               	addwf	lcd_gotoxy@address^0,f,c
  8584                           
  8585                           ;lcd_x8.c: 103: lcd_send_byte(0, (unsigned char) (0x80 | address));
  8586  002760  5030               	movf	lcd_gotoxy@address^0,w,c
  8587  002762  0980               	iorlw	128
  8588  002764  6E2C               	movwf	lcd_send_byte@n^0,c
  8589  002766  0E00               	movlw	0
  8590  002768  EC30  F014         	call	_lcd_send_byte
  8591  00276C  0012               	return		;funcret
  8592  00276E                     __end_of_lcd_gotoxy:
  8593                           	callstack 0
  8594                           
  8595 ;; *************** function _lcd_send_byte *****************
  8596 ;; Defined at:
  8597 ;;		line 39 in file "lcd_x8.c"
  8598 ;; Parameters:    Size  Location     Type
  8599 ;;  cm_data         1    wreg     unsigned char 
  8600 ;;  n               1   43[COMRAM] unsigned char 
  8601 ;; Auto vars:     Size  Location     Type
  8602 ;;  cm_data         1   44[COMRAM] unsigned char 
  8603 ;; Return value:  Size  Location     Type
  8604 ;;                  1    wreg      void 
  8605 ;; Registers used:
  8606 ;;		wreg, status,2, status,0, cstack
  8607 ;; Tracked objects:
  8608 ;;		On entry : 0/0
  8609 ;;		On exit  : 0/0
  8610 ;;		Unchanged: 0/0
  8611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8612 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8613 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8615 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8616 ;;Total ram usage:        2 bytes
  8617 ;; Hardware stack levels used:    1
  8618 ;; Hardware stack levels required when called:    7
  8619 ;; This function calls:
  8620 ;;		_delay_cycles
  8621 ;;		_lcd_send_nibble
  8622 ;; This function is called by:
  8623 ;;		_lcd_init
  8624 ;;		_lcd_gotoxy
  8625 ;;		_lcd_putc
  8626 ;;		_main
  8627 ;; This function uses a non-reentrant model
  8628 ;;
  8629                           
  8630                           	psect	text39
  8631  002860                     __ptext39:
  8632                           	callstack 0
  8633  002860                     _lcd_send_byte:
  8634                           	callstack 23
  8635                           
  8636                           ;incstack = 0
  8637                           ;lcd_send_byte@cm_data stored from wreg
  8638  002860  6E2D               	movwf	lcd_send_byte@cm_data^0,c
  8639                           
  8640                           ;lcd_x8.c: 43: PORTEbits.RE2 = cm_data;
  8641  002862  B02D               	btfsc	lcd_send_byte@cm_data^0,0,c
  8642  002864  D002               	bra	u5515
  8643  002866  9484               	bcf	132,2,c	;volatile
  8644  002868  D001               	bra	u5516
  8645  00286A                     u5515:
  8646  00286A  8484               	bsf	132,2,c	;volatile
  8647  00286C                     u5516:
  8648                           
  8649                           ;lcd_x8.c: 44: delay_cycles(1);
  8650  00286C  0E01               	movlw	1
  8651  00286E  EC9B  F014         	call	_delay_cycles
  8652                           
  8653                           ;lcd_x8.c: 46: delay_cycles(1);
  8654  002872  0E01               	movlw	1
  8655  002874  EC9B  F014         	call	_delay_cycles
  8656                           
  8657                           ;lcd_x8.c: 47: PORTEbits.RE1 = 0;
  8658  002878  9284               	bcf	132,1,c	;volatile
  8659                           
  8660                           ;lcd_x8.c: 48: lcd_send_nibble(n >> 4);
  8661  00287A  382C               	swapf	lcd_send_byte@n^0,w,c
  8662  00287C  0B0F               	andlw	15
  8663  00287E  EC11  F015         	call	_lcd_send_nibble
  8664                           
  8665                           ;lcd_x8.c: 49: lcd_send_nibble(n & 0x0f);
  8666  002882  502C               	movf	lcd_send_byte@n^0,w,c
  8667  002884  0B0F               	andlw	15
  8668  002886  EC11  F015         	call	_lcd_send_nibble
  8669                           
  8670                           ;lcd_x8.c: 50: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
  8671  00288A  502D               	movf	lcd_send_byte@cm_data^0,w,c
  8672  00288C  B4D8               	btfsc	status,2,c
  8673  00288E  0012               	return	
  8674  002890  0E32               	movlw	50
  8675  002892                     u7747:
  8676  002892  0004               	clrwdt	
  8677  002894  2EE8               	decfsz	wreg,f,c
  8678  002896  D7FD               	bra	u7747
  8679  002898  0012               	return		;funcret
  8680  00289A                     __end_of_lcd_send_byte:
  8681                           	callstack 0
  8682                           
  8683 ;; *************** function _lcd_send_nibble *****************
  8684 ;; Defined at:
  8685 ;;		line 29 in file "lcd_x8.c"
  8686 ;; Parameters:    Size  Location     Type
  8687 ;;  n               1    wreg     unsigned char 
  8688 ;; Auto vars:     Size  Location     Type
  8689 ;;  n               1   42[COMRAM] unsigned char 
  8690 ;; Return value:  Size  Location     Type
  8691 ;;                  1    wreg      void 
  8692 ;; Registers used:
  8693 ;;		wreg, status,2, status,0, cstack
  8694 ;; Tracked objects:
  8695 ;;		On entry : 0/0
  8696 ;;		On exit  : 0/0
  8697 ;;		Unchanged: 0/0
  8698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8700 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8701 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8702 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8703 ;;Total ram usage:        2 bytes
  8704 ;; Hardware stack levels used:    1
  8705 ;; Hardware stack levels required when called:    6
  8706 ;; This function calls:
  8707 ;;		_delay_cycles
  8708 ;; This function is called by:
  8709 ;;		_lcd_send_byte
  8710 ;;		_lcd_init
  8711 ;; This function uses a non-reentrant model
  8712 ;;
  8713                           
  8714                           	psect	text40
  8715  002A22                     __ptext40:
  8716                           	callstack 0
  8717  002A22                     _lcd_send_nibble:
  8718                           	callstack 23
  8719                           
  8720                           ;incstack = 0
  8721                           ;lcd_send_nibble@n stored from wreg
  8722  002A22  6E2B               	movwf	lcd_send_nibble@n^0,c
  8723                           
  8724                           ;lcd_x8.c: 31: lcd.data = n;
  8725  002A24  C02B  F02A         	movff	lcd_send_nibble@n,??_lcd_send_nibble
  8726  002A28  3A2A               	swapf	??_lcd_send_nibble^0,f,c
  8727  002A2A  5083               	movf	131,w,c
  8728  002A2C  182A               	xorwf	??_lcd_send_nibble^0,w,c
  8729  002A2E  0B0F               	andlw	-241
  8730  002A30  182A               	xorwf	??_lcd_send_nibble^0,w,c
  8731  002A32  6E83               	movwf	131,c
  8732                           
  8733                           ;lcd_x8.c: 33: delay_cycles(1);
  8734  002A34  0E01               	movlw	1
  8735  002A36  EC9B  F014         	call	_delay_cycles
  8736                           
  8737                           ;lcd_x8.c: 34: PORTEbits.RE1 = 1;
  8738  002A3A  8284               	bsf	132,1,c	;volatile
  8739                           
  8740                           ;lcd_x8.c: 35: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
  8741  002A3C  0004               	clrwdt	
  8742  002A3E  F000               	nop		;2 cycle nop
  8743                           
  8744                           ;lcd_x8.c: 36: PORTEbits.RE1 = 0;
  8745  002A40  9284               	bcf	132,1,c	;volatile
  8746  002A42  0012               	return		;funcret
  8747  002A44                     __end_of_lcd_send_nibble:
  8748                           	callstack 0
  8749                           
  8750 ;; *************** function _delay_cycles *****************
  8751 ;; Defined at:
  8752 ;;		line 20 in file "lcd_x8.c"
  8753 ;; Parameters:    Size  Location     Type
  8754 ;;  n               1    wreg     unsigned char 
  8755 ;; Auto vars:     Size  Location     Type
  8756 ;;  n               1   38[COMRAM] unsigned char 
  8757 ;;  x               2   39[COMRAM] int 
  8758 ;; Return value:  Size  Location     Type
  8759 ;;                  1    wreg      void 
  8760 ;; Registers used:
  8761 ;;		wreg, status,2, status,0
  8762 ;; Tracked objects:
  8763 ;;		On entry : 0/0
  8764 ;;		On exit  : 0/0
  8765 ;;		Unchanged: 0/0
  8766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8768 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8769 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8770 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8771 ;;Total ram usage:        6 bytes
  8772 ;; Hardware stack levels used:    1
  8773 ;; Hardware stack levels required when called:    5
  8774 ;; This function calls:
  8775 ;;		Nothing
  8776 ;; This function is called by:
  8777 ;;		_lcd_send_nibble
  8778 ;;		_lcd_send_byte
  8779 ;; This function uses a non-reentrant model
  8780 ;;
  8781                           
  8782                           	psect	text41
  8783  002936                     __ptext41:
  8784                           	callstack 0
  8785  002936                     _delay_cycles:
  8786                           	callstack 23
  8787                           
  8788                           ;incstack = 0
  8789                           ;delay_cycles@n stored from wreg
  8790  002936  6E27               	movwf	delay_cycles@n^0,c
  8791                           
  8792                           ;lcd_x8.c: 21: int x;;lcd_x8.c: 22: for (x = 0; x <= n; x++) {
  8793  002938  0E00               	movlw	0
  8794  00293A  6E29               	movwf	(delay_cycles@x+1)^0,c
  8795  00293C  0E00               	movlw	0
  8796  00293E  6E28               	movwf	delay_cycles@x^0,c
  8797  002940  D003               	goto	l4854
  8798  002942                     l14:
  8799  002942  0004               	clrwdt		;# 
  8800  002944  4A28               	infsnz	delay_cycles@x^0,f,c
  8801  002946  2A29               	incf	(delay_cycles@x+1)^0,f,c
  8802  002948                     l4854:
  8803  002948  5027               	movf	delay_cycles@n^0,w,c
  8804  00294A  6E24               	movwf	??_delay_cycles^0,c
  8805  00294C  6A25               	clrf	(??_delay_cycles+1)^0,c
  8806  00294E  5028               	movf	delay_cycles@x^0,w,c
  8807  002950  5C24               	subwf	??_delay_cycles^0,w,c
  8808  002952  5025               	movf	(??_delay_cycles+1)^0,w,c
  8809  002954  0A80               	xorlw	128
  8810  002956  6E26               	movwf	(??_delay_cycles+2)^0,c
  8811  002958  5029               	movf	(delay_cycles@x+1)^0,w,c
  8812  00295A  0A80               	xorlw	128
  8813  00295C  5826               	subwfb	(??_delay_cycles+2)^0,w,c
  8814  00295E  A0D8               	btfss	status,0,c
  8815  002960  0012               	return	
  8816  002962  D7EF               	goto	l14
  8817  002964                     __end_of_delay_cycles:
  8818                           	callstack 0
  8819                           
  8820 ;; *************** function _delay_ms *****************
  8821 ;; Defined at:
  8822 ;;		line 168 in file "HW2.c"
  8823 ;; Parameters:    Size  Location     Type
  8824 ;;  n               2   35[COMRAM] unsigned int 
  8825 ;; Auto vars:     Size  Location     Type
  8826 ;;  i               2   37[COMRAM] int 
  8827 ;; Return value:  Size  Location     Type
  8828 ;;                  1    wreg      void 
  8829 ;; Registers used:
  8830 ;;		wreg, status,2, status,0
  8831 ;; Tracked objects:
  8832 ;;		On entry : 0/0
  8833 ;;		On exit  : 0/0
  8834 ;;		Unchanged: 0/0
  8835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8836 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8837 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8839 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8840 ;;Total ram usage:        4 bytes
  8841 ;; Hardware stack levels used:    1
  8842 ;; Hardware stack levels required when called:    5
  8843 ;; This function calls:
  8844 ;;		Nothing
  8845 ;; This function is called by:
  8846 ;;		_lcd_init
  8847 ;;		_lcd_putc
  8848 ;;		_main
  8849 ;; This function uses a non-reentrant model
  8850 ;;
  8851                           
  8852                           	psect	text42
  8853  0029B4                     __ptext42:
  8854                           	callstack 0
  8855  0029B4                     _delay_ms:
  8856                           	callstack 24
  8857                           
  8858                           ;HW2.c: 170: int i;;HW2.c: 171: for (i=0; i < n; i++){
  8859                           
  8860                           ;incstack = 0
  8861  0029B4  0E00               	movlw	0
  8862  0029B6  6E27               	movwf	(delay_ms@i+1)^0,c
  8863  0029B8  0E00               	movlw	0
  8864  0029BA  6E26               	movwf	delay_ms@i^0,c
  8865  0029BC  D007               	goto	l268
  8866  0029BE                     l4920:
  8867                           
  8868                           ;HW2.c: 172: _delaywdt((unsigned long)((1)*(4000000UL/4000.0))) ;
  8869  0029BE  0EC8               	movlw	200
  8870  0029C0                     u7757:
  8871  0029C0  0004               	clrwdt	
  8872  0029C2  0004               	clrwdt	
  8873  0029C4  2EE8               	decfsz	wreg,f,c
  8874  0029C6  D7FC               	bra	u7757
  8875  0029C8  4A26               	infsnz	delay_ms@i^0,f,c
  8876  0029CA  2A27               	incf	(delay_ms@i+1)^0,f,c
  8877  0029CC                     l268:
  8878  0029CC  5024               	movf	delay_ms@n^0,w,c
  8879  0029CE  5C26               	subwf	delay_ms@i^0,w,c
  8880  0029D0  5025               	movf	(delay_ms@n+1)^0,w,c
  8881  0029D2  5827               	subwfb	(delay_ms@i+1)^0,w,c
  8882  0029D4  B0D8               	btfsc	status,0,c
  8883  0029D6  0012               	return	
  8884  0029D8  D7F2               	goto	l4920
  8885  0029DA                     __end_of_delay_ms:
  8886                           	callstack 0
  8887                           
  8888 ;; *************** function _decrementMinClock *****************
  8889 ;; Defined at:
  8890 ;;		line 276 in file "HW2.c"
  8891 ;; Parameters:    Size  Location     Type
  8892 ;;		None
  8893 ;; Auto vars:     Size  Location     Type
  8894 ;;		None
  8895 ;; Return value:  Size  Location     Type
  8896 ;;                  1    wreg      void 
  8897 ;; Registers used:
  8898 ;;		wreg, status,2, status,0
  8899 ;; Tracked objects:
  8900 ;;		On entry : 3F/1
  8901 ;;		On exit  : 3F/1
  8902 ;;		Unchanged: 3F/0
  8903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8908 ;;Total ram usage:        0 bytes
  8909 ;; Hardware stack levels used:    1
  8910 ;; Hardware stack levels required when called:    5
  8911 ;; This function calls:
  8912 ;;		Nothing
  8913 ;; This function is called by:
  8914 ;;		_main
  8915 ;; This function uses a non-reentrant model
  8916 ;;
  8917                           
  8918                           	psect	text43
  8919  0027AE                     __ptext43:
  8920                           	callstack 0
  8921  0027AE                     _decrementMinClock:
  8922                           	callstack 25
  8923                           
  8924                           ; BSR set to: 1
  8925                           ;HW2.c: 277: minutes -=1 ;
  8926                           
  8927                           ;incstack = 0
  8928  0027AE  0649               	decf	_minutes^0,f,c
  8929  0027B0  A0D8               	btfss	status,0,c
  8930  0027B2  064A               	decf	(_minutes+1)^0,f,c
  8931                           
  8932                           ; BSR set to: 1
  8933                           ;HW2.c: 278: if (minutes<=0){minutes =minutes+60 ;
  8934  0027B4  BE4A               	btfsc	(_minutes+1)^0,7,c
  8935  0027B6  D005               	goto	u7380
  8936  0027B8  504A               	movf	(_minutes+1)^0,w,c
  8937  0027BA  E117               	bnz	l316
  8938  0027BC  0449               	decf	_minutes^0,w,c
  8939  0027BE  B0D8               	btfsc	status,0,c
  8940  0027C0  0012               	return	
  8941  0027C2                     u7380:
  8942                           
  8943                           ; BSR set to: 1
  8944  0027C2  0E3C               	movlw	60
  8945  0027C4  2449               	addwf	_minutes^0,w,c
  8946  0027C6  6E49               	movwf	_minutes^0,c
  8947  0027C8  0E00               	movlw	0
  8948  0027CA  204A               	addwfc	(_minutes+1)^0,w,c
  8949  0027CC  6E4A               	movwf	(_minutes+1)^0,c
  8950                           
  8951                           ; BSR set to: 1
  8952                           ;HW2.c: 280: hours -=1 ;
  8953  0027CE  0658               	decf	_hours^0,f,c
  8954  0027D0  A0D8               	btfss	status,0,c
  8955  0027D2  0659               	decf	(_hours+1)^0,f,c
  8956                           
  8957                           ; BSR set to: 1
  8958                           ;HW2.c: 281: if (hours<=0){hours =0 ;
  8959  0027D4  BE59               	btfsc	(_hours+1)^0,7,c
  8960  0027D6  D005               	goto	u7390
  8961  0027D8  5059               	movf	(_hours+1)^0,w,c
  8962  0027DA  E107               	bnz	l316
  8963  0027DC  0458               	decf	_hours^0,w,c
  8964  0027DE  B0D8               	btfsc	status,0,c
  8965  0027E0  0012               	return	
  8966  0027E2                     u7390:
  8967                           
  8968                           ; BSR set to: 1
  8969  0027E2  0E00               	movlw	0
  8970  0027E4  6E59               	movwf	(_hours+1)^0,c
  8971  0027E6  0E00               	movlw	0
  8972  0027E8  6E58               	movwf	_hours^0,c
  8973  0027EA                     l316:
  8974                           
  8975                           ; BSR set to: 1
  8976  0027EA  0012               	return		;funcret
  8977  0027EC                     __end_of_decrementMinClock:
  8978                           	callstack 0
  8979                           
  8980 ;; *************** function _decrementHourClock *****************
  8981 ;; Defined at:
  8982 ;;		line 334 in file "HW2.c"
  8983 ;; Parameters:    Size  Location     Type
  8984 ;;		None
  8985 ;; Auto vars:     Size  Location     Type
  8986 ;;		None
  8987 ;; Return value:  Size  Location     Type
  8988 ;;                  1    wreg      void 
  8989 ;; Registers used:
  8990 ;;		wreg, status,2, status,0
  8991 ;; Tracked objects:
  8992 ;;		On entry : 3F/1
  8993 ;;		On exit  : 3F/1
  8994 ;;		Unchanged: 3F/0
  8995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9000 ;;Total ram usage:        0 bytes
  9001 ;; Hardware stack levels used:    1
  9002 ;; Hardware stack levels required when called:    5
  9003 ;; This function calls:
  9004 ;;		Nothing
  9005 ;; This function is called by:
  9006 ;;		_main
  9007 ;; This function uses a non-reentrant model
  9008 ;;
  9009                           
  9010                           	psect	text44
  9011  002A80                     __ptext44:
  9012                           	callstack 0
  9013  002A80                     _decrementHourClock:
  9014                           	callstack 25
  9015                           
  9016                           ; BSR set to: 1
  9017                           ;HW2.c: 335: hours-=1;
  9018                           
  9019                           ; BSR set to: 1
  9020                           ;incstack = 0
  9021  002A80  0658               	decf	_hours^0,f,c
  9022  002A82  A0D8               	btfss	status,0,c
  9023  002A84  0659               	decf	(_hours+1)^0,f,c
  9024                           
  9025                           ; BSR set to: 1
  9026                           ;HW2.c: 336: if (hours<=0){ hours=0 ;
  9027  002A86  BE59               	btfsc	(_hours+1)^0,7,c
  9028  002A88  D005               	goto	u7450
  9029  002A8A  5059               	movf	(_hours+1)^0,w,c
  9030  002A8C  E107               	bnz	l334
  9031  002A8E  0458               	decf	_hours^0,w,c
  9032  002A90  B0D8               	btfsc	status,0,c
  9033  002A92  0012               	return	
  9034  002A94                     u7450:
  9035                           
  9036                           ; BSR set to: 1
  9037  002A94  0E00               	movlw	0
  9038  002A96  6E59               	movwf	(_hours+1)^0,c
  9039  002A98  0E00               	movlw	0
  9040  002A9A  6E58               	movwf	_hours^0,c
  9041  002A9C                     l334:
  9042                           
  9043                           ; BSR set to: 1
  9044  002A9C  0012               	return		;funcret
  9045  002A9E                     __end_of_decrementHourClock:
  9046                           	callstack 0
  9047                           
  9048 ;; *************** function _decrementClock *****************
  9049 ;; Defined at:
  9050 ;;		line 218 in file "HW2.c"
  9051 ;; Parameters:    Size  Location     Type
  9052 ;;		None
  9053 ;; Auto vars:     Size  Location     Type
  9054 ;;		None
  9055 ;; Return value:  Size  Location     Type
  9056 ;;                  1    wreg      void 
  9057 ;; Registers used:
  9058 ;;		wreg, status,2, status,0
  9059 ;; Tracked objects:
  9060 ;;		On entry : 3F/1
  9061 ;;		On exit  : 3F/1
  9062 ;;		Unchanged: 3F/0
  9063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9068 ;;Total ram usage:        0 bytes
  9069 ;; Hardware stack levels used:    1
  9070 ;; Hardware stack levels required when called:    5
  9071 ;; This function calls:
  9072 ;;		Nothing
  9073 ;; This function is called by:
  9074 ;;		_main
  9075 ;; This function uses a non-reentrant model
  9076 ;;
  9077                           
  9078                           	psect	text45
  9079  0025C2                     __ptext45:
  9080                           	callstack 0
  9081  0025C2                     _decrementClock:
  9082                           	callstack 25
  9083                           
  9084                           ; BSR set to: 1
  9085                           ;HW2.c: 220: if(--seconds <= 0) {
  9086                           
  9087                           ; BSR set to: 1
  9088                           ;incstack = 0
  9089  0025C2  065A               	decf	_seconds^0,f,c
  9090  0025C4  A0D8               	btfss	status,0,c
  9091  0025C6  065B               	decf	(_seconds+1)^0,f,c
  9092  0025C8  BE5B               	btfsc	(_seconds+1)^0,7,c
  9093  0025CA  D005               	goto	u7270
  9094  0025CC  505B               	movf	(_seconds+1)^0,w,c
  9095  0025CE  E11F               	bnz	l294
  9096  0025D0  045A               	decf	_seconds^0,w,c
  9097  0025D2  B0D8               	btfsc	status,0,c
  9098  0025D4  0012               	return	
  9099  0025D6                     u7270:
  9100                           
  9101                           ; BSR set to: 1
  9102                           ;HW2.c: 221: seconds=59;
  9103  0025D6  0E00               	movlw	0
  9104  0025D8  6E5B               	movwf	(_seconds+1)^0,c
  9105  0025DA  0E3B               	movlw	59
  9106  0025DC  6E5A               	movwf	_seconds^0,c
  9107                           
  9108                           ; BSR set to: 1
  9109                           ;HW2.c: 222: if(--minutes == -1) {
  9110  0025DE  0649               	decf	_minutes^0,f,c
  9111  0025E0  A0D8               	btfss	status,0,c
  9112  0025E2  064A               	decf	(_minutes+1)^0,f,c
  9113  0025E4  2849               	incf	_minutes^0,w,c
  9114  0025E6  E113               	bnz	l294
  9115  0025E8  284A               	incf	(_minutes+1)^0,w,c
  9116  0025EA  A4D8               	btfss	status,2,c
  9117  0025EC  0012               	return	
  9118                           
  9119                           ; BSR set to: 1
  9120                           ;HW2.c: 223: minutes = 59;
  9121  0025EE  0E00               	movlw	0
  9122  0025F0  6E4A               	movwf	(_minutes+1)^0,c
  9123  0025F2  0E3B               	movlw	59
  9124  0025F4  6E49               	movwf	_minutes^0,c
  9125                           
  9126                           ; BSR set to: 1
  9127                           ;HW2.c: 224: if (--hours == -1) hours = 0;
  9128  0025F6  0658               	decf	_hours^0,f,c
  9129  0025F8  A0D8               	btfss	status,0,c
  9130  0025FA  0659               	decf	(_hours+1)^0,f,c
  9131  0025FC  2858               	incf	_hours^0,w,c
  9132  0025FE  E107               	bnz	l294
  9133  002600  2859               	incf	(_hours+1)^0,w,c
  9134  002602  A4D8               	btfss	status,2,c
  9135  002604  0012               	return	
  9136                           
  9137                           ; BSR set to: 1
  9138  002606  0E00               	movlw	0
  9139  002608  6E59               	movwf	(_hours+1)^0,c
  9140  00260A  0E00               	movlw	0
  9141  00260C  6E58               	movwf	_hours^0,c
  9142  00260E                     l294:
  9143                           
  9144                           ; BSR set to: 1
  9145  00260E  0012               	return		;funcret
  9146  002610                     __end_of_decrementClock:
  9147                           	callstack 0
  9148                           
  9149 ;; *************** function _decrement10SClock *****************
  9150 ;; Defined at:
  9151 ;;		line 242 in file "HW2.c"
  9152 ;; Parameters:    Size  Location     Type
  9153 ;;		None
  9154 ;; Auto vars:     Size  Location     Type
  9155 ;;		None
  9156 ;; Return value:  Size  Location     Type
  9157 ;;                  1    wreg      void 
  9158 ;; Registers used:
  9159 ;;		wreg, status,2, status,0
  9160 ;; Tracked objects:
  9161 ;;		On entry : 3F/1
  9162 ;;		On exit  : 3F/1
  9163 ;;		Unchanged: 3F/0
  9164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9169 ;;Total ram usage:        0 bytes
  9170 ;; Hardware stack levels used:    1
  9171 ;; Hardware stack levels required when called:    5
  9172 ;; This function calls:
  9173 ;;		Nothing
  9174 ;; This function is called by:
  9175 ;;		_main
  9176 ;; This function uses a non-reentrant model
  9177 ;;
  9178                           
  9179                           	psect	text46
  9180  002400                     __ptext46:
  9181                           	callstack 0
  9182  002400                     _decrement10SClock:
  9183                           	callstack 25
  9184                           
  9185                           ; BSR set to: 1
  9186                           ;HW2.c: 243: seconds -=10 ;
  9187                           
  9188                           ; BSR set to: 1
  9189                           ;incstack = 0
  9190  002400  0EF6               	movlw	246
  9191  002402  265A               	addwf	_seconds^0,f,c
  9192  002404  0EFF               	movlw	255
  9193  002406  225B               	addwfc	(_seconds+1)^0,f,c
  9194                           
  9195                           ;HW2.c: 244: if (seconds<=0){seconds =seconds+60 ;
  9196  002408  BE5B               	btfsc	(_seconds+1)^0,7,c
  9197  00240A  D005               	goto	u7330
  9198  00240C  505B               	movf	(_seconds+1)^0,w,c
  9199  00240E  E127               	bnz	l306
  9200  002410  045A               	decf	_seconds^0,w,c
  9201  002412  B0D8               	btfsc	status,0,c
  9202  002414  0012               	return	
  9203  002416                     u7330:
  9204                           
  9205                           ; BSR set to: 1
  9206  002416  0E3C               	movlw	60
  9207  002418  245A               	addwf	_seconds^0,w,c
  9208  00241A  6E5A               	movwf	_seconds^0,c
  9209  00241C  0E00               	movlw	0
  9210  00241E  205B               	addwfc	(_seconds+1)^0,w,c
  9211  002420  6E5B               	movwf	(_seconds+1)^0,c
  9212                           
  9213                           ; BSR set to: 1
  9214                           ;HW2.c: 245: minutes -=1;
  9215  002422  0649               	decf	_minutes^0,f,c
  9216  002424  A0D8               	btfss	status,0,c
  9217  002426  064A               	decf	(_minutes+1)^0,f,c
  9218                           
  9219                           ; BSR set to: 1
  9220                           ;HW2.c: 246: if (minutes<=0){minutes =60+minutes ;
  9221  002428  BE4A               	btfsc	(_minutes+1)^0,7,c
  9222  00242A  D005               	goto	u7340
  9223  00242C  504A               	movf	(_minutes+1)^0,w,c
  9224  00242E  E117               	bnz	l306
  9225  002430  0449               	decf	_minutes^0,w,c
  9226  002432  B0D8               	btfsc	status,0,c
  9227  002434  0012               	return	
  9228  002436                     u7340:
  9229                           
  9230                           ; BSR set to: 1
  9231  002436  0E3C               	movlw	60
  9232  002438  2449               	addwf	_minutes^0,w,c
  9233  00243A  6E49               	movwf	_minutes^0,c
  9234  00243C  0E00               	movlw	0
  9235  00243E  204A               	addwfc	(_minutes+1)^0,w,c
  9236  002440  6E4A               	movwf	(_minutes+1)^0,c
  9237                           
  9238                           ; BSR set to: 1
  9239                           ;HW2.c: 247: hours-=1;
  9240  002442  0658               	decf	_hours^0,f,c
  9241  002444  A0D8               	btfss	status,0,c
  9242  002446  0659               	decf	(_hours+1)^0,f,c
  9243                           
  9244                           ; BSR set to: 1
  9245                           ;HW2.c: 248: if (hours<=0){hours =0 ;}
  9246  002448  BE59               	btfsc	(_hours+1)^0,7,c
  9247  00244A  D005               	goto	u7350
  9248  00244C  5059               	movf	(_hours+1)^0,w,c
  9249  00244E  E107               	bnz	l306
  9250  002450  0458               	decf	_hours^0,w,c
  9251  002452  B0D8               	btfsc	status,0,c
  9252  002454  0012               	return	
  9253  002456                     u7350:
  9254                           
  9255                           ; BSR set to: 1
  9256  002456  0E00               	movlw	0
  9257  002458  6E59               	movwf	(_hours+1)^0,c
  9258  00245A  0E00               	movlw	0
  9259  00245C  6E58               	movwf	_hours^0,c
  9260  00245E                     l306:
  9261                           
  9262                           ; BSR set to: 1
  9263  00245E  0012               	return		;funcret
  9264  002460                     __end_of_decrement10SClock:
  9265                           	callstack 0
  9266                           
  9267 ;; *************** function _decrement10MinClock *****************
  9268 ;; Defined at:
  9269 ;;		line 309 in file "HW2.c"
  9270 ;; Parameters:    Size  Location     Type
  9271 ;;		None
  9272 ;; Auto vars:     Size  Location     Type
  9273 ;;		None
  9274 ;; Return value:  Size  Location     Type
  9275 ;;                  1    wreg      void 
  9276 ;; Registers used:
  9277 ;;		wreg, status,2, status,0
  9278 ;; Tracked objects:
  9279 ;;		On entry : 3F/1
  9280 ;;		On exit  : 3F/1
  9281 ;;		Unchanged: 3F/0
  9282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9287 ;;Total ram usage:        0 bytes
  9288 ;; Hardware stack levels used:    1
  9289 ;; Hardware stack levels required when called:    5
  9290 ;; This function calls:
  9291 ;;		Nothing
  9292 ;; This function is called by:
  9293 ;;		_main
  9294 ;; This function uses a non-reentrant model
  9295 ;;
  9296                           
  9297                           	psect	text47
  9298  0028D2                     __ptext47:
  9299                           	callstack 0
  9300  0028D2                     _decrement10MinClock:
  9301                           	callstack 25
  9302                           
  9303                           ; BSR set to: 1
  9304                           ;HW2.c: 310: minutes -=10 ;
  9305                           
  9306                           ; BSR set to: 1
  9307                           ;incstack = 0
  9308  0028D2  0EF6               	movlw	246
  9309  0028D4  2649               	addwf	_minutes^0,f,c
  9310  0028D6  0EFF               	movlw	255
  9311  0028D8  224A               	addwfc	(_minutes+1)^0,f,c
  9312                           
  9313                           ;HW2.c: 311: if (minutes<0){minutes =minutes+60 ;hours -=1 ;
  9314  0028DA  AE4A               	btfss	(_minutes+1)^0,7,c
  9315  0028DC  0012               	return	
  9316                           
  9317                           ; BSR set to: 1
  9318  0028DE  0E3C               	movlw	60
  9319  0028E0  2449               	addwf	_minutes^0,w,c
  9320  0028E2  6E49               	movwf	_minutes^0,c
  9321  0028E4  0E00               	movlw	0
  9322  0028E6  204A               	addwfc	(_minutes+1)^0,w,c
  9323  0028E8  6E4A               	movwf	(_minutes+1)^0,c
  9324                           
  9325                           ; BSR set to: 1
  9326  0028EA  0658               	decf	_hours^0,f,c
  9327  0028EC  A0D8               	btfss	status,0,c
  9328  0028EE  0659               	decf	(_hours+1)^0,f,c
  9329                           
  9330                           ; BSR set to: 1
  9331                           ;HW2.c: 314: if (hours <= 0){ hours =0 ;
  9332  0028F0  BE59               	btfsc	(_hours+1)^0,7,c
  9333  0028F2  D005               	goto	u7430
  9334  0028F4  5059               	movf	(_hours+1)^0,w,c
  9335  0028F6  E107               	bnz	l326
  9336  0028F8  0458               	decf	_hours^0,w,c
  9337  0028FA  B0D8               	btfsc	status,0,c
  9338  0028FC  0012               	return	
  9339  0028FE                     u7430:
  9340                           
  9341                           ; BSR set to: 1
  9342  0028FE  0E00               	movlw	0
  9343  002900  6E59               	movwf	(_hours+1)^0,c
  9344  002902  0E00               	movlw	0
  9345  002904  6E58               	movwf	_hours^0,c
  9346  002906                     l326:
  9347                           
  9348                           ; BSR set to: 1
  9349  002906  0012               	return		;funcret
  9350  002908                     __end_of_decrement10MinClock:
  9351                           	callstack 0
  9352                           
  9353 ;; *************** function _highIsr *****************
  9354 ;; Defined at:
  9355 ;;		line 141 in file "HW2.c"
  9356 ;; Parameters:    Size  Location     Type
  9357 ;;		None
  9358 ;; Auto vars:     Size  Location     Type
  9359 ;;		None
  9360 ;; Return value:  Size  Location     Type
  9361 ;;                  1    wreg      void 
  9362 ;; Registers used:
  9363 ;;		wreg, status,2, status,0, cstack
  9364 ;; Tracked objects:
  9365 ;;		On entry : 0/0
  9366 ;;		On exit  : 0/0
  9367 ;;		Unchanged: 0/0
  9368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9373 ;;Total ram usage:        0 bytes
  9374 ;; Hardware stack levels used:    1
  9375 ;; Hardware stack levels required when called:    4
  9376 ;; This function calls:
  9377 ;;		_EXT_Int0_isr
  9378 ;;		_EXT_Int1_isr
  9379 ;;		_clockNormalMode
  9380 ;;		i2_reloadTimer0
  9381 ;; This function is called by:
  9382 ;;		Interrupt level 2
  9383 ;; This function uses a non-reentrant model
  9384 ;;
  9385                           
  9386                           	psect	intcode
  9387  000008                     __pintcode:
  9388                           	callstack 0
  9389  000008                     _highIsr:
  9390                           	callstack 19
  9391                           
  9392                           ; BSR set to: 1
  9393                           ;incstack = 0
  9394  000008  825C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9395  00000A  ED51  F013         	call	int_func,f	;refresh shadow registers
  9396                           
  9397                           	psect	intcode_body
  9398  0026A2                     __pintcode_body:
  9399                           	callstack 19
  9400  0026A2                     int_func:
  9401                           	callstack 19
  9402  0026A2  0006               	pop		; remove dummy address from shadow register refresh
  9403                           
  9404                           ;HW2.c: 144: if(INTCONbits.TMR0IF) {
  9405  0026A4  A4F2               	btfss	242,2,c	;volatile
  9406  0026A6  D017               	goto	i2l256
  9407                           
  9408                           ;HW2.c: 146: if (initial == 1 || (initial == 0 && clkMode == 0 && flageBuzz==0 ) ){
  9409  0026A8  0445               	decf	_initial^0,w,c
  9410  0026AA  1046               	iorwf	(_initial+1)^0,w,c
  9411  0026AC  B4D8               	btfsc	status,2,c
  9412  0026AE  D00C               	goto	i2u522_40
  9413  0026B0  5045               	movf	_initial^0,w,c
  9414  0026B2  1046               	iorwf	(_initial+1)^0,w,c
  9415  0026B4  A4D8               	btfss	status,2,c
  9416  0026B6  D00D               	goto	i2l257
  9417  0026B8  5056               	movf	_clkMode^0,w,c
  9418  0026BA  1057               	iorwf	(_clkMode+1)^0,w,c
  9419  0026BC  A4D8               	btfss	status,2,c
  9420  0026BE  D009               	goto	i2l257
  9421  0026C0  504B               	movf	_flageBuzz^0,w,c
  9422  0026C2  104C               	iorwf	(_flageBuzz+1)^0,w,c
  9423  0026C4  A4D8               	btfss	status,2,c
  9424  0026C6  D005               	goto	i2l257
  9425  0026C8                     i2u522_40:
  9426                           
  9427                           ;HW2.c: 147: clockNormalMode();
  9428  0026C8  EC7F  F00C         	call	_clockNormalMode	;wreg free
  9429                           
  9430                           ;HW2.c: 157: reloadTimer0();
  9431  0026CC  EC78  F015         	call	i2_reloadTimer0	;wreg free
  9432                           
  9433                           ;HW2.c: 158: }
  9434  0026D0  D00A               	goto	i2l265
  9435  0026D2                     i2l257:
  9436                           
  9437                           ;HW2.c: 160: else INTCONbits.TMR0IF = 0;
  9438  0026D2  94F2               	bcf	242,2,c	;volatile
  9439  0026D4  D008               	goto	i2l265
  9440  0026D6                     i2l256:
  9441                           
  9442                           ;HW2.c: 162: else if(INTCON3bits.INT1IF)EXT_Int0_isr();
  9443  0026D6  A0F0               	btfss	240,0,c	;volatile
  9444  0026D8  D003               	goto	i2l262
  9445  0026DA  EC5E  F015         	call	_EXT_Int0_isr	;wreg free
  9446  0026DE  D003               	goto	i2l265
  9447  0026E0                     i2l262:
  9448                           
  9449                           ;HW2.c: 163: else if (INTCONbits.INT0IF)EXT_Int1_isr();
  9450  0026E0  B2F2               	btfsc	242,1,c	;volatile
  9451  0026E2  EC4F  F015         	call	_EXT_Int1_isr	;wreg free
  9452  0026E6                     i2l265:
  9453  0026E6  925C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9454  0026E8  0011               	retfie		f
  9455  0026EA                     __end_of_highIsr:
  9456                           	callstack 0
  9457                           
  9458 ;; *************** function _clockNormalMode *****************
  9459 ;; Defined at:
  9460 ;;		line 175 in file "HW2.c"
  9461 ;; Parameters:    Size  Location     Type
  9462 ;;		None
  9463 ;; Auto vars:     Size  Location     Type
  9464 ;;		None
  9465 ;; Return value:  Size  Location     Type
  9466 ;;                  1    wreg      void 
  9467 ;; Registers used:
  9468 ;;		wreg, status,2, status,0, cstack
  9469 ;; Tracked objects:
  9470 ;;		On entry : 0/0
  9471 ;;		On exit  : 0/0
  9472 ;;		Unchanged: 0/0
  9473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9478 ;;Total ram usage:        0 bytes
  9479 ;; Hardware stack levels used:    1
  9480 ;; Hardware stack levels required when called:    3
  9481 ;; This function calls:
  9482 ;;		i2___ftadd
  9483 ;;		i2___ftge
  9484 ;;		i2___ftsub
  9485 ;;		i2_reloadTimer0
  9486 ;; This function is called by:
  9487 ;;		_highIsr
  9488 ;; This function uses a non-reentrant model
  9489 ;;
  9490                           
  9491                           	psect	text49
  9492  0018FE                     __ptext49:
  9493                           	callstack 0
  9494  0018FE                     _clockNormalMode:
  9495                           	callstack 19
  9496                           
  9497                           ;HW2.c: 176: INTCONbits.TMR0IF = 0;
  9498                           
  9499                           ;incstack = 0
  9500  0018FE  94F2               	bcf	242,2,c	;volatile
  9501                           
  9502                           ;HW2.c: 177: if(temp <= sp- HS) {
  9503  001900  C053  F018         	movff	_HS,i2___ftsub@f2
  9504  001904  C054  F019         	movff	_HS+1,i2___ftsub@f2+1
  9505  001908  C055  F01A         	movff	_HS+2,i2___ftsub@f2+2
  9506  00190C  C03F  F015         	movff	_sp,i2___ftsub@f1
  9507  001910  C040  F016         	movff	_sp+1,i2___ftsub@f1+1
  9508  001914  C041  F017         	movff	_sp+2,i2___ftsub@f1+2
  9509  001918  ECB7  F013         	call	i2___ftsub	;wreg free
  9510  00191C  C015  F01B         	movff	?i2___ftsub,i2___ftge@ff1
  9511  001920  C016  F01C         	movff	?i2___ftsub+1,i2___ftge@ff1+1
  9512  001924  C017  F01D         	movff	?i2___ftsub+2,i2___ftge@ff1+2
  9513  001928  C042  F01E         	movff	_temp,i2___ftge@ff2
  9514  00192C  C043  F01F         	movff	_temp+1,i2___ftge@ff2+1
  9515  001930  C044  F020         	movff	_temp+2,i2___ftge@ff2+2
  9516  001934  ECBF  F010         	call	i2___ftge	;wreg free
  9517  001938  A0D8               	btfss	status,0,c
  9518  00193A  D002               	goto	i2l4418
  9519                           
  9520                           ;HW2.c: 178: PORTCbits.RC5 = 1;
  9521  00193C  8A82               	bsf	130,5,c	;volatile
  9522                           
  9523                           ;HW2.c: 179: }
  9524  00193E  D01E               	goto	i2l4422
  9525  001940                     i2l4418:
  9526                           
  9527                           ;HW2.c: 180: else if(temp >= (sp + HS)) {
  9528  001940  C042  F01B         	movff	_temp,i2___ftge@ff1
  9529  001944  C043  F01C         	movff	_temp+1,i2___ftge@ff1+1
  9530  001948  C044  F01D         	movff	_temp+2,i2___ftge@ff1+2
  9531  00194C  C053  F00C         	movff	_HS,i2___ftadd@f2
  9532  001950  C054  F00D         	movff	_HS+1,i2___ftadd@f2+1
  9533  001954  C055  F00E         	movff	_HS+2,i2___ftadd@f2+2
  9534  001958  C03F  F009         	movff	_sp,i2___ftadd@f1
  9535  00195C  C040  F00A         	movff	_sp+1,i2___ftadd@f1+1
  9536  001960  C041  F00B         	movff	_sp+2,i2___ftadd@f1+2
  9537  001964  ECAB  F00B         	call	i2___ftadd	;wreg free
  9538  001968  C009  F01E         	movff	?i2___ftadd,i2___ftge@ff2
  9539  00196C  C00A  F01F         	movff	?i2___ftadd+1,i2___ftge@ff2+1
  9540  001970  C00B  F020         	movff	?i2___ftadd+2,i2___ftge@ff2+2
  9541  001974  ECBF  F010         	call	i2___ftge	;wreg free
  9542  001978  B0D8               	btfsc	status,0,c
  9543                           
  9544                           ;HW2.c: 181: PORTCbits.RC5 = 0;
  9545  00197A  9A82               	bcf	130,5,c	;volatile
  9546  00197C                     i2l4422:
  9547                           
  9548                           ;HW2.c: 182: };HW2.c: 183: if(--seconds <= 0) {
  9549  00197C  065A               	decf	_seconds^0,f,c
  9550  00197E  A0D8               	btfss	status,0,c
  9551  001980  065B               	decf	(_seconds+1)^0,f,c
  9552  001982  BE5B               	btfsc	(_seconds+1)^0,7,c
  9553  001984  D005               	goto	i2u487_40
  9554  001986  505B               	movf	(_seconds+1)^0,w,c
  9555  001988  E139               	bnz	i2l4448
  9556  00198A  045A               	decf	_seconds^0,w,c
  9557  00198C  B0D8               	btfsc	status,0,c
  9558  00198E  D036               	goto	i2l4442
  9559  001990                     i2u487_40:
  9560                           
  9561                           ;HW2.c: 184: seconds=59;
  9562  001990  0E00               	movlw	0
  9563  001992  6E5B               	movwf	(_seconds+1)^0,c
  9564  001994  0E3B               	movlw	59
  9565  001996  6E5A               	movwf	_seconds^0,c
  9566                           
  9567                           ;HW2.c: 185: if(--minutes == -1) {
  9568  001998  0649               	decf	_minutes^0,f,c
  9569  00199A  A0D8               	btfss	status,0,c
  9570  00199C  064A               	decf	(_minutes+1)^0,f,c
  9571  00199E  2849               	incf	_minutes^0,w,c
  9572  0019A0  E12D               	bnz	i2l4442
  9573  0019A2  284A               	incf	(_minutes+1)^0,w,c
  9574  0019A4  A4D8               	btfss	status,2,c
  9575  0019A6  D02A               	goto	i2l4442
  9576                           
  9577                           ;HW2.c: 186: minutes = 59;
  9578  0019A8  0E00               	movlw	0
  9579  0019AA  6E4A               	movwf	(_minutes+1)^0,c
  9580  0019AC  0E3B               	movlw	59
  9581  0019AE  6E49               	movwf	_minutes^0,c
  9582                           
  9583                           ;HW2.c: 187: if (--hours == -1){ hours = 0;
  9584  0019B0  0658               	decf	_hours^0,f,c
  9585  0019B2  A0D8               	btfss	status,0,c
  9586  0019B4  0659               	decf	(_hours+1)^0,f,c
  9587  0019B6  2858               	incf	_hours^0,w,c
  9588  0019B8  E121               	bnz	i2l4442
  9589  0019BA  2859               	incf	(_hours+1)^0,w,c
  9590  0019BC  A4D8               	btfss	status,2,c
  9591  0019BE  D01E               	goto	i2l4442
  9592  0019C0  0E00               	movlw	0
  9593  0019C2  6E59               	movwf	(_hours+1)^0,c
  9594  0019C4  0E00               	movlw	0
  9595  0019C6  6E58               	movwf	_hours^0,c
  9596                           
  9597                           ;HW2.c: 188: if (seconds==59 && minutes==59 &&hours==0){
  9598  0019C8  0E3B               	movlw	59
  9599  0019CA  185A               	xorwf	_seconds^0,w,c
  9600  0019CC  105B               	iorwf	(_seconds+1)^0,w,c
  9601  0019CE  A4D8               	btfss	status,2,c
  9602  0019D0  D015               	goto	i2l4442
  9603  0019D2  0E3B               	movlw	59
  9604  0019D4  1849               	xorwf	_minutes^0,w,c
  9605  0019D6  104A               	iorwf	(_minutes+1)^0,w,c
  9606  0019D8  A4D8               	btfss	status,2,c
  9607  0019DA  D010               	goto	i2l4442
  9608  0019DC  5058               	movf	_hours^0,w,c
  9609  0019DE  1059               	iorwf	(_hours+1)^0,w,c
  9610  0019E0  A4D8               	btfss	status,2,c
  9611  0019E2  D00C               	goto	i2l4442
  9612                           
  9613                           ;HW2.c: 189: hours=0;
  9614  0019E4  0E00               	movlw	0
  9615  0019E6  6E59               	movwf	(_hours+1)^0,c
  9616  0019E8  0E00               	movlw	0
  9617  0019EA  6E58               	movwf	_hours^0,c
  9618                           
  9619                           ;HW2.c: 190: seconds=0;
  9620  0019EC  0E00               	movlw	0
  9621  0019EE  6E5B               	movwf	(_seconds+1)^0,c
  9622  0019F0  0E00               	movlw	0
  9623  0019F2  6E5A               	movwf	_seconds^0,c
  9624                           
  9625                           ;HW2.c: 191: minutes=0;
  9626  0019F4  0E00               	movlw	0
  9627  0019F6  6E4A               	movwf	(_minutes+1)^0,c
  9628  0019F8  0E00               	movlw	0
  9629  0019FA  6E49               	movwf	_minutes^0,c
  9630  0019FC                     i2l4442:
  9631  0019FC                     i2l4448:
  9632                           
  9633                           ;HW2.c: 197: };HW2.c: 201: };HW2.c: 202: reloadTimer0();
  9634  0019FC  EC78  F015         	call	i2_reloadTimer0	;wreg free
  9635  001A00  0012               	return		;funcret
  9636  001A02                     __end_of_clockNormalMode:
  9637                           	callstack 0
  9638                           
  9639 ;; *************** function i2_reloadTimer0 *****************
  9640 ;; Defined at:
  9641 ;;		line 92 in file "HW2.c"
  9642 ;; Parameters:    Size  Location     Type
  9643 ;;		None
  9644 ;; Auto vars:     Size  Location     Type
  9645 ;;		None
  9646 ;; Return value:  Size  Location     Type
  9647 ;;                  1    wreg      void 
  9648 ;; Registers used:
  9649 ;;		wreg, status,2
  9650 ;; Tracked objects:
  9651 ;;		On entry : 0/0
  9652 ;;		On exit  : 0/0
  9653 ;;		Unchanged: 0/0
  9654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9659 ;;Total ram usage:        0 bytes
  9660 ;; Hardware stack levels used:    1
  9661 ;; This function calls:
  9662 ;;		Nothing
  9663 ;; This function is called by:
  9664 ;;		_highIsr
  9665 ;;		_clockNormalMode
  9666 ;; This function uses a non-reentrant model
  9667 ;;
  9668                           
  9669                           	psect	text50
  9670  002AF0                     __ptext50:
  9671                           	callstack 0
  9672  002AF0                     i2_reloadTimer0:
  9673                           	callstack 22
  9674                           
  9675                           ;HW2.c: 94: TMR3H = (unsigned char) ((3036 >> 8) & 0x00FF);
  9676                           
  9677                           ;incstack = 0
  9678  002AF0  0E0B               	movlw	11
  9679  002AF2  6EB3               	movwf	179,c	;volatile
  9680                           
  9681                           ;HW2.c: 95: TMR3L = (unsigned char)(3036 & 0x00FF );
  9682  002AF4  0EDC               	movlw	220
  9683  002AF6  6EB2               	movwf	178,c	;volatile
  9684  002AF8  0012               	return		;funcret
  9685  002AFA                     __end_ofi2_reloadTimer0:
  9686                           	callstack 0
  9687                           
  9688 ;; *************** function i2___ftsub *****************
  9689 ;; Defined at:
  9690 ;;		line 19 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftsub.c"
  9691 ;; Parameters:    Size  Location     Type
  9692 ;;  f1              3   20[COMRAM] float 
  9693 ;;  f2              3   23[COMRAM] float 
  9694 ;; Auto vars:     Size  Location     Type
  9695 ;;		None
  9696 ;; Return value:  Size  Location     Type
  9697 ;;                  3   20[COMRAM] float 
  9698 ;; Registers used:
  9699 ;;		wreg, status,2, status,0, cstack
  9700 ;; Tracked objects:
  9701 ;;		On entry : 0/0
  9702 ;;		On exit  : 0/0
  9703 ;;		Unchanged: 0/0
  9704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9705 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9708 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9709 ;;Total ram usage:        6 bytes
  9710 ;; Hardware stack levels used:    1
  9711 ;; Hardware stack levels required when called:    2
  9712 ;; This function calls:
  9713 ;;		i2___ftadd
  9714 ;; This function is called by:
  9715 ;;		_clockNormalMode
  9716 ;; This function uses a non-reentrant model
  9717 ;;
  9718                           
  9719                           	psect	text51
  9720  00276E                     __ptext51:
  9721                           	callstack 0
  9722  00276E                     i2___ftsub:
  9723                           	callstack 19
  9724                           
  9725                           ;incstack = 0
  9726  00276E  5018               	movf	i2___ftsub@f2^0,w,c
  9727  002770  1019               	iorwf	(i2___ftsub@f2+1)^0,w,c
  9728  002772  101A               	iorwf	(i2___ftsub@f2+2)^0,w,c
  9729  002774  B4D8               	btfsc	status,2,c
  9730  002776  D006               	goto	i2l4358
  9731  002778  0E00               	movlw	0
  9732  00277A  1A18               	xorwf	i2___ftsub@f2^0,f,c
  9733  00277C  0E00               	movlw	0
  9734  00277E  1A19               	xorwf	(i2___ftsub@f2+1)^0,f,c
  9735  002780  0E80               	movlw	128
  9736  002782  1A1A               	xorwf	(i2___ftsub@f2+2)^0,f,c
  9737  002784                     i2l4358:
  9738  002784  C015  F009         	movff	i2___ftsub@f1,i2___ftadd@f1
  9739  002788  C016  F00A         	movff	i2___ftsub@f1+1,i2___ftadd@f1+1
  9740  00278C  C017  F00B         	movff	i2___ftsub@f1+2,i2___ftadd@f1+2
  9741  002790  C018  F00C         	movff	i2___ftsub@f2,i2___ftadd@f2
  9742  002794  C019  F00D         	movff	i2___ftsub@f2+1,i2___ftadd@f2+1
  9743  002798  C01A  F00E         	movff	i2___ftsub@f2+2,i2___ftadd@f2+2
  9744  00279C  ECAB  F00B         	call	i2___ftadd	;wreg free
  9745  0027A0  C009  F015         	movff	?i2___ftadd,?i2___ftsub
  9746  0027A4  C00A  F016         	movff	?i2___ftadd+1,?i2___ftsub+1
  9747  0027A8  C00B  F017         	movff	?i2___ftadd+2,?i2___ftsub+2
  9748  0027AC  0012               	return		;funcret
  9749  0027AE                     __end_ofi2___ftsub:
  9750                           	callstack 0
  9751                           
  9752 ;; *************** function i2___ftadd *****************
  9753 ;; Defined at:
  9754 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftadd.c"
  9755 ;; Parameters:    Size  Location     Type
  9756 ;;  f1              3    8[COMRAM] float 
  9757 ;;  f2              3   11[COMRAM] float 
  9758 ;; Auto vars:     Size  Location     Type
  9759 ;;  exp1            1   19[COMRAM] unsigned char 
  9760 ;;  exp2            1   18[COMRAM] unsigned char 
  9761 ;;  sign            1   17[COMRAM] unsigned char 
  9762 ;; Return value:  Size  Location     Type
  9763 ;;                  3    8[COMRAM] float 
  9764 ;; Registers used:
  9765 ;;		wreg, status,2, status,0, cstack
  9766 ;; Tracked objects:
  9767 ;;		On entry : 0/0
  9768 ;;		On exit  : 0/0
  9769 ;;		Unchanged: 0/0
  9770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9771 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9772 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9773 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9774 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9775 ;;Total ram usage:       12 bytes
  9776 ;; Hardware stack levels used:    1
  9777 ;; Hardware stack levels required when called:    1
  9778 ;; This function calls:
  9779 ;;		i2___ftpack
  9780 ;; This function is called by:
  9781 ;;		_clockNormalMode
  9782 ;;		i2___ftsub
  9783 ;; This function uses a non-reentrant model
  9784 ;;
  9785                           
  9786                           	psect	text52
  9787  001756                     __ptext52:
  9788                           	callstack 0
  9789  001756                     i2___ftadd:
  9790                           	callstack 19
  9791                           
  9792                           ;incstack = 0
  9793  001756  C00B  F00F         	movff	i2___ftadd@f1+2,??i2___ftadd
  9794  00175A  6A10               	clrf	(??i2___ftadd+1)^0,c
  9795  00175C  6A11               	clrf	(??i2___ftadd+2)^0,c
  9796  00175E  340A               	rlcf	(i2___ftadd@f1+1)^0,w,c
  9797  001760  360F               	rlcf	??i2___ftadd^0,f,c
  9798  001762  E301               	bnc	u385_41
  9799  001764  8010               	bsf	(??i2___ftadd+1)^0,0,c
  9800  001766                     u385_41:
  9801  001766  500F               	movf	??i2___ftadd^0,w,c
  9802  001768  6E14               	movwf	i2___ftadd@exp1^0,c
  9803  00176A  C00E  F00F         	movff	i2___ftadd@f2+2,??i2___ftadd
  9804  00176E  6A10               	clrf	(??i2___ftadd+1)^0,c
  9805  001770  6A11               	clrf	(??i2___ftadd+2)^0,c
  9806  001772  340D               	rlcf	(i2___ftadd@f2+1)^0,w,c
  9807  001774  360F               	rlcf	??i2___ftadd^0,f,c
  9808  001776  E301               	bnc	u386_41
  9809  001778  8010               	bsf	(??i2___ftadd+1)^0,0,c
  9810  00177A                     u386_41:
  9811  00177A  500F               	movf	??i2___ftadd^0,w,c
  9812  00177C  6E13               	movwf	i2___ftadd@exp2^0,c
  9813  00177E  5014               	movf	i2___ftadd@exp1^0,w,c
  9814  001780  B4D8               	btfsc	status,2,c
  9815  001782  D00A               	goto	i2u389_40
  9816  001784  5013               	movf	i2___ftadd@exp2^0,w,c
  9817  001786  5C14               	subwf	i2___ftadd@exp1^0,w,c
  9818  001788  B0D8               	btfsc	status,0,c
  9819  00178A  D00D               	goto	i2l3822
  9820  00178C  5014               	movf	i2___ftadd@exp1^0,w,c
  9821  00178E  5C13               	subwf	i2___ftadd@exp2^0,w,c
  9822  001790  6E0F               	movwf	??i2___ftadd^0,c
  9823  001792  0E18               	movlw	24
  9824  001794  640F               	cpfsgt	??i2___ftadd^0,c
  9825  001796  D007               	goto	i2l3822
  9826  001798                     i2u389_40:
  9827  001798  C00C  F009         	movff	i2___ftadd@f2,?i2___ftadd
  9828  00179C  C00D  F00A         	movff	i2___ftadd@f2+1,?i2___ftadd+1
  9829  0017A0  C00E  F00B         	movff	i2___ftadd@f2+2,?i2___ftadd+2
  9830  0017A4  0012               	return	
  9831  0017A6                     i2l3822:
  9832  0017A6  5013               	movf	i2___ftadd@exp2^0,w,c
  9833  0017A8  B4D8               	btfsc	status,2,c
  9834  0017AA  D00A               	goto	i2u392_40
  9835  0017AC  5014               	movf	i2___ftadd@exp1^0,w,c
  9836  0017AE  5C13               	subwf	i2___ftadd@exp2^0,w,c
  9837  0017B0  B0D8               	btfsc	status,0,c
  9838  0017B2  D00D               	goto	i2l3828
  9839  0017B4  5013               	movf	i2___ftadd@exp2^0,w,c
  9840  0017B6  5C14               	subwf	i2___ftadd@exp1^0,w,c
  9841  0017B8  6E0F               	movwf	??i2___ftadd^0,c
  9842  0017BA  0E18               	movlw	24
  9843  0017BC  640F               	cpfsgt	??i2___ftadd^0,c
  9844  0017BE  D007               	goto	i2l3828
  9845  0017C0                     i2u392_40:
  9846  0017C0  C009  F009         	movff	i2___ftadd@f1,?i2___ftadd
  9847  0017C4  C00A  F00A         	movff	i2___ftadd@f1+1,?i2___ftadd+1
  9848  0017C8  C00B  F00B         	movff	i2___ftadd@f1+2,?i2___ftadd+2
  9849  0017CC  0012               	return	
  9850  0017CE                     i2l3828:
  9851  0017CE  0E06               	movlw	6
  9852  0017D0  6E12               	movwf	i2___ftadd@sign^0,c
  9853  0017D2  BE0B               	btfsc	(i2___ftadd@f1+2)^0,7,c
  9854  0017D4  8E12               	bsf	i2___ftadd@sign^0,7,c
  9855  0017D6  BE0E               	btfsc	(i2___ftadd@f2+2)^0,7,c
  9856  0017D8  8C12               	bsf	i2___ftadd@sign^0,6,c
  9857  0017DA  8E0A               	bsf	(i2___ftadd@f1+1)^0,7,c
  9858  0017DC  0EFF               	movlw	255
  9859  0017DE  1609               	andwf	i2___ftadd@f1^0,f,c
  9860  0017E0  0EFF               	movlw	255
  9861  0017E2  160A               	andwf	(i2___ftadd@f1+1)^0,f,c
  9862  0017E4  0E00               	movlw	0
  9863  0017E6  160B               	andwf	(i2___ftadd@f1+2)^0,f,c
  9864  0017E8  8E0D               	bsf	(i2___ftadd@f2+1)^0,7,c
  9865  0017EA  0EFF               	movlw	255
  9866  0017EC  160C               	andwf	i2___ftadd@f2^0,f,c
  9867  0017EE  0EFF               	movlw	255
  9868  0017F0  160D               	andwf	(i2___ftadd@f2+1)^0,f,c
  9869  0017F2  0E00               	movlw	0
  9870  0017F4  160E               	andwf	(i2___ftadd@f2+2)^0,f,c
  9871  0017F6  5013               	movf	i2___ftadd@exp2^0,w,c
  9872  0017F8  5C14               	subwf	i2___ftadd@exp1^0,w,c
  9873  0017FA  B0D8               	btfsc	status,0,c
  9874  0017FC  D01B               	goto	i2l3854
  9875  0017FE                     i2u395_40:
  9876  0017FE  90D8               	bcf	status,0,c
  9877  001800  360C               	rlcf	i2___ftadd@f2^0,f,c
  9878  001802  360D               	rlcf	(i2___ftadd@f2+1)^0,f,c
  9879  001804  360E               	rlcf	(i2___ftadd@f2+2)^0,f,c
  9880  001806  0613               	decf	i2___ftadd@exp2^0,f,c
  9881  001808  5014               	movf	i2___ftadd@exp1^0,w,c
  9882  00180A  1813               	xorwf	i2___ftadd@exp2^0,w,c
  9883  00180C  B4D8               	btfsc	status,2,c
  9884  00180E  D00D               	goto	i2l3852
  9885  001810  0612               	decf	i2___ftadd@sign^0,f,c
  9886  001812  C012  F00F         	movff	i2___ftadd@sign,??i2___ftadd
  9887  001816  0E07               	movlw	7
  9888  001818  160F               	andwf	??i2___ftadd^0,f,c
  9889  00181A  B4D8               	btfsc	status,2,c
  9890  00181C  D006               	goto	i2l3852
  9891  00181E  D7EF               	goto	i2u395_40
  9892  001820                     i2l3850:
  9893  001820  90D8               	bcf	status,0,c
  9894  001822  320B               	rrcf	(i2___ftadd@f1+2)^0,f,c
  9895  001824  320A               	rrcf	(i2___ftadd@f1+1)^0,f,c
  9896  001826  3209               	rrcf	i2___ftadd@f1^0,f,c
  9897  001828  2A14               	incf	i2___ftadd@exp1^0,f,c
  9898  00182A                     i2l3852:
  9899  00182A  5013               	movf	i2___ftadd@exp2^0,w,c
  9900  00182C  1814               	xorwf	i2___ftadd@exp1^0,w,c
  9901  00182E  B4D8               	btfsc	status,2,c
  9902  001830  D01F               	goto	i2u402_40
  9903  001832  D7F6               	goto	i2l3850
  9904  001834                     i2l3854:
  9905  001834  5014               	movf	i2___ftadd@exp1^0,w,c
  9906  001836  5C13               	subwf	i2___ftadd@exp2^0,w,c
  9907  001838  B0D8               	btfsc	status,0,c
  9908  00183A  D01A               	goto	i2u402_40
  9909  00183C                     i2u399_40:
  9910  00183C  90D8               	bcf	status,0,c
  9911  00183E  3609               	rlcf	i2___ftadd@f1^0,f,c
  9912  001840  360A               	rlcf	(i2___ftadd@f1+1)^0,f,c
  9913  001842  360B               	rlcf	(i2___ftadd@f1+2)^0,f,c
  9914  001844  0614               	decf	i2___ftadd@exp1^0,f,c
  9915  001846  5014               	movf	i2___ftadd@exp1^0,w,c
  9916  001848  1813               	xorwf	i2___ftadd@exp2^0,w,c
  9917  00184A  B4D8               	btfsc	status,2,c
  9918  00184C  D00D               	goto	i2l3864
  9919  00184E  0612               	decf	i2___ftadd@sign^0,f,c
  9920  001850  C012  F00F         	movff	i2___ftadd@sign,??i2___ftadd
  9921  001854  0E07               	movlw	7
  9922  001856  160F               	andwf	??i2___ftadd^0,f,c
  9923  001858  B4D8               	btfsc	status,2,c
  9924  00185A  D006               	goto	i2l3864
  9925  00185C  D7EF               	goto	i2u399_40
  9926  00185E                     i2l3862:
  9927  00185E  90D8               	bcf	status,0,c
  9928  001860  320E               	rrcf	(i2___ftadd@f2+2)^0,f,c
  9929  001862  320D               	rrcf	(i2___ftadd@f2+1)^0,f,c
  9930  001864  320C               	rrcf	i2___ftadd@f2^0,f,c
  9931  001866  2A13               	incf	i2___ftadd@exp2^0,f,c
  9932  001868                     i2l3864:
  9933  001868  5013               	movf	i2___ftadd@exp2^0,w,c
  9934  00186A  1814               	xorwf	i2___ftadd@exp1^0,w,c
  9935  00186C  A4D8               	btfss	status,2,c
  9936  00186E  D7F7               	goto	i2l3862
  9937  001870                     i2u402_40:
  9938  001870  AE12               	btfss	i2___ftadd@sign^0,7,c
  9939  001872  D00C               	goto	i2l897
  9940  001874  0EFF               	movlw	255
  9941  001876  1A09               	xorwf	i2___ftadd@f1^0,f,c
  9942  001878  0EFF               	movlw	255
  9943  00187A  1A0A               	xorwf	(i2___ftadd@f1+1)^0,f,c
  9944  00187C  0EFF               	movlw	255
  9945  00187E  1A0B               	xorwf	(i2___ftadd@f1+2)^0,f,c
  9946  001880  0E01               	movlw	1
  9947  001882  2609               	addwf	i2___ftadd@f1^0,f,c
  9948  001884  0E00               	movlw	0
  9949  001886  220A               	addwfc	(i2___ftadd@f1+1)^0,f,c
  9950  001888  0E00               	movlw	0
  9951  00188A  220B               	addwfc	(i2___ftadd@f1+2)^0,f,c
  9952  00188C                     i2l897:
  9953  00188C  AC12               	btfss	i2___ftadd@sign^0,6,c
  9954  00188E  D00C               	goto	i2l3870
  9955  001890  0EFF               	movlw	255
  9956  001892  1A0C               	xorwf	i2___ftadd@f2^0,f,c
  9957  001894  0EFF               	movlw	255
  9958  001896  1A0D               	xorwf	(i2___ftadd@f2+1)^0,f,c
  9959  001898  0EFF               	movlw	255
  9960  00189A  1A0E               	xorwf	(i2___ftadd@f2+2)^0,f,c
  9961  00189C  0E01               	movlw	1
  9962  00189E  260C               	addwf	i2___ftadd@f2^0,f,c
  9963  0018A0  0E00               	movlw	0
  9964  0018A2  220D               	addwfc	(i2___ftadd@f2+1)^0,f,c
  9965  0018A4  0E00               	movlw	0
  9966  0018A6  220E               	addwfc	(i2___ftadd@f2+2)^0,f,c
  9967  0018A8                     i2l3870:
  9968  0018A8  0E00               	movlw	0
  9969  0018AA  6E12               	movwf	i2___ftadd@sign^0,c
  9970  0018AC  5009               	movf	i2___ftadd@f1^0,w,c
  9971  0018AE  260C               	addwf	i2___ftadd@f2^0,f,c
  9972  0018B0  500A               	movf	(i2___ftadd@f1+1)^0,w,c
  9973  0018B2  220D               	addwfc	(i2___ftadd@f2+1)^0,f,c
  9974  0018B4  500B               	movf	(i2___ftadd@f1+2)^0,w,c
  9975  0018B6  220E               	addwfc	(i2___ftadd@f2+2)^0,f,c
  9976  0018B8  AE0E               	btfss	(i2___ftadd@f2+2)^0,7,c
  9977  0018BA  D00E               	goto	i2l3880
  9978  0018BC  0EFF               	movlw	255
  9979  0018BE  1A0C               	xorwf	i2___ftadd@f2^0,f,c
  9980  0018C0  0EFF               	movlw	255
  9981  0018C2  1A0D               	xorwf	(i2___ftadd@f2+1)^0,f,c
  9982  0018C4  0EFF               	movlw	255
  9983  0018C6  1A0E               	xorwf	(i2___ftadd@f2+2)^0,f,c
  9984  0018C8  0E01               	movlw	1
  9985  0018CA  260C               	addwf	i2___ftadd@f2^0,f,c
  9986  0018CC  0E00               	movlw	0
  9987  0018CE  220D               	addwfc	(i2___ftadd@f2+1)^0,f,c
  9988  0018D0  0E00               	movlw	0
  9989  0018D2  220E               	addwfc	(i2___ftadd@f2+2)^0,f,c
  9990  0018D4  0E01               	movlw	1
  9991  0018D6  6E12               	movwf	i2___ftadd@sign^0,c
  9992  0018D8                     i2l3880:
  9993  0018D8  C00C  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
  9994  0018DC  C00D  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
  9995  0018E0  C00E  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
  9996  0018E4  C014  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
  9997  0018E8  C012  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
  9998  0018EC  ECAB  F00F         	call	i2___ftpack	;wreg free
  9999  0018F0  C001  F009         	movff	?i2___ftpack,?i2___ftadd
 10000  0018F4  C002  F00A         	movff	?i2___ftpack+1,?i2___ftadd+1
 10001  0018F8  C003  F00B         	movff	?i2___ftpack+2,?i2___ftadd+2
 10002  0018FC  0012               	return		;funcret
 10003  0018FE                     __end_ofi2___ftadd:
 10004                           	callstack 0
 10005                           
 10006 ;; *************** function i2___ftpack *****************
 10007 ;; Defined at:
 10008 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\float.c"
 10009 ;; Parameters:    Size  Location     Type
 10010 ;;  arg             3    0[COMRAM] unsigned um
 10011 ;;  exp             1    3[COMRAM] unsigned char 
 10012 ;;  sign            1    4[COMRAM] unsigned char 
 10013 ;; Auto vars:     Size  Location     Type
 10014 ;;		None
 10015 ;; Return value:  Size  Location     Type
 10016 ;;                  3    0[COMRAM] float 
 10017 ;; Registers used:
 10018 ;;		wreg, status,2, status,0
 10019 ;; Tracked objects:
 10020 ;;		On entry : 0/0
 10021 ;;		On exit  : 0/0
 10022 ;;		Unchanged: 0/0
 10023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10024 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10026 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10027 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10028 ;;Total ram usage:        8 bytes
 10029 ;; Hardware stack levels used:    1
 10030 ;; This function calls:
 10031 ;;		Nothing
 10032 ;; This function is called by:
 10033 ;;		i2___ftadd
 10034 ;; This function uses a non-reentrant model
 10035 ;;
 10036                           
 10037                           	psect	text53
 10038  001F56                     __ptext53:
 10039                           	callstack 0
 10040  001F56                     i2___ftpack:
 10041                           	callstack 19
 10042                           
 10043                           ;incstack = 0
 10044  001F56  5004               	movf	i2___ftpack@exp^0,w,c
 10045  001F58  B4D8               	btfsc	status,2,c
 10046  001F5A  D005               	goto	i2u333_40
 10047  001F5C  5001               	movf	i2___ftpack@arg^0,w,c
 10048  001F5E  1002               	iorwf	(i2___ftpack@arg+1)^0,w,c
 10049  001F60  1003               	iorwf	(i2___ftpack@arg+2)^0,w,c
 10050  001F62  A4D8               	btfss	status,2,c
 10051  001F64  D00C               	goto	i2l3460
 10052  001F66                     i2u333_40:
 10053  001F66  0E00               	movlw	0
 10054  001F68  6E01               	movwf	?i2___ftpack^0,c
 10055  001F6A  0E00               	movlw	0
 10056  001F6C  6E02               	movwf	(?i2___ftpack+1)^0,c
 10057  001F6E  0E00               	movlw	0
 10058  001F70  6E03               	movwf	(?i2___ftpack+2)^0,c
 10059  001F72  0012               	return	
 10060  001F74                     i2l3458:
 10061  001F74  2A04               	incf	i2___ftpack@exp^0,f,c
 10062  001F76  90D8               	bcf	status,0,c
 10063  001F78  3203               	rrcf	(i2___ftpack@arg+2)^0,f,c
 10064  001F7A  3202               	rrcf	(i2___ftpack@arg+1)^0,f,c
 10065  001F7C  3201               	rrcf	i2___ftpack@arg^0,f,c
 10066  001F7E                     i2l3460:
 10067  001F7E  0E00               	movlw	0
 10068  001F80  1401               	andwf	i2___ftpack@arg^0,w,c
 10069  001F82  6E06               	movwf	??i2___ftpack^0,c
 10070  001F84  0E00               	movlw	0
 10071  001F86  1402               	andwf	(i2___ftpack@arg+1)^0,w,c
 10072  001F88  6E07               	movwf	(??i2___ftpack+1)^0,c
 10073  001F8A  0EFE               	movlw	254
 10074  001F8C  1403               	andwf	(i2___ftpack@arg+2)^0,w,c
 10075  001F8E  6E08               	movwf	(??i2___ftpack+2)^0,c
 10076  001F90  5006               	movf	??i2___ftpack^0,w,c
 10077  001F92  1007               	iorwf	(??i2___ftpack+1)^0,w,c
 10078  001F94  1008               	iorwf	(??i2___ftpack+2)^0,w,c
 10079  001F96  B4D8               	btfsc	status,2,c
 10080  001F98  D00C               	goto	i2l3466
 10081  001F9A  D7EC               	goto	i2l3458
 10082  001F9C                     i2l3462:
 10083  001F9C  2A04               	incf	i2___ftpack@exp^0,f,c
 10084  001F9E  0E01               	movlw	1
 10085  001FA0  2601               	addwf	i2___ftpack@arg^0,f,c
 10086  001FA2  0E00               	movlw	0
 10087  001FA4  2202               	addwfc	(i2___ftpack@arg+1)^0,f,c
 10088  001FA6  0E00               	movlw	0
 10089  001FA8  2203               	addwfc	(i2___ftpack@arg+2)^0,f,c
 10090  001FAA  90D8               	bcf	status,0,c
 10091  001FAC  3203               	rrcf	(i2___ftpack@arg+2)^0,f,c
 10092  001FAE  3202               	rrcf	(i2___ftpack@arg+1)^0,f,c
 10093  001FB0  3201               	rrcf	i2___ftpack@arg^0,f,c
 10094  001FB2                     i2l3466:
 10095  001FB2  0E00               	movlw	0
 10096  001FB4  1401               	andwf	i2___ftpack@arg^0,w,c
 10097  001FB6  6E06               	movwf	??i2___ftpack^0,c
 10098  001FB8  0E00               	movlw	0
 10099  001FBA  1402               	andwf	(i2___ftpack@arg+1)^0,w,c
 10100  001FBC  6E07               	movwf	(??i2___ftpack+1)^0,c
 10101  001FBE  0EFF               	movlw	255
 10102  001FC0  1403               	andwf	(i2___ftpack@arg+2)^0,w,c
 10103  001FC2  6E08               	movwf	(??i2___ftpack+2)^0,c
 10104  001FC4  5006               	movf	??i2___ftpack^0,w,c
 10105  001FC6  1007               	iorwf	(??i2___ftpack+1)^0,w,c
 10106  001FC8  1008               	iorwf	(??i2___ftpack+2)^0,w,c
 10107  001FCA  B4D8               	btfsc	status,2,c
 10108  001FCC  D006               	goto	i2l3470
 10109  001FCE  D7E6               	goto	i2l3462
 10110  001FD0                     i2l3468:
 10111  001FD0  0604               	decf	i2___ftpack@exp^0,f,c
 10112  001FD2  90D8               	bcf	status,0,c
 10113  001FD4  3601               	rlcf	i2___ftpack@arg^0,f,c
 10114  001FD6  3602               	rlcf	(i2___ftpack@arg+1)^0,f,c
 10115  001FD8  3603               	rlcf	(i2___ftpack@arg+2)^0,f,c
 10116  001FDA                     i2l3470:
 10117  001FDA  BE02               	btfsc	(i2___ftpack@arg+1)^0,7,c
 10118  001FDC  D003               	goto	i2u337_40
 10119  001FDE  0E02               	movlw	2
 10120  001FE0  6004               	cpfslt	i2___ftpack@exp^0,c
 10121  001FE2  D7F6               	goto	i2l3468
 10122  001FE4                     i2u337_40:
 10123  001FE4  A004               	btfss	i2___ftpack@exp^0,0,c
 10124  001FE6  9E02               	bcf	(i2___ftpack@arg+1)^0,7,c
 10125  001FE8  90D8               	bcf	status,0,c
 10126  001FEA  3204               	rrcf	i2___ftpack@exp^0,f,c
 10127  001FEC  5004               	movf	i2___ftpack@exp^0,w,c
 10128  001FEE  1203               	iorwf	(i2___ftpack@arg+2)^0,f,c
 10129  001FF0  5005               	movf	i2___ftpack@sign^0,w,c
 10130  001FF2  A4D8               	btfss	status,2,c
 10131  001FF4  8E03               	bsf	(i2___ftpack@arg+2)^0,7,c
 10132  001FF6  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 10133  001FFA  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 10134  001FFE  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 10135  002002  0012               	return		;funcret
 10136  002004                     __end_ofi2___ftpack:
 10137                           	callstack 0
 10138                           
 10139 ;; *************** function i2___ftge *****************
 10140 ;; Defined at:
 10141 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftge.c"
 10142 ;; Parameters:    Size  Location     Type
 10143 ;;  ff1             3   26[COMRAM] float 
 10144 ;;  ff2             3   29[COMRAM] float 
 10145 ;; Auto vars:     Size  Location     Type
 10146 ;;		None
 10147 ;; Return value:  Size  Location     Type
 10148 ;;		None               void
 10149 ;; Registers used:
 10150 ;;		wreg, status,2, status,0
 10151 ;; Tracked objects:
 10152 ;;		On entry : 0/0
 10153 ;;		On exit  : 0/0
 10154 ;;		Unchanged: 0/0
 10155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10156 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10158 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10159 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10160 ;;Total ram usage:        9 bytes
 10161 ;; Hardware stack levels used:    1
 10162 ;; This function calls:
 10163 ;;		Nothing
 10164 ;; This function is called by:
 10165 ;;		_clockNormalMode
 10166 ;; This function uses a non-reentrant model
 10167 ;;
 10168                           
 10169                           	psect	text54
 10170  00217E                     __ptext54:
 10171                           	callstack 0
 10172  00217E                     i2___ftge:
 10173                           	callstack 21
 10174                           
 10175                           ;incstack = 0
 10176  00217E  AE1D               	btfss	(i2___ftge@ff1+2)^0,7,c
 10177  002180  D00F               	goto	i2l4340
 10178  002182  0E00               	movlw	0
 10179  002184  6E21               	movwf	??i2___ftge^0,c
 10180  002186  0E00               	movlw	0
 10181  002188  6E22               	movwf	(??i2___ftge+1)^0,c
 10182  00218A  0E80               	movlw	128
 10183  00218C  6E23               	movwf	(??i2___ftge+2)^0,c
 10184  00218E  501B               	movf	i2___ftge@ff1^0,w,c
 10185  002190  5C21               	subwf	??i2___ftge^0,w,c
 10186  002192  6E1B               	movwf	i2___ftge@ff1^0,c
 10187  002194  501C               	movf	(i2___ftge@ff1+1)^0,w,c
 10188  002196  5822               	subwfb	(??i2___ftge+1)^0,w,c
 10189  002198  6E1C               	movwf	(i2___ftge@ff1+1)^0,c
 10190  00219A  501D               	movf	(i2___ftge@ff1+2)^0,w,c
 10191  00219C  5823               	subwfb	(??i2___ftge+2)^0,w,c
 10192  00219E  6E1D               	movwf	(i2___ftge@ff1+2)^0,c
 10193  0021A0                     i2l4340:
 10194  0021A0  AE20               	btfss	(i2___ftge@ff2+2)^0,7,c
 10195  0021A2  D00F               	goto	i2l4344
 10196  0021A4  0E00               	movlw	0
 10197  0021A6  6E21               	movwf	??i2___ftge^0,c
 10198  0021A8  0E00               	movlw	0
 10199  0021AA  6E22               	movwf	(??i2___ftge+1)^0,c
 10200  0021AC  0E80               	movlw	128
 10201  0021AE  6E23               	movwf	(??i2___ftge+2)^0,c
 10202  0021B0  501E               	movf	i2___ftge@ff2^0,w,c
 10203  0021B2  5C21               	subwf	??i2___ftge^0,w,c
 10204  0021B4  6E1E               	movwf	i2___ftge@ff2^0,c
 10205  0021B6  501F               	movf	(i2___ftge@ff2+1)^0,w,c
 10206  0021B8  5822               	subwfb	(??i2___ftge+1)^0,w,c
 10207  0021BA  6E1F               	movwf	(i2___ftge@ff2+1)^0,c
 10208  0021BC  5020               	movf	(i2___ftge@ff2+2)^0,w,c
 10209  0021BE  5823               	subwfb	(??i2___ftge+2)^0,w,c
 10210  0021C0  6E20               	movwf	(i2___ftge@ff2+2)^0,c
 10211  0021C2                     i2l4344:
 10212  0021C2  0E00               	movlw	0
 10213  0021C4  1A1B               	xorwf	i2___ftge@ff1^0,f,c
 10214  0021C6  0E00               	movlw	0
 10215  0021C8  1A1C               	xorwf	(i2___ftge@ff1+1)^0,f,c
 10216  0021CA  0E80               	movlw	128
 10217  0021CC  1A1D               	xorwf	(i2___ftge@ff1+2)^0,f,c
 10218  0021CE  0E00               	movlw	0
 10219  0021D0  1A1E               	xorwf	i2___ftge@ff2^0,f,c
 10220  0021D2  0E00               	movlw	0
 10221  0021D4  1A1F               	xorwf	(i2___ftge@ff2+1)^0,f,c
 10222  0021D6  0E80               	movlw	128
 10223  0021D8  1A20               	xorwf	(i2___ftge@ff2+2)^0,f,c
 10224  0021DA  501E               	movf	i2___ftge@ff2^0,w,c
 10225  0021DC  5C1B               	subwf	i2___ftge@ff1^0,w,c
 10226  0021DE  501F               	movf	(i2___ftge@ff2+1)^0,w,c
 10227  0021E0  581C               	subwfb	(i2___ftge@ff1+1)^0,w,c
 10228  0021E2  5020               	movf	(i2___ftge@ff2+2)^0,w,c
 10229  0021E4  581D               	subwfb	(i2___ftge@ff1+2)^0,w,c
 10230  0021E6  B0D8               	btfsc	status,0,c
 10231  0021E8  D002               	goto	i2l4350
 10232  0021EA  90D8               	bcf	status,0,c
 10233  0021EC  0012               	return	
 10234  0021EE                     i2l4350:
 10235  0021EE  80D8               	bsf	status,0,c
 10236  0021F0  0012               	return		;funcret
 10237  0021F2                     __end_ofi2___ftge:
 10238                           	callstack 0
 10239                           
 10240 ;; *************** function _EXT_Int1_isr *****************
 10241 ;; Defined at:
 10242 ;;		line 122 in file "HW2.c"
 10243 ;; Parameters:    Size  Location     Type
 10244 ;;		None
 10245 ;; Auto vars:     Size  Location     Type
 10246 ;;		None
 10247 ;; Return value:  Size  Location     Type
 10248 ;;                  1    wreg      void 
 10249 ;; Registers used:
 10250 ;;		wreg, status,2, status,0
 10251 ;; Tracked objects:
 10252 ;;		On entry : 0/0
 10253 ;;		On exit  : 0/0
 10254 ;;		Unchanged: 0/0
 10255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10260 ;;Total ram usage:        0 bytes
 10261 ;; Hardware stack levels used:    1
 10262 ;; This function calls:
 10263 ;;		Nothing
 10264 ;; This function is called by:
 10265 ;;		_highIsr
 10266 ;; This function uses a non-reentrant model
 10267 ;;
 10268                           
 10269                           	psect	text55
 10270  002A9E                     __ptext55:
 10271                           	callstack 0
 10272  002A9E                     _EXT_Int1_isr:
 10273                           	callstack 22
 10274                           
 10275                           ;HW2.c: 124: INTCONbits.INT0IF=0;
 10276                           
 10277                           ;incstack = 0
 10278  002A9E  92F2               	bcf	242,1,c	;volatile
 10279                           
 10280                           ;HW2.c: 125: if (seconds!=0 && minutes!=0 &&hours!=0){
 10281  002AA0  505A               	movf	_seconds^0,w,c
 10282  002AA2  105B               	iorwf	(_seconds+1)^0,w,c
 10283  002AA4  B4D8               	btfsc	status,2,c
 10284  002AA6  0012               	return	
 10285  002AA8  5049               	movf	_minutes^0,w,c
 10286  002AAA  104A               	iorwf	(_minutes+1)^0,w,c
 10287  002AAC  B4D8               	btfsc	status,2,c
 10288  002AAE  0012               	return	
 10289  002AB0  5058               	movf	_hours^0,w,c
 10290  002AB2  1059               	iorwf	(_hours+1)^0,w,c
 10291  002AB4  B4D8               	btfsc	status,2,c
 10292  002AB6  0012               	return	
 10293                           
 10294                           ;HW2.c: 126: PORTCbits.RC5 = 0;
 10295  002AB8  9A82               	bcf	130,5,c	;volatile
 10296  002ABA  0012               	return		;funcret
 10297  002ABC                     __end_of_EXT_Int1_isr:
 10298                           	callstack 0
 10299                           
 10300 ;; *************** function _EXT_Int0_isr *****************
 10301 ;; Defined at:
 10302 ;;		line 108 in file "HW2.c"
 10303 ;; Parameters:    Size  Location     Type
 10304 ;;		None
 10305 ;; Auto vars:     Size  Location     Type
 10306 ;;		None
 10307 ;; Return value:  Size  Location     Type
 10308 ;;                  1    wreg      void 
 10309 ;; Registers used:
 10310 ;;		wreg, status,2, status,0
 10311 ;; Tracked objects:
 10312 ;;		On entry : 0/0
 10313 ;;		On exit  : 3F/1
 10314 ;;		Unchanged: 0/0
 10315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10320 ;;Total ram usage:        0 bytes
 10321 ;; Hardware stack levels used:    1
 10322 ;; This function calls:
 10323 ;;		Nothing
 10324 ;; This function is called by:
 10325 ;;		_highIsr
 10326 ;; This function uses a non-reentrant model
 10327 ;;
 10328                           
 10329                           	psect	text56
 10330  002ABC                     __ptext56:
 10331                           	callstack 0
 10332  002ABC                     _EXT_Int0_isr:
 10333                           	callstack 22
 10334                           
 10335                           ;HW2.c: 110: INTCON3bits.INT1IF=0;
 10336                           
 10337                           ;incstack = 0
 10338  002ABC  90F0               	bcf	240,0,c	;volatile
 10339                           
 10340                           ;HW2.c: 111: if(mode==5)
 10341  002ABE  0E05               	movlw	5
 10342  002AC0  0101               	movlb	1	; () banked
 10343  002AC2  19E0               	xorwf	_mode& (0+255),w,b
 10344  002AC4  11E1               	iorwf	(_mode+1)& (0+255),w,b
 10345  002AC6  A4D8               	btfss	status,2,c
 10346  002AC8  D005               	goto	i2l4410
 10347                           
 10348                           ; BSR set to: 1
 10349                           ;HW2.c: 113: {;HW2.c: 114: mode=0;
 10350  002ACA  0E00               	movlw	0
 10351  002ACC  6FE1               	movwf	(_mode+1)& (0+255),b
 10352  002ACE  0E00               	movlw	0
 10353  002AD0  6FE0               	movwf	_mode& (0+255),b
 10354                           
 10355                           ;HW2.c: 115: }
 10356  002AD2  0012               	return	
 10357  002AD4                     i2l4410:
 10358                           
 10359                           ; BSR set to: 1
 10360                           ;HW2.c: 116: else{;HW2.c: 117: mode++;
 10361  002AD4  4BE0               	infsnz	_mode& (0+255),f,b
 10362  002AD6  2BE1               	incf	(_mode+1)& (0+255),f,b
 10363                           
 10364                           ; BSR set to: 1
 10365  002AD8  0012               	return		;funcret
 10366  002ADA                     __end_of_EXT_Int0_isr:
 10367                           	callstack 0
 10368                           
 10369                           	psect	rparam
 10370  0000                     
 10371                           	psect	temp
 10372  00005C                     btemp:
 10373                           	callstack 0
 10374  00005C                     	ds	1
 10375  0000                     int$flags	set	btemp
 10376  0000                     wtemp8	set	btemp+1
 10377  0000                     ttemp5	set	btemp+1
 10378  0000                     ttemp6	set	btemp+4
 10379  0000                     ttemp7	set	btemp+8
 10380                           
 10381                           	psect	idloc
 10382                           
 10383                           ;Config register IDLOC0 @ 0x200000
 10384                           ;	unspecified, using default values
 10385  200000                     	org	2097152
 10386  200000  FF                 	db	255
 10387                           
 10388                           ;Config register IDLOC1 @ 0x200001
 10389                           ;	unspecified, using default values
 10390  200001                     	org	2097153
 10391  200001  FF                 	db	255
 10392                           
 10393                           ;Config register IDLOC2 @ 0x200002
 10394                           ;	unspecified, using default values
 10395  200002                     	org	2097154
 10396  200002  FF                 	db	255
 10397                           
 10398                           ;Config register IDLOC3 @ 0x200003
 10399                           ;	unspecified, using default values
 10400  200003                     	org	2097155
 10401  200003  FF                 	db	255
 10402                           
 10403                           ;Config register IDLOC4 @ 0x200004
 10404                           ;	unspecified, using default values
 10405  200004                     	org	2097156
 10406  200004  FF                 	db	255
 10407                           
 10408                           ;Config register IDLOC5 @ 0x200005
 10409                           ;	unspecified, using default values
 10410  200005                     	org	2097157
 10411  200005  FF                 	db	255
 10412                           
 10413                           ;Config register IDLOC6 @ 0x200006
 10414                           ;	unspecified, using default values
 10415  200006                     	org	2097158
 10416  200006  FF                 	db	255
 10417                           
 10418                           ;Config register IDLOC7 @ 0x200007
 10419                           ;	unspecified, using default values
 10420  200007                     	org	2097159
 10421  200007  FF                 	db	255
 10422                           
 10423                           	psect	config
 10424                           
 10425                           ; Padding undefined space
 10426  300000                     	org	3145728
 10427  300000  FF                 	db	255
 10428                           
 10429                           ;Config register CONFIG1H @ 0x300001
 10430                           ;	Oscillator Selection bits
 10431                           ;	OSC = XT, XT oscillator
 10432                           ;	Fail-Safe Clock Monitor Enable bit
 10433                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 10434                           ;	Internal/External Oscillator Switchover bit
 10435                           ;	IESO = OFF, Oscillator Switchover mode disabled
 10436  300001                     	org	3145729
 10437  300001  01                 	db	1
 10438                           
 10439                           ;Config register CONFIG2L @ 0x300002
 10440                           ;	Power-up Timer Enable bit
 10441                           ;	PWRT = OFF, PWRT disabled
 10442                           ;	Brown-out Reset Enable bits
 10443                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
 10444                           ;	Brown Out Reset Voltage bits
 10445                           ;	BORV = 3, Minimum setting
 10446  300002                     	org	3145730
 10447  300002  1F                 	db	31
 10448                           
 10449                           ;Config register CONFIG2H @ 0x300003
 10450                           ;	Watchdog Timer Enable bit
 10451                           ;	WDT = ON, WDT enabled
 10452                           ;	Watchdog Timer Postscale Select bits
 10453                           ;	WDTPS = 32768, 1:32768
 10454  300003                     	org	3145731
 10455  300003  1F                 	db	31
 10456                           
 10457                           ; Padding undefined space
 10458  300004                     	org	3145732
 10459  300004  FF                 	db	255
 10460                           
 10461                           ;Config register CONFIG3H @ 0x300005
 10462                           ;	CCP2 MUX bit
 10463                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
 10464                           ;	PORTB A/D Enable bit
 10465                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
 10466                           ;	Low-Power Timer1 Oscillator Enable bit
 10467                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
 10468                           ;	MCLR Pin Enable bit
 10469                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
 10470  300005                     	org	3145733
 10471  300005  83                 	db	131
 10472                           
 10473                           ;Config register CONFIG4L @ 0x300006
 10474                           ;	Stack Full/Underflow Reset Enable bit
 10475                           ;	STVREN = ON, Stack full/underflow will cause Reset
 10476                           ;	Single-Supply ICSP Enable bit
 10477                           ;	LVP = ON, Single-Supply ICSP enabled
 10478                           ;	Extended Instruction Set Enable bit
 10479                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 10480                           ;	Background Debugger Enable bit
 10481                           ;	DEBUG = 0x1, unprogrammed default
 10482  300006                     	org	3145734
 10483  300006  85                 	db	133
 10484                           
 10485                           ; Padding undefined space
 10486  300007                     	org	3145735
 10487  300007  FF                 	db	255
 10488                           
 10489                           ;Config register CONFIG5L @ 0x300008
 10490                           ;	Code Protection bit
 10491                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
 10492                           ;	Code Protection bit
 10493                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
 10494                           ;	Code Protection bit
 10495                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
 10496                           ;	Code Protection bit
 10497                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
 10498  300008                     	org	3145736
 10499  300008  0F                 	db	15
 10500                           
 10501                           ;Config register CONFIG5H @ 0x300009
 10502                           ;	Boot Block Code Protection bit
 10503                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
 10504                           ;	Data EEPROM Code Protection bit
 10505                           ;	CPD = OFF, Data EEPROM not code-protected
 10506  300009                     	org	3145737
 10507  300009  C0                 	db	192
 10508                           
 10509                           ;Config register CONFIG6L @ 0x30000A
 10510                           ;	Write Protection bit
 10511                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
 10512                           ;	Write Protection bit
 10513                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
 10514                           ;	Write Protection bit
 10515                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
 10516                           ;	Write Protection bit
 10517                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
 10518  30000A                     	org	3145738
 10519  30000A  0F                 	db	15
 10520                           
 10521                           ;Config register CONFIG6H @ 0x30000B
 10522                           ;	Configuration Register Write Protection bit
 10523                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
 10524                           ;	Boot Block Write Protection bit
 10525                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
 10526                           ;	Data EEPROM Write Protection bit
 10527                           ;	WRTD = OFF, Data EEPROM not write-protected
 10528  30000B                     	org	3145739
 10529  30000B  E0                 	db	224
 10530                           
 10531                           ;Config register CONFIG7L @ 0x30000C
 10532                           ;	Table Read Protection bit
 10533                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
 10534                           ;	Table Read Protection bit
 10535                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
 10536                           ;	Table Read Protection bit
 10537                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
 10538                           ;	Table Read Protection bit
 10539                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
 10540  30000C                     	org	3145740
 10541  30000C  0F                 	db	15
 10542                           
 10543                           ;Config register CONFIG7H @ 0x30000D
 10544                           ;	Boot Block Table Read Protection bit
 10545                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
 10546  30000D                     	org	3145741
 10547  30000D  40                 	db	64
 10548                           tosu	equ	0xFFF
 10549                           tosh	equ	0xFFE
 10550                           tosl	equ	0xFFD
 10551                           stkptr	equ	0xFFC
 10552                           pclatu	equ	0xFFB
 10553                           pclath	equ	0xFFA
 10554                           pcl	equ	0xFF9
 10555                           tblptru	equ	0xFF8
 10556                           tblptrh	equ	0xFF7
 10557                           tblptrl	equ	0xFF6
 10558                           tablat	equ	0xFF5
 10559                           prodh	equ	0xFF4
 10560                           prodl	equ	0xFF3
 10561                           indf0	equ	0xFEF
 10562                           postinc0	equ	0xFEE
 10563                           postdec0	equ	0xFED
 10564                           preinc0	equ	0xFEC
 10565                           plusw0	equ	0xFEB
 10566                           fsr0h	equ	0xFEA
 10567                           fsr0l	equ	0xFE9
 10568                           wreg	equ	0xFE8
 10569                           indf1	equ	0xFE7
 10570                           postinc1	equ	0xFE6
 10571                           postdec1	equ	0xFE5
 10572                           preinc1	equ	0xFE4
 10573                           plusw1	equ	0xFE3
 10574                           fsr1h	equ	0xFE2
 10575                           fsr1l	equ	0xFE1
 10576                           bsr	equ	0xFE0
 10577                           indf2	equ	0xFDF
 10578                           postinc2	equ	0xFDE
 10579                           postdec2	equ	0xFDD
 10580                           preinc2	equ	0xFDC
 10581                           plusw2	equ	0xFDB
 10582                           fsr2h	equ	0xFDA
 10583                           fsr2l	equ	0xFD9
 10584                           status	equ	0xFD8

Data Sizes:
    Strings     176
    Constant    118
    Data        15
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     56      91
    BANK0           128     85     123
    BANK1           256    225     227
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_18(CODE[7]), ?_sprintf(BANK0[2]), STR_8(CODE[6]), STR_6(CODE[6]), 
		 -> STR_4(CODE[7]), STR_2(CODE[6]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_17(CODE[10]), STR_16(CODE[11]), STR_15(CODE[14]), STR_14(CODE[22]), 
		 -> STR_13(CODE[12]), STR_12(CODE[15]), STR_11(CODE[16]), STR_10(CODE[19]), 
		 -> STR_9(CODE[17]), STR_7(CODE[7]), STR_5(CODE[7]), STR_3(CODE[7]), 
		 -> STR_1(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 64
		 -> display@LCD(BANK1[64]), display@Buffer(BANK1[32]), display@LCDP(BANK1[64]), display@Buffer2(BANK1[32]), 
		 -> display@Buffer1(BANK1[32]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 64
		 -> display@LCD(BANK1[64]), display@Buffer(BANK1[32]), display@LCDP(BANK1[64]), display@Buffer2(BANK1[32]), 
		 -> display@Buffer1(BANK1[32]), 


Critical Paths under _main in COMRAM

    _read_adc_voltage->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _lcd_init->_lcd_send_byte
    _sprintf->___llmod
    _sprintf->_fround
    _scale->___ftmul
    ___awdiv->___awmod
    _fround->___ftmul
    ___lbdiv->___lbmod
    ___ftmul->___awdiv
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    ___ftadd->_fround
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles

Critical Paths under _highIsr in COMRAM

    _clockNormalMode->i2___ftge
    i2___ftsub->i2___ftadd
    i2___ftadd->i2___ftpack
    i2___ftge->i2___ftsub

Critical Paths under _main in BANK0

    _main->_display
    _read_adc_voltage->___ftdiv
    _display->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _highIsr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_display

Critical Paths under _highIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _highIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _highIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _highIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _highIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _highIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _highIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _highIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _highIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _highIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _highIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _highIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _highIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _highIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   85918
                                             83 BANK0      2     2      0
                           ___awtoft
                            ___ftmul
                _decrement10MinClock
                  _decrement10SClock
                     _decrementClock
                 _decrementHourClock
                  _decrementMinClock
                           _delay_ms
                            _display
                _increment10MinClock
                  _increment10SClock
                     _incrementClock
                 _incrementHourClock
                  _incrementMinClock
                    _init_adc_no_lib
                           _lcd_init
                      _lcd_send_byte
                   _read_adc_voltage
                         _setupPorts
 ---------------------------------------------------------------------------------
 (1) _setupPorts                                           0     0      0       0
                       _reloadTimer0
 ---------------------------------------------------------------------------------
 (2) _reloadTimer0                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_adc_voltage                                     9     6      3    9431
                                              6 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (2) _read_adc_raw_no_lib                                  7     5      2      65
                                             35 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4119
                                             47 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3866
                                             43 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1665
                                             45 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (1) _init_adc_no_lib                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _incrementMinClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _incrementHourClock                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _incrementClock                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _increment10SClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _increment10MinClock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _display                                            228   228      0   62569
                                             81 BANK0      2     2      0
                                              0 BANK1    225   225      0
                         _lcd_gotoxy
                           _lcd_puts
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             45    35     10   55622
                                             37 BANK0     44    34     10
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                7     4      3   10734
                                              9 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1513
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1705
                                             41 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              11     8      3    8250
                                             55 COMRAM     1     1      0
                                              9 BANK0     10     7      3
                            ___ftmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              4     3      1     502
                                             35 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     511
                                             39 COMRAM     4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    6887
                                             49 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     634
                                             35 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     853
                                             35 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1282
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    3565
                                             43 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     952
                                             48 COMRAM     8     0      8
                                              0 BANK0      1     1      0
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     781
                                             35 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     641
                                             16 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5734
                                             31 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5208
                                             19 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3373
                                             35 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     155
                                             35 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     958
                                             35 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             2     0      2    3955
                                             49 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    3260
                                             48 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1    1799
                                             45 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_send_byte                                        2     1      1     971
                                             43 COMRAM     2     1      1
                       _delay_cycles
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (2) _lcd_send_nibble                                      2     2      0      99
                                             41 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (3) _delay_cycles                                         6     6      0      68
                                             35 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             4     2      2     428
                                             35 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _decrementMinClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _decrementHourClock                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _decrementClock                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _decrement10SClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _decrement10MinClock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _highIsr                                              0     0      0    2865
                       _EXT_Int0_isr
                       _EXT_Int1_isr
                    _clockNormalMode
                     i2_reloadTimer0
 ---------------------------------------------------------------------------------
 (9) _clockNormalMode                                      0     0      0    2865
                          i2___ftadd
                           i2___ftge
                          i2___ftsub
                     i2_reloadTimer0
 ---------------------------------------------------------------------------------
 (9) i2_reloadTimer0                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i2___ftsub                                           6     0      6    1372
                                             20 COMRAM     6     0      6
                          i2___ftadd
 ---------------------------------------------------------------------------------
 (11) i2___ftadd                                          12     6      6    1253
                                              8 COMRAM    12     6      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (12) i2___ftpack                                          8     3      5     309
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (10) i2___ftge                                            9     3      6     240
                                             26 COMRAM     9     3      6
                          i2___ftadd (ARG)
                          i2___ftsub (ARG)
 ---------------------------------------------------------------------------------
 (9) _EXT_Int1_isr                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EXT_Int0_isr                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awtoft
     ___ftpack
     ___wmul (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lbdiv (ARG)
       ___lbmod (ARG)
     ___lbmod (ARG)
   _decrement10MinClock
   _decrement10SClock
   _decrementClock
   _decrementHourClock
   _decrementMinClock
   _delay_ms
   _display
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _lcd_send_nibble
             _delay_cycles
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
   _increment10MinClock
   _increment10SClock
   _incrementClock
   _incrementHourClock
   _incrementMinClock
   _init_adc_no_lib
   _lcd_init
     _delay_ms
     _lcd_send_byte
       _delay_cycles
       _lcd_send_nibble
         _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _lcd_send_byte
     _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _read_adc_voltage
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___wmul
     _read_adc_raw_no_lib
   _setupPorts
     _reloadTimer0

 _highIsr (ROOT)
   _EXT_Int0_isr
   _EXT_Int1_isr
   _clockNormalMode
     i2___ftadd
       i2___ftpack
     i2___ftge
       i2___ftadd (ARG)
         i2___ftpack
       i2___ftsub (ARG)
         i2___ftadd
           i2___ftpack
     i2___ftsub
       i2___ftadd
         i2___ftpack
     i2_reloadTimer0
   i2_reloadTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E1      E3       7       88.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     55      7B       5       96.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     38      5B       1       72.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B9      34        0.0%
DATA                 0      0     1B9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Fri Apr 08 15:27:07 2022

           ?_read_adc_voltage 0086                i2_reloadTimer0 2AF0            ??_read_adc_voltage 0039  
                          l14 2942                            l76 2802                            _HS 0053  
              ?_lcd_send_byte 002C                  ___awdiv@sign 002F                            _ft 004D  
                          _sp 003F           ___wmul@multiplicand 0026                    i2___ftpack 1F56  
                ___ftadd@exp1 009E                  ___ftadd@exp2 009D                  ___ftadd@sign 009C  
                         l306 245E                           l316 27EA                           l326 2906  
                         l334 2A9C                           l510 076A                           l360 0F50  
                         l268 29CC                           l373 1082                           l294 260E  
                         l383 10BE                           l392 113A                           l368 1066  
                         l378 10A0                           l388 10DC                           l577 20F8  
                         l915 1A82                           l916 1AAA                           l908 1DA0  
                         l947 29F0                           l992 238C                           l897 16E4  
                         _RPS 004F                           _lcd 000F83                           _spf 0039  
                ___awmod@sign 0029     read_adc_voltage@raw_value 008D                           wreg 000FE8  
                 lcd_gotoxy@x 002F                   lcd_gotoxy@y 002E                  ___ftdiv@cntr 0080  
           _decrement10SClock 2400                   display@LCDP 0140                  ___ftdiv@sign 0085  
                        l5100 207E                          l5008 1730                          l5024 1B52  
                        l5120 2220                          l5112 2206                          l5042 1B94  
                        l5018 1B2A                          l5210 156C                          l5122 2228  
                        l5052 1BBC                          l5204 14C6                          l5132 224A  
                        l5116 2212                          l5310 1AD4                          l5038 1B84  
                        l5150 283E                          l5230 0CF4                          l5048 1BAC  
                        l5080 203E                          l5136 2258                          l5128 2240  
                        l5224 0C62                          l5306 1AC4                          l5146 2838  
                        l5162 285C                          l5082 2046                          l5074 2028  
                        l5242 0E18                          l5234 0D18                          l5420 212C  
                        l5412 2702                          l5404 20EA                          l5316 1ADC  
                        l5260 2A78                          l5092 2066                          l5068 2018  
                        l6300 108C                          l5190 254E                          l5430 217A  
                        l5502 24C4                          l5326 1C14                          l5318 1AE8  
                        l5270 1A2E                          l5158 2854                          l6150 11BA  
                        l5184 251E                          l5512 2A00                          l5424 214E  
                        l5504 24D0                          l5176 2986                          l5168 296E  
                        l5096 2070                          l5248 0EAA                          l6160 122A  
                        l6312 10AA                          l5186 2536                          l5194 255A  
                        l5370 1CBE                          l5354 1C92                          l5346 1C62  
                        l5610 0240                          l5602 0214                          l6162 1240  
                        l6170 129C                          l6154 11DE                          l5188 2542  
                        l5516 2A12                          l4900 1F22                          l5444 1E00  
                        l5604 021E                          l5620 028A                          l5540 0048  
                        l5532 001A                          l6164 1256                          l6156 11FE  
                        l6148 119C                          l6324 10C8                          l4902 1F2C  
                        l5462 1E56                          l5366 1CAE                          l5702 059E  
                        l5622 02C4                          l5550 007E                          l6158 1214  
                        l6262 0FC6                          l4920 29BE                          l5480 1E96  
                        l5472 1E6E                          l5392 20AA                          l5376 1CC6  
                        l5800 08DA                          l5616 0276                          l5608 022E  
                        l5544 004E                          l6168 126C                          l6344 112A  
                        l6360 1166                          l6336 10E6                          l6256 0F94  
                        l6248 0F78                          l4930 2738                          l5474 1E7A  
                        l5466 1E66                          l5394 20B6                          l5490 2356  
                        l5378 1CD2                          l5714 05FE                          l5802 08E4  
                        l5570 014A                          l5538 0036                          l6282 105A  
                        l4932 273C                          l5812 0918                          l5732 0648  
                        l5740 066E                          l5628 02D8                          l5564 0100  
                        l5572 0160                          l6356 1160                          l6268 0FD4  
                        l4854 2948                          l4926 2730                          l4950 15FE  
                        l5734 0658                          l5726 0632                          l5718 0610  
                        l5670 0470                          l5662 040A                          l5654 03A4  
                        l5638 0312                          l5590 01A4                          l5910 1D14  
                        l4928 2734                          l4936 2742                          l5496 237E  
                        l5488 234A                          l5840 09AA                          l5824 0934  
                        l5576 016E                          l6288 1070                          l4938 275C  
                        l4890 1EC6                          l5818 0930                          l5770 076E  
                        l5682 04DC                          l5666 0430                          l5586 0194  
                        l5578 0172                          l4892 1ED0                          l4980 1682  
                        l4956 1626                          l5860 0A1A                          l5852 09E6  
                        l5836 098A                          l5764 0746                          l5748 0694  
                        l5756 0726                          l5692 0534                          l5588 019E  
                        l5916 1D3C                          l4894 1EEE                          l4990 16B6  
                        l4982 168C                          l5854 09EE                          l5846 09C4  
                        l5782 07DC                          l5758 0730                          l5678 04B6  
                        l5598 01FE                          l4992 16C0                          l5792 08BA  
                        l5696 059A                          l5936 1D7A                          l4898 1F04  
                        l4978 1678                          l5890 0A9A                          l5858 0A12  
                        l5794 08C4                          l5778 078C                          l5868 0A3A  
                        l5876 0A5A                          l5972 266E                          l4998 1700  
                        l5894 0B1C                          l5958 28AE                          l5896 0B20  
                        l5986 2686                          STR_1 FFEC                          STR_2 FFF3  
                        STR_3 FFEC                          STR_4 FFDE                          STR_5 FFE5  
                        STR_6 FFF3                          STR_7 FFE5                          STR_8 FFF9  
                        STR_9 FF78                          _IPR1 000F9F                          _IPR2 000FA2  
                        _PIE1 000F9D                          _PIE2 000FA0                          u6020 2842  
                        u6220 1AEE                          u6141 1A12                          u6310 20BA  
                        u6230 1C02                          u6150 1A1C                          u7110 0A62  
                        u6400 1E1E                          u7120 0A80                          u6161 1A3E  
                        u5515 286A                          u5516 286C                          u5540 1EB8  
                        u7140 0B30                          u7300 23B6                          u5621 15BE  
                        u6405 1E16                          u7150 0B4A                          u7310 23D6  
                        u5631 15D2                          u5720 1656                          u6440 1E80  
                        u7400 2588                          u7320 23F6                          u7240 2474  
                        u7161 1CFA                          _PIR1 000F9E                          u7330 2416  
                        u6290 1CD8                          u7410 25A8                          u7250 2494  
                        _PIR2 000FA1                          u7340 2436                          u5580 1F36  
                        u5660 15F0                          u6700 034A                          u6540 00DC  
                        u7260 24B4                          u6381 1DE4                          u7181 1D24  
                        u7430 28FE                          u7350 2456                          u7270 25D6  
                        u6390 1DEE                          u6470 235A                          u5831 1B12  
                        u5760 1694                          u5920 204A                          u6640 026A  
                        u7440 2A58                          u7360 2624                          u6705 0340  
                        u7450 2A94                          u5690 1618                          u6810 05D4  
                        u7370 2640                          u5851 1B3A                          u7380 27C2  
                        u6900 0754                          u6740 0442                          u6580 01D2  
                        u7390 27E2                          u5790 16C8                          u6910 0764  
                        u6750 0482                          u6647 0260                          u6587 01C8  
                        u5980 222C                          u6780 04B6                          u6870 067C  
                        u7747 2892                          u7757 29C0                          u6990 096A  
            ?_lcd_send_nibble 0001            ?_decrement10SClock 0001                          _main 0ECE  
                ___ftpack@arg 0024                          _mode 01E0                  ___ftpack@exp 0027  
                        _temp 0042                          fsr1h 000FE2                          fsr2h 000FDA  
                        indf1 000FE7                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9                          btemp 005C                  i2___ftadd@f1 0009  
                i2___ftadd@f2 000C                  i2___ftge@ff1 001B                  i2___ftge@ff2 001E  
                        prodh 000FF4                          prodl 000FF3                          start 000E  
      __end_ofi2_reloadTimer0 2AFA                  _sprintf$1845 00B5           ??_decrement10SClock 0024  
                ___ftmul@cntr 0087                  ___param_bank 000000                  ___ftmul@sign 0088  
                i2___ftsub@f1 0015                  i2___ftsub@f2 0018    __end_of_decrementHourClock 2A9E  
                ___fttol@exp1 009E                  ___fttol@lval 009A          __end_of_delay_cycles 2964  
                       ?_main 0001               __end_of___awdiv 2088               __end_of___lbdiv 2860  
             __end_of___ftadd 1756                         STR_10 FF65                         STR_11 FF89  
                       STR_12 FF99                         STR_13 FFB6                         STR_14 FF4F  
                       STR_15 FFA8                         STR_16 FFC2                         STR_17 FFCD  
                       STR_18 FFD7               __end_of___awmod 2262               __end_of___lbmod 298E  
             __end_of___ftdiv 1DD2               __end_of___ftneg 29FE               __end_of___lldiv 210A  
             __end_of___ftmul 1BF6                         _T0CON 000FD5               ___awdiv@divisor 002C  
             __end_of___llmod 239E               __end_of___ftsub 272C               __end_of___fttol 1EA8  
                       i2l262 26E0                         i2l256 26D6                         i2l265 26E6  
                       i2l257 26D2               ___awdiv@counter 002E                         i2l897 188C  
                       _TMR3H 000FB3                         _TMR3L 000FB2                         _PORTC 000F82  
     read_adc_voltage@channel 008C                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
                ___lltoft@exp 0034               __end_of_highIsr 26EA     __end_of_decrement10SClock 2460  
             __end_of_display 13C0                 ___awtoft@sign 002F               __end_of_dpowers FF4F  
                       _count 00F9                         _scale 0B58               __end_of_isdigit 2A80  
                       _hours 0058               _init_adc_no_lib 2ADA                         _tempf 003C  
               ___ftpack@sign 0028                         tablat 000FF5              __end_ofi2___ftge 21F2  
                       ttemp5 005D                         ttemp6 0060                         ttemp7 0064  
                       status 000FD8       read_adc_voltage@voltage 0089                         wtemp8 005D  
             __end_of_sprintf 0B58  __size_of_increment10MinClock 0052               ___lbdiv@divisor 0028  
             ___lbdiv@counter 002A            __size_ofi2___ftadd 01A8            __size_ofi2___ftsub 0040  
             ?i2_reloadTimer0 0001               __initialization 2262                  __end_of_main 116C  
             ??_lcd_send_byte 002D                _decrementClock 25C2                   ?i2___ftpack 0001  
                      ??_main 0039                 ___fttol@sign1 0099                 __activetblptr 000002  
        __size_of__tdiv_to_l_ 00FE               _clockNormalMode 18FE                        _ADCON0 000FC2  
                      _ADCON1 000FC1                        _ADCON2 000FC0              ___llmod@dividend 0031  
                      ?_scale 0089                        _ADRESH 000FC4                        _ADRESL 000FC3  
            ___awdiv@dividend 002A             _decrementMinClock 27AE              __end_of___awtoft 28D2  
            __end_of___ftpack 1F56              __end_of___lltoft 251A                        i2l4410 2AD4  
                      i2l4340 21A0                        i2l3460 1F7E                        i2l4350 21EE  
                      i2l3470 1FDA                        i2l3462 1F9C                        i2l4422 197C  
                      i2l4344 21C2                        i2l3466 1FB2                        i2l3458 1F74  
                      i2l4442 19FC                        i2l4418 1940                        i2l3468 1FD0  
                      i2l3822 17A6                        i2l4358 2784                        i2l4448 19FC  
                      i2l3850 1820                        i2l3852 182A                        i2l3828 17CE  
                      i2l3870 18A8                        i2l3862 185E                        i2l3854 1834  
                      i2l3880 18D8                        i2l3864 1868                        _INTCON 000FF2  
               display@Buffer 0180                        u385_41 1766                        u386_41 177A  
          ?_decrementMinClock 0001           _decrement10MinClock 28D2              __end_of_delay_ms 29DA  
                      _Buffer 00D5           ??_decrementMinClock 0024              __end_of__powers_ FF00  
            __end_of_lcd_init 26A2              __end_of_lcd_putc 2570              __end_of_lcd_puts 2A22  
                      ___ftge 210A        __end_of_decrementClock 2610                        ___wmul 298E  
                   ??___awdiv 002E                     ??___lbdiv 0029                     ??___ftadd 0099  
                   ??___awmod 0028                     ??___lbmod 0025                     ??___ftdiv 0036  
                   ??___ftneg 0027                     ??___lldiv 002C                     ??___ftmul 0080  
                   ??___llmod 0039                     ??___ftsub 0039                     ??___fttol 0094  
                      _fround 13C0                        clear_0 22AE                        clear_1 22BA  
            ___awdiv@quotient 0030               ___awmod@divisor 0026               ___awmod@counter 0028  
        ?_decrement10MinClock 0001                     ??_highIsr 0024                     ??_display 00D1  
       ___ftmul@f3_as_product 0084       __end_of_init_adc_no_lib 2AE6                  __pdataCOMRAM 0053  
                   ??_isdigit 0024             __end_ofi2___ftadd 18FE                i2___ftadd@exp1 0014  
              i2___ftadd@exp2 0013             __end_ofi2___ftsub 27AE                i2___ftadd@sign 0012  
                __mediumconst FED8                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8    __size_of_decrement10SClock 0060     __end_of_decrementMinClock 27EC  
     __size_of_incrementClock 005E                     ??_sprintf 00AF              ___lbdiv@dividend 0029  
             ___lbmod@divisor 0024                    __accesstop 0080       __end_of__initialization 22C0  
             ___lbmod@counter 0026                    ___ftadd@f1 0093                    ___ftadd@f2 0096  
         __size_ofi2___ftpack 00AE                    ___ftge@ff1 0024                    ___ftge@ff2 0027  
               ___rparam_used 000001                    ___ftdiv@f1 0030                    ___ftdiv@f2 0033  
                  ___ftdiv@f3 0081                    ___ftneg@f1 0024                    ___awtoft@c 002C  
              i2___ftpack@arg 0001                i2___ftpack@exp 0004                    ___ftmul@f1 0032  
                  ___ftmul@f2 0035                    ___ftsub@f1 009F                    ___ftsub@f2 00A2  
                  ___fttol@f1 0090                __pcstackCOMRAM 0001         __size_of_delay_cycles 002E  
             ?_decrementClock 0001                  __pidataBANK0 2B03                    ___lltoft@c 002C  
               ?_EXT_Int0_isr 0001                 ?_EXT_Int1_isr 0001                 __end_of_scale 0ECE  
       ??_decrement10MinClock 0024              ___lbdiv@quotient 002B       __end_of_clockNormalMode 1A02  
                   ?i2___ftge 001B                    __div_to_l_ 1BF6     __size_of_read_adc_voltage 006A  
           lcd_gotoxy@address 0030               __div_to_l_@exp1 002F               __div_to_l_@cntr 002E  
                     ??_scale 0038               __div_to_l_@quot 002A                  sprintf@width 00CC  
                  __pbssBANK0 00D5                    __pbssBANK1 01E0   __end_of_read_adc_raw_no_lib 2826  
                _delay_cycles 2936                 __div_to_l_@f1 0024                 __div_to_l_@f2 0027  
               ?_reloadTimer0 0001   __size_of_incrementHourClock 001E             _increment10SClock 239E  
              lcd_send_byte@n 002C                       ?___ftge 0024                ??_EXT_Int0_isr 0001  
              ??_EXT_Int1_isr 0001                       ?___wmul 0024            ?_increment10SClock 0001  
            lcd_send_nibble@n 002B                       ?_fround 0089                     ?___awtoft 002C  
                   ?___ftpack 0024                     ?___lltoft 002C                    ??i2___ftge 0021  
         _increment10MinClock 2570           ??_increment10SClock 0024              ?_init_adc_no_lib 0001  
                     _INTCON2 000FF1                       _INTCON3 000FF0                display@Buffer1 01A0  
              display@Buffer2 01C0            _decrementHourClock 2A80                     ?_delay_ms 0024  
                  _lcd_gotoxy 272C    __size_of_decrementMinClock 003E                     ?_lcd_init 0001  
                   ?_lcd_putc 0001                     ?_lcd_puts 0032           ?_decrementHourClock 0001  
            ??i2_reloadTimer0 0001          ?_increment10MinClock 0001                ??_reloadTimer0 0024  
   __end_of_increment10SClock 2400             __end_of__npowers_ FF27                       __Hparam 0000  
                  _scale$1844 008C                       __Lparam 0000      __size_of_lcd_send_nibble 0022  
             __size_of___ftge 0074                       ___awdiv 2004                       ___lbdiv 2826  
                     ___ftadd 15AC                       ___awmod 21F2                       ___lbmod 2964  
                     ___ftdiv 1CEA                       ___ftneg 29DA                       ___lldiv 2088  
             __size_of___wmul 0026                       ___ftmul 1B00                       ___llmod 2338  
                     ___ftsub 26EA                       ___fttol 1DD2          ??_decrementHourClock 0024  
                     __pcinit 2262                  ??i2___ftpack 0006                       _clkMode 0056  
                  ??___awtoft 002F                    ??___ftpack 0029               __size_of_fround 01EC  
                     __ramtop 1000                    ??___lltoft 0030                       __ptext0 0ECE  
                     __ptext1 2908                       __ptext2 2AE6                       __ptext3 22CE  
                     __ptext4 27EC                       __ptext5 1CEA                       __ptext6 289A  
                     __ptext7 265A                       __ptext8 2ADA                       __ptext9 2610  
                     _highIsr 0008              ?_clockNormalMode 0001                       _display 116C  
                   _T0CONbits 000FD5                   ?__div_to_l_ 0024                       _dpowers FF27  
                     _initial 0045                       _isdigit 2A62              ___awmod@dividend 0024  
                     _minutes 0049                       _seconds 005A                _incrementClock 2460  
                  ??_delay_ms 0026                       _stpMode 0047                       _sprintf 0012  
                  ??_lcd_init 002E                __pintcode_body 26A2                    ??_lcd_putc 0031  
                  ??_lcd_puts 0034          end_of_initialization 22C0         ??_increment10MinClock 0024  
               __Lmediumconst FED8                       int_func 26A2          lcd_send_byte@cm_data 002D  
          __end_ofi2___ftpack 2004               ___lldiv@divisor 0028               ___lldiv@counter 0030  
           _incrementMinClock 2610                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE            ?_incrementMinClock 0001  
              __tdiv_to_l_@f1 0024                __tdiv_to_l_@f2 0027         __end_of_lcd_send_byte 289A  
               ??__tdiv_to_l_ 002A                     _PORTBbits 000F81                     _PORTCbits 000F82  
                   _PORTEbits 000F84                    _setupPorts 2908        __end_of_incrementClock 24BE  
         ??_incrementMinClock 0024              ___lbmod@dividend 0025              _read_adc_voltage 22CE  
                   _TRISCbits 000F94                   ?_lcd_gotoxy 002E                     i2___ftadd 1756  
        __end_of_EXT_Int0_isr 2ADA          __end_of_EXT_Int1_isr 2ABC               _LCD_INIT_STRING 00F5  
                   i2___ftsub 276E                     _RPS_count 0051                   ___lbmod@rem 0027  
                 ___ftdiv@exp 0084                    display@LCD 0100              ??_decrementClock 0024  
  __size_of_increment10SClock 0062     __end_of_incrementMinClock 265A               i2___ftpack@sign 0005  
         __size_of__div_to_l_ 00F4                   ___ftmul@exp 0083                __end_of___ftge 217E  
              __end_of___wmul 29B4                 __pidataCOMRAM 2AFA                 delay_cycles@n 0027  
               delay_cycles@x 0028             ??_lcd_send_nibble 002A                __end_of_fround 15AC  
             ?_incrementClock 0001          __end_of_reloadTimer0 2AF0           start_initialization 2262  
           __size_ofi2___ftge 0074           __end_of__tdiv_to_l_ 1B00                    ?i2___ftadd 0009  
                  ?i2___ftsub 0015               ___llmod@divisor 0035               ___llmod@counter 0080  
 __end_of_decrement10MinClock 2908                      ??___ftge 002A           __size_of_lcd_gotoxy 0042  
                    ??___wmul 0028                   __pdataBANK0 00F5  read_adc_raw_no_lib@raw_value 0029  
                    ??_fround 0038                 sprintf@tmpval 00BD                   ?_setupPorts 0001  
                  fround@prec 0092             __size_of___awtoft 0038             __size_of___ftpack 00AE  
           __size_of___lltoft 005C                   __pbssCOMRAM 0039                 __pcstackBANK0 0080  
               __pcstackBANK1 0100                  _isdigit$1593 0025             __size_of_delay_ms 0026  
           __size_of_lcd_init 0048                   sprintf@flag 00C7                   sprintf@eexp 00C5  
           __size_of_lcd_putc 0056             __size_of_lcd_puts 0024                   sprintf@fval 00C9  
                 sprintf@prec 00CE    __end_of_incrementHourClock 2A62    __size_of_incrementMinClock 004A  
                   __pintcode 0008  __size_of_read_adc_raw_no_lib 003A                 __pmediumconst FED8  
                   _flageBuzz 004B                      ?___awdiv 002A                      ?___lbdiv 0028  
                    ?___ftadd 0093                      ?___awmod 0024                      ?___lbmod 0024  
                    ?___ftdiv 0030                      ?___ftneg 0024                      ?___lldiv 0024  
                    ?___ftmul 0032                      ?___llmod 0031                      ?___ftsub 009F  
                   __npowers_ FF00                      ?___fttol 0090                   __tdiv_to_l_ 1A02  
                    ?_highIsr 0001                      ?_display 0001                  ??__div_to_l_ 002A  
       __size_of_EXT_Int0_isr 001E                      ?_isdigit 0001         __size_of_EXT_Int1_isr 001E  
                 ??i2___ftadd 000F                      ?_sprintf 00A5                __size_of_scale 0376  
                 ??i2___ftsub 001B      __size_of_init_adc_no_lib 000C                ___wmul@product 0028  
                   delay_ms@i 0026                     delay_ms@n 0024           __size_of_setupPorts 002E  
                    i2u402_40 1870                      i2u333_40 1F66                      i2u337_40 1FE4  
          __end_of__div_to_l_ 1CEA                      i2u522_40 26C8      __end_of_read_adc_voltage 2338  
                    i2u392_40 17C0                      i2u395_40 17FE                      i2u389_40 1798  
                    i2u399_40 183C                      i2u487_40 1990                      _RCONbits 000FD0  
  read_adc_raw_no_lib@channel 0028                  _EXT_Int0_isr 2ABC                  _EXT_Int1_isr 2A9E  
       __size_of_reloadTimer0 000A   __size_of_decrementHourClock 001E                    _ADCON0bits 000FC2  
           ___wmul@multiplier 0024                      i2___ftge 217E                     lcd_init@i 002E  
                   main@count 00D3                     lcd_putc@c 0031                     lcd_puts@s 0032  
                ??_lcd_gotoxy 002F   __end_of_increment10MinClock 25C2      __size_of_clockNormalMode 0104  
                 _INTCON2bits 000FF1                   _INTCON3bits 000FF0                     copy_data0 2276  
                   copy_data1 2296               _lcd_send_nibble 2A22                  _reloadTimer0 2AE6  
                    __Hrparam 0000                      __Lrparam 0000       __size_ofi2_reloadTimer0 000A  
          __end_of_lcd_gotoxy 276E              ??_incrementClock 0024              __size_of___awdiv 0084  
            __size_of___lbdiv 003A              __size_of___ftadd 01AA              __size_of___awmod 0070  
            __size_of___lbmod 002A              __size_of___ftdiv 00E8              __size_of___ftneg 0024  
            __size_of___lldiv 0082              __size_of___ftmul 00F6              __size_of___llmod 0066  
            __size_of___ftsub 0042              __size_of___fttol 00D6                      ___awtoft 289A  
                    ___ftpack 1EA8                   _fround$1842 008F                   _fround$1843 008C  
                    ___lltoft 24BE              __size_of_highIsr 26E2              __size_of_display 0254  
                  sprintf@len 00BB                    sprintf@val 00C1              __size_of_isdigit 001E  
                    _delay_ms 29B4                      __ptext10 2A44                      __ptext11 2460  
                    __ptext20 13C0                      __ptext12 239E                      __ptext21 2964  
                    __ptext13 2570                      __ptext30 1DD2                      __ptext22 2826  
                    __ptext14 116C                      __ptext31 26EA                      __ptext23 1B00  
                    __ptext15 0012                      __ptext40 2A22                      __ptext32 15AC  
                    __ptext24 1A02                      __ptext16 0B58                      __ptext41 2936  
                    __ptext33 1EA8                      __ptext25 1BF6                      __ptext17 21F2  
                    __ptext50 2AF0                      __ptext42 29B4                      __ptext34 29DA  
                    __ptext26 298E                      __ptext18 2004                      __ptext51 276E  
                    __ptext43 27AE                      __ptext35 210A                      __ptext27 24BE  
                    __ptext19 2A62                      __ptext52 1756                      __ptext44 2A80  
                    __ptext36 29FE                      __ptext28 2338                      __ptext53 1F56  
                    __ptext45 25C2                      __ptext37 251A                      __ptext29 2088  
                    __ptext54 217E                      __ptext46 2400                      __ptext38 272C  
                    __ptext55 2A9E                      __ptext47 28D2                      __ptext39 2860  
                    __ptext56 2ABC                      __ptext49 18FE                      __powers_ FED9  
                    _lcd_init 265A                      _lcd_putc 251A                      _lcd_puts 29FE  
            __size_of_sprintf 0B46        __size_of_lcd_send_byte 003A                 ?_delay_cycles 0001  
               __size_of_main 029E             ??_init_adc_no_lib 0024                      int$flags 005C  
                ??_setupPorts 0024                    _INTCONbits 000FF2                      isdigit@c 0026  
         _read_adc_raw_no_lib 27EC                      scale@scl 008F                      intlevel2 0000  
                   sprintf@ap 00BA                     sprintf@cp 00B8       __end_of_lcd_send_nibble 2A44  
            __tdiv_to_l_@exp1 0032              __tdiv_to_l_@cntr 0031                     sprintf@sp 00A5  
              ??_delay_cycles 0024              __tdiv_to_l_@quot 002D              ___lldiv@dividend 0024  
           ??_clockNormalMode 0024            __end_of_setupPorts 2936          ?_read_adc_raw_no_lib 0024  
     __size_of_decrementClock 004E            _incrementHourClock 2A44                 _lcd_send_byte 2860  
                ?__tdiv_to_l_ 0024  __size_of_decrement10MinClock 0036                      sprintf@c 00D0  
                    sprintf@f 00A7              ___lldiv@quotient 002C           ?_incrementHourClock 0001  
        ??_incrementHourClock 0024         ??_read_adc_raw_no_lib 0026  
